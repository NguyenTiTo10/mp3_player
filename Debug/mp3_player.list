
mp3_player.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097b8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019e8  08009958  08009958  0000a958  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b340  0800b340  0000d110  2**0
                  CONTENTS
  4 .ARM          00000008  0800b340  0800b340  0000c340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b348  0800b348  0000d110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b348  0800b348  0000c348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b34c  0800b34c  0000c34c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800b350  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000714  20000110  0800b460  0000d110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000824  0800b460  0000d824  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001640b  00000000  00000000  0000d140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a03  00000000  00000000  0002354b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  00026f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000103c  00000000  00000000  00028430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b038  00000000  00000000  0002946c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d790  00000000  00000000  000444a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f7d6  00000000  00000000  00061c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010140a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f10  00000000  00000000  00101450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00107360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000110 	.word	0x20000110
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009940 	.word	0x08009940

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000114 	.word	0x20000114
 80001dc:	08009940 	.word	0x08009940

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__aeabi_uldivmod>:
 8000c6c:	b953      	cbnz	r3, 8000c84 <__aeabi_uldivmod+0x18>
 8000c6e:	b94a      	cbnz	r2, 8000c84 <__aeabi_uldivmod+0x18>
 8000c70:	2900      	cmp	r1, #0
 8000c72:	bf08      	it	eq
 8000c74:	2800      	cmpeq	r0, #0
 8000c76:	bf1c      	itt	ne
 8000c78:	f04f 31ff 	movne.w	r1, #4294967295
 8000c7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c80:	f000 b96a 	b.w	8000f58 <__aeabi_idiv0>
 8000c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8c:	f000 f806 	bl	8000c9c <__udivmoddi4>
 8000c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c98:	b004      	add	sp, #16
 8000c9a:	4770      	bx	lr

08000c9c <__udivmoddi4>:
 8000c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca0:	9d08      	ldr	r5, [sp, #32]
 8000ca2:	460c      	mov	r4, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14e      	bne.n	8000d46 <__udivmoddi4+0xaa>
 8000ca8:	4694      	mov	ip, r2
 8000caa:	458c      	cmp	ip, r1
 8000cac:	4686      	mov	lr, r0
 8000cae:	fab2 f282 	clz	r2, r2
 8000cb2:	d962      	bls.n	8000d7a <__udivmoddi4+0xde>
 8000cb4:	b14a      	cbz	r2, 8000cca <__udivmoddi4+0x2e>
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	4091      	lsls	r1, r2
 8000cbc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc4:	4319      	orrs	r1, r3
 8000cc6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f f68c 	uxth.w	r6, ip
 8000cd2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cd6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cda:	fb07 1114 	mls	r1, r7, r4, r1
 8000cde:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce2:	fb04 f106 	mul.w	r1, r4, r6
 8000ce6:	4299      	cmp	r1, r3
 8000ce8:	d90a      	bls.n	8000d00 <__udivmoddi4+0x64>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cf2:	f080 8112 	bcs.w	8000f1a <__udivmoddi4+0x27e>
 8000cf6:	4299      	cmp	r1, r3
 8000cf8:	f240 810f 	bls.w	8000f1a <__udivmoddi4+0x27e>
 8000cfc:	3c02      	subs	r4, #2
 8000cfe:	4463      	add	r3, ip
 8000d00:	1a59      	subs	r1, r3, r1
 8000d02:	fa1f f38e 	uxth.w	r3, lr
 8000d06:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0a:	fb07 1110 	mls	r1, r7, r0, r1
 8000d0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d12:	fb00 f606 	mul.w	r6, r0, r6
 8000d16:	429e      	cmp	r6, r3
 8000d18:	d90a      	bls.n	8000d30 <__udivmoddi4+0x94>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d22:	f080 80fc 	bcs.w	8000f1e <__udivmoddi4+0x282>
 8000d26:	429e      	cmp	r6, r3
 8000d28:	f240 80f9 	bls.w	8000f1e <__udivmoddi4+0x282>
 8000d2c:	4463      	add	r3, ip
 8000d2e:	3802      	subs	r0, #2
 8000d30:	1b9b      	subs	r3, r3, r6
 8000d32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d36:	2100      	movs	r1, #0
 8000d38:	b11d      	cbz	r5, 8000d42 <__udivmoddi4+0xa6>
 8000d3a:	40d3      	lsrs	r3, r2
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d905      	bls.n	8000d56 <__udivmoddi4+0xba>
 8000d4a:	b10d      	cbz	r5, 8000d50 <__udivmoddi4+0xb4>
 8000d4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000d50:	2100      	movs	r1, #0
 8000d52:	4608      	mov	r0, r1
 8000d54:	e7f5      	b.n	8000d42 <__udivmoddi4+0xa6>
 8000d56:	fab3 f183 	clz	r1, r3
 8000d5a:	2900      	cmp	r1, #0
 8000d5c:	d146      	bne.n	8000dec <__udivmoddi4+0x150>
 8000d5e:	42a3      	cmp	r3, r4
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0xcc>
 8000d62:	4290      	cmp	r0, r2
 8000d64:	f0c0 80f0 	bcc.w	8000f48 <__udivmoddi4+0x2ac>
 8000d68:	1a86      	subs	r6, r0, r2
 8000d6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	2d00      	cmp	r5, #0
 8000d72:	d0e6      	beq.n	8000d42 <__udivmoddi4+0xa6>
 8000d74:	e9c5 6300 	strd	r6, r3, [r5]
 8000d78:	e7e3      	b.n	8000d42 <__udivmoddi4+0xa6>
 8000d7a:	2a00      	cmp	r2, #0
 8000d7c:	f040 8090 	bne.w	8000ea0 <__udivmoddi4+0x204>
 8000d80:	eba1 040c 	sub.w	r4, r1, ip
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	fa1f f78c 	uxth.w	r7, ip
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d96:	fb08 4416 	mls	r4, r8, r6, r4
 8000d9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d9e:	fb07 f006 	mul.w	r0, r7, r6
 8000da2:	4298      	cmp	r0, r3
 8000da4:	d908      	bls.n	8000db8 <__udivmoddi4+0x11c>
 8000da6:	eb1c 0303 	adds.w	r3, ip, r3
 8000daa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dae:	d202      	bcs.n	8000db6 <__udivmoddi4+0x11a>
 8000db0:	4298      	cmp	r0, r3
 8000db2:	f200 80cd 	bhi.w	8000f50 <__udivmoddi4+0x2b4>
 8000db6:	4626      	mov	r6, r4
 8000db8:	1a1c      	subs	r4, r3, r0
 8000dba:	fa1f f38e 	uxth.w	r3, lr
 8000dbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dc2:	fb08 4410 	mls	r4, r8, r0, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb00 f707 	mul.w	r7, r0, r7
 8000dce:	429f      	cmp	r7, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x148>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x146>
 8000ddc:	429f      	cmp	r7, r3
 8000dde:	f200 80b0 	bhi.w	8000f42 <__udivmoddi4+0x2a6>
 8000de2:	4620      	mov	r0, r4
 8000de4:	1bdb      	subs	r3, r3, r7
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	e7a5      	b.n	8000d38 <__udivmoddi4+0x9c>
 8000dec:	f1c1 0620 	rsb	r6, r1, #32
 8000df0:	408b      	lsls	r3, r1
 8000df2:	fa22 f706 	lsr.w	r7, r2, r6
 8000df6:	431f      	orrs	r7, r3
 8000df8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dfc:	fa04 f301 	lsl.w	r3, r4, r1
 8000e00:	ea43 030c 	orr.w	r3, r3, ip
 8000e04:	40f4      	lsrs	r4, r6
 8000e06:	fa00 f801 	lsl.w	r8, r0, r1
 8000e0a:	0c38      	lsrs	r0, r7, #16
 8000e0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e10:	fbb4 fef0 	udiv	lr, r4, r0
 8000e14:	fa1f fc87 	uxth.w	ip, r7
 8000e18:	fb00 441e 	mls	r4, r0, lr, r4
 8000e1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e20:	fb0e f90c 	mul.w	r9, lr, ip
 8000e24:	45a1      	cmp	r9, r4
 8000e26:	fa02 f201 	lsl.w	r2, r2, r1
 8000e2a:	d90a      	bls.n	8000e42 <__udivmoddi4+0x1a6>
 8000e2c:	193c      	adds	r4, r7, r4
 8000e2e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e32:	f080 8084 	bcs.w	8000f3e <__udivmoddi4+0x2a2>
 8000e36:	45a1      	cmp	r9, r4
 8000e38:	f240 8081 	bls.w	8000f3e <__udivmoddi4+0x2a2>
 8000e3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e40:	443c      	add	r4, r7
 8000e42:	eba4 0409 	sub.w	r4, r4, r9
 8000e46:	fa1f f983 	uxth.w	r9, r3
 8000e4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000e52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e5a:	45a4      	cmp	ip, r4
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x1d2>
 8000e5e:	193c      	adds	r4, r7, r4
 8000e60:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e64:	d267      	bcs.n	8000f36 <__udivmoddi4+0x29a>
 8000e66:	45a4      	cmp	ip, r4
 8000e68:	d965      	bls.n	8000f36 <__udivmoddi4+0x29a>
 8000e6a:	3b02      	subs	r3, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e72:	fba0 9302 	umull	r9, r3, r0, r2
 8000e76:	eba4 040c 	sub.w	r4, r4, ip
 8000e7a:	429c      	cmp	r4, r3
 8000e7c:	46ce      	mov	lr, r9
 8000e7e:	469c      	mov	ip, r3
 8000e80:	d351      	bcc.n	8000f26 <__udivmoddi4+0x28a>
 8000e82:	d04e      	beq.n	8000f22 <__udivmoddi4+0x286>
 8000e84:	b155      	cbz	r5, 8000e9c <__udivmoddi4+0x200>
 8000e86:	ebb8 030e 	subs.w	r3, r8, lr
 8000e8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e92:	40cb      	lsrs	r3, r1
 8000e94:	431e      	orrs	r6, r3
 8000e96:	40cc      	lsrs	r4, r1
 8000e98:	e9c5 6400 	strd	r6, r4, [r5]
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	e750      	b.n	8000d42 <__udivmoddi4+0xa6>
 8000ea0:	f1c2 0320 	rsb	r3, r2, #32
 8000ea4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa24 f303 	lsr.w	r3, r4, r3
 8000eb0:	4094      	lsls	r4, r2
 8000eb2:	430c      	orrs	r4, r1
 8000eb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eb8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ebc:	fa1f f78c 	uxth.w	r7, ip
 8000ec0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ec8:	0c23      	lsrs	r3, r4, #16
 8000eca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ece:	fb00 f107 	mul.w	r1, r0, r7
 8000ed2:	4299      	cmp	r1, r3
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x24c>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ede:	d22c      	bcs.n	8000f3a <__udivmoddi4+0x29e>
 8000ee0:	4299      	cmp	r1, r3
 8000ee2:	d92a      	bls.n	8000f3a <__udivmoddi4+0x29e>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1a5b      	subs	r3, r3, r1
 8000eea:	b2a4      	uxth	r4, r4
 8000eec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ef0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ef4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ef8:	fb01 f307 	mul.w	r3, r1, r7
 8000efc:	42a3      	cmp	r3, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x276>
 8000f00:	eb1c 0404 	adds.w	r4, ip, r4
 8000f04:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f08:	d213      	bcs.n	8000f32 <__udivmoddi4+0x296>
 8000f0a:	42a3      	cmp	r3, r4
 8000f0c:	d911      	bls.n	8000f32 <__udivmoddi4+0x296>
 8000f0e:	3902      	subs	r1, #2
 8000f10:	4464      	add	r4, ip
 8000f12:	1ae4      	subs	r4, r4, r3
 8000f14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f18:	e739      	b.n	8000d8e <__udivmoddi4+0xf2>
 8000f1a:	4604      	mov	r4, r0
 8000f1c:	e6f0      	b.n	8000d00 <__udivmoddi4+0x64>
 8000f1e:	4608      	mov	r0, r1
 8000f20:	e706      	b.n	8000d30 <__udivmoddi4+0x94>
 8000f22:	45c8      	cmp	r8, r9
 8000f24:	d2ae      	bcs.n	8000e84 <__udivmoddi4+0x1e8>
 8000f26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f2e:	3801      	subs	r0, #1
 8000f30:	e7a8      	b.n	8000e84 <__udivmoddi4+0x1e8>
 8000f32:	4631      	mov	r1, r6
 8000f34:	e7ed      	b.n	8000f12 <__udivmoddi4+0x276>
 8000f36:	4603      	mov	r3, r0
 8000f38:	e799      	b.n	8000e6e <__udivmoddi4+0x1d2>
 8000f3a:	4630      	mov	r0, r6
 8000f3c:	e7d4      	b.n	8000ee8 <__udivmoddi4+0x24c>
 8000f3e:	46d6      	mov	lr, sl
 8000f40:	e77f      	b.n	8000e42 <__udivmoddi4+0x1a6>
 8000f42:	4463      	add	r3, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e74d      	b.n	8000de4 <__udivmoddi4+0x148>
 8000f48:	4606      	mov	r6, r0
 8000f4a:	4623      	mov	r3, r4
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	e70f      	b.n	8000d70 <__udivmoddi4+0xd4>
 8000f50:	3e02      	subs	r6, #2
 8000f52:	4463      	add	r3, ip
 8000f54:	e730      	b.n	8000db8 <__udivmoddi4+0x11c>
 8000f56:	bf00      	nop

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <bsp_transmit_data>:
/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */
// Transmit data
void bsp_transmit_data(uint8_t *data, uint8_t size)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	70fb      	strb	r3, [r7, #3]
  if (HAL_UART_Transmit_IT(DF_PLAYER_UART, data, size) == HAL_OK)
 8000f68:	78fb      	ldrb	r3, [r7, #3]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	4803      	ldr	r0, [pc, #12]	@ (8000f80 <bsp_transmit_data+0x24>)
 8000f72:	f005 fe65 	bl	8006c40 <HAL_UART_Transmit_IT>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
    return;
}
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000620 	.word	0x20000620

08000f84 <HAL_UART_TxCpltCallback>:
  return 1;
}

// Call back transmit
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  __NOP();
 8000f8c:	bf00      	nop
  if (huart->Instance == USART2)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a07      	ldr	r2, [pc, #28]	@ (8000fb0 <HAL_UART_TxCpltCallback+0x2c>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d107      	bne.n	8000fa8 <HAL_UART_TxCpltCallback+0x24>
  {
    transmit_flag = 1;
 8000f98:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <HAL_UART_TxCpltCallback+0x30>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000f9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fa2:	4805      	ldr	r0, [pc, #20]	@ (8000fb8 <HAL_UART_TxCpltCallback+0x34>)
 8000fa4:	f003 ff4e 	bl	8004e44 <HAL_GPIO_TogglePin>
  }
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40004400 	.word	0x40004400
 8000fb4:	2000012c 	.word	0x2000012c
 8000fb8:	40020c00 	.word	0x40020c00

08000fbc <HAL_UART_RxCpltCallback>:

// Call back receive data
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  __NOP();
 8000fc4:	bf00      	nop
  if (huart->Instance == USART2)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff4 <HAL_UART_RxCpltCallback+0x38>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d10a      	bne.n	8000fe6 <HAL_UART_RxCpltCallback+0x2a>
  {
    __HAL_DMA_DISABLE(DF_PLAYER_DMA_RX);
 8000fd0:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <HAL_UART_RxCpltCallback+0x3c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	4b08      	ldr	r3, [pc, #32]	@ (8000ff8 <HAL_UART_RxCpltCallback+0x3c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f022 0201 	bic.w	r2, r2, #1
 8000fde:	601a      	str	r2, [r3, #0]
    receive_flag = 1;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <HAL_UART_RxCpltCallback+0x40>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40004400 	.word	0x40004400
 8000ff8:	20000668 	.word	0x20000668
 8000ffc:	2000012d 	.word	0x2000012d

08001000 <bsp_gpio_read_pin>:
    HAL_GPIO_WritePin(gpio_port, gpio_pin, GPIO_PIN_SET);
  else
    HAL_GPIO_WritePin(gpio_port, gpio_pin, GPIO_PIN_RESET);
}
bool bsp_gpio_read_pin(GPIO_TypeDef *gpio_port, uint16_t gpio_pin)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	807b      	strh	r3, [r7, #2]
  return HAL_GPIO_ReadPin(gpio_port, gpio_pin) == GPIO_PIN_SET ? true : false;
 800100c:	887b      	ldrh	r3, [r7, #2]
 800100e:	4619      	mov	r1, r3
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f003 feff 	bl	8004e14 <HAL_GPIO_ReadPin>
 8001016:	4603      	mov	r3, r0
 8001018:	2b01      	cmp	r3, #1
 800101a:	bf0c      	ite	eq
 800101c:	2301      	moveq	r3, #1
 800101e:	2300      	movne	r3, #0
 8001020:	b2db      	uxtb	r3, r3
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <bsp_i2c1_is_device_ready>:
{
  return (HAL_I2C_GetState(hi2c) == HAL_I2C_STATE_READY) ? true : false;
}

bool bsp_i2c1_is_device_ready(I2C_HandleTypeDef *hi2c, uint16_t dev_addr, uint32_t trials, uint32_t timeout)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	60f8      	str	r0, [r7, #12]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	603b      	str	r3, [r7, #0]
 8001036:	460b      	mov	r3, r1
 8001038:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(hi2c, dev_addr, trials, BSP_I2C_TIMEOUT);
 800103a:	8979      	ldrh	r1, [r7, #10]
 800103c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	68f8      	ldr	r0, [r7, #12]
 8001044:	f004 f96e 	bl	8005324 <HAL_I2C_IsDeviceReady>
 8001048:	4603      	mov	r3, r0
 800104a:	75fb      	strb	r3, [r7, #23]
  return (status == HAL_OK) ? true : false;
 800104c:	7dfb      	ldrb	r3, [r7, #23]
 800104e:	2b00      	cmp	r3, #0
 8001050:	bf0c      	ite	eq
 8001052:	2301      	moveq	r3, #1
 8001054:	2300      	movne	r3, #0
 8001056:	b2db      	uxtb	r3, r3
}
 8001058:	4618      	mov	r0, r3
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <bsp_i2c_write_mem>:

bool bsp_i2c_write_mem(I2C_HandleTypeDef *hi2c, uint16_t dev_addr, uint16_t mem_addr, uint16_t mem_addr_size,
                       uint8_t *p_data, uint16_t size)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	@ 0x28
 8001064:	af04      	add	r7, sp, #16
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	4608      	mov	r0, r1
 800106a:	4611      	mov	r1, r2
 800106c:	461a      	mov	r2, r3
 800106e:	4603      	mov	r3, r0
 8001070:	817b      	strh	r3, [r7, #10]
 8001072:	460b      	mov	r3, r1
 8001074:	813b      	strh	r3, [r7, #8]
 8001076:	4613      	mov	r3, r2
 8001078:	80fb      	strh	r3, [r7, #6]
  if (HAL_I2C_GetState(hi2c) == HAL_I2C_STATE_BUSY)
 800107a:	68f8      	ldr	r0, [r7, #12]
 800107c:	f004 fa80 	bl	8005580 <HAL_I2C_GetState>
 8001080:	4603      	mov	r3, r0
 8001082:	2b24      	cmp	r3, #36	@ 0x24
 8001084:	d101      	bne.n	800108a <bsp_i2c_write_mem+0x2a>
    return false;
 8001086:	2300      	movs	r3, #0
 8001088:	e015      	b.n	80010b6 <bsp_i2c_write_mem+0x56>
  HAL_StatusTypeDef status =
  HAL_I2C_Mem_Write(hi2c, dev_addr, mem_addr, mem_addr_size, p_data, size, BSP_I2C_TIMEOUT);
 800108a:	88f8      	ldrh	r0, [r7, #6]
 800108c:	893a      	ldrh	r2, [r7, #8]
 800108e:	8979      	ldrh	r1, [r7, #10]
 8001090:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001094:	9302      	str	r3, [sp, #8]
 8001096:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001098:	9301      	str	r3, [sp, #4]
 800109a:	6a3b      	ldr	r3, [r7, #32]
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	4603      	mov	r3, r0
 80010a0:	68f8      	ldr	r0, [r7, #12]
 80010a2:	f004 f845 	bl	8005130 <HAL_I2C_Mem_Write>
 80010a6:	4603      	mov	r3, r0
 80010a8:	75fb      	strb	r3, [r7, #23]
  return (status == HAL_OK) ? true : false;
 80010aa:	7dfb      	ldrb	r3, [r7, #23]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	bf0c      	ite	eq
 80010b0:	2301      	moveq	r3, #1
 80010b2:	2300      	movne	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <bsp_adc_start>:
static uint16_t last_stable_value = 0;
/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */

void bsp_adc_start(void) { HAL_ADC_Start_IT(ROTATION_ADC); }
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4802      	ldr	r0, [pc, #8]	@ (80010d0 <bsp_adc_start+0x10>)
 80010c6:	f002 fc2f 	bl	8003928 <HAL_ADC_Start_IT>
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2000053c 	.word	0x2000053c

080010d4 <bsp_get_adc_value>:

void bsp_adc_stop(void) { HAL_ADC_Stop_IT(ROTATION_ADC); }

uint32_t bsp_get_adc_value(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
  uint32_t temp_adc_value = HAL_ADC_GetValue(ROTATION_ADC);
 80010da:	4804      	ldr	r0, [pc, #16]	@ (80010ec <bsp_get_adc_value+0x18>)
 80010dc:	f002 fe2f 	bl	8003d3e <HAL_ADC_GetValue>
 80010e0:	6078      	str	r0, [r7, #4]
  return temp_adc_value;
 80010e2:	687b      	ldr	r3, [r7, #4]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	2000053c 	.word	0x2000053c

080010f0 <bsp_check_adc_flag>:

uint8_t bsp_check_adc_flag(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
  uint8_t return_adc_flag = adc_flag;
 80010f6:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <bsp_check_adc_flag+0x20>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	71fb      	strb	r3, [r7, #7]

  adc_flag = 0;
 80010fc:	4b04      	ldr	r3, [pc, #16]	@ (8001110 <bsp_check_adc_flag+0x20>)
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]

  return return_adc_flag;
 8001102:	79fb      	ldrb	r3, [r7, #7]
}
 8001104:	4618      	mov	r0, r3
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	2000012e 	.word	0x2000012e

08001114 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  __NOP();
 800111c:	bf00      	nop

  // Stop the ADC conversion to prevent new data while processing
  HAL_ADC_Stop_IT(hadc);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f002 fcc0 	bl	8003aa4 <HAL_ADC_Stop_IT>

  if (hadc->Instance == ADC1)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a0d      	ldr	r2, [pc, #52]	@ (8001160 <HAL_ADC_ConvCpltCallback+0x4c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d113      	bne.n	8001156 <HAL_ADC_ConvCpltCallback+0x42>
  {
    uint32_t new_value = HAL_ADC_GetValue(hadc);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f002 fe05 	bl	8003d3e <HAL_ADC_GetValue>
 8001134:	60f8      	str	r0, [r7, #12]

    // Only update if the change is significant
    if (abs((int) new_value - (int) last_stable_value) > ADC_THRESHOLD)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4a0a      	ldr	r2, [pc, #40]	@ (8001164 <HAL_ADC_ConvCpltCallback+0x50>)
 800113a:	8812      	ldrh	r2, [r2, #0]
 800113c:	1a9b      	subs	r3, r3, r2
 800113e:	2b00      	cmp	r3, #0
 8001140:	bfb8      	it	lt
 8001142:	425b      	neglt	r3, r3
 8001144:	2b64      	cmp	r3, #100	@ 0x64
 8001146:	dd06      	ble.n	8001156 <HAL_ADC_ConvCpltCallback+0x42>
    {
      last_stable_value = new_value;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	b29a      	uxth	r2, r3
 800114c:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <HAL_ADC_ConvCpltCallback+0x50>)
 800114e:	801a      	strh	r2, [r3, #0]
      adc_flag          = 1;
 8001150:	4b05      	ldr	r3, [pc, #20]	@ (8001168 <HAL_ADC_ConvCpltCallback+0x54>)
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40012000 	.word	0x40012000
 8001164:	20000130 	.word	0x20000130
 8001168:	2000012e 	.word	0x2000012e

0800116c <bsp_timer_init>:
/* Private variables -------------------------------------------------- */

/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */
void bsp_timer_init() { HAL_TIM_Base_Start_IT(&htim2); }
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
 8001170:	4802      	ldr	r0, [pc, #8]	@ (800117c <bsp_timer_init+0x10>)
 8001172:	f005 f92b 	bl	80063cc <HAL_TIM_Base_Start_IT>
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200005d8 	.word	0x200005d8

08001180 <bsp_delay>:
uint32_t bsp_get_tick() {return HAL_GetTick();}
void bsp_delay(uint32_t delay) { HAL_Delay(delay); }
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f002 fb65 	bl	8003858 <HAL_Delay>
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == htim2.Instance)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b04      	ldr	r3, [pc, #16]	@ (80011b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d101      	bne.n	80011b0 <HAL_TIM_PeriodElapsedCallback+0x18>
  {
    get_key_input();
 80011ac:	f000 f85a 	bl	8001264 <get_key_input>
  }
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	200005d8 	.word	0x200005d8

080011bc <update_button_state>:
 * @brief  Update the state of a button
 *
 * @param[in]  button  Pointer to the button structure
 */
void update_button_state(drv_button_t *button)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  int current_state = bsp_gpio_read_pin(button->port, button->pin);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	4610      	mov	r0, r2
 80011d0:	f7ff ff16 	bl	8001000 <bsp_gpio_read_pin>
 80011d4:	4603      	mov	r3, r0
 80011d6:	60fb      	str	r3, [r7, #12]

  // Debouncing
  if (current_state != button->last_state)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d003      	beq.n	80011ea <update_button_state+0x2e>
  {
    button->debounce_counter = DEBOUNCE_TIME / TICK;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2202      	movs	r2, #2
 80011e6:	615a      	str	r2, [r3, #20]
 80011e8:	e008      	b.n	80011fc <update_button_state+0x40>
  }
  else if (button->debounce_counter > 0)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	dd04      	ble.n	80011fc <update_button_state+0x40>
  {
    button->debounce_counter--;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	1e5a      	subs	r2, r3, #1
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	615a      	str	r2, [r3, #20]
  }

  if (button->debounce_counter == 0)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d128      	bne.n	8001256 <update_button_state+0x9a>
  {
    // Stable state achieved
    if (current_state != button->last_stable_state)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	691b      	ldr	r3, [r3, #16]
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	429a      	cmp	r2, r3
 800120c:	d01a      	beq.n	8001244 <update_button_state+0x88>
    {
      button->last_stable_state = current_state;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	611a      	str	r2, [r3, #16]

      // last_stable_state == UNPRESSED_STATE and current_state == PRESSED_STATE
      if (current_state == PRESSED_STATE)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d103      	bne.n	8001222 <update_button_state+0x66>
      {
        button->hold_counter = 0;  // Reset hold counter when the button is pressed
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	61da      	str	r2, [r3, #28]
 8001220:	e010      	b.n	8001244 <update_button_state+0x88>
      }

      // last_stable_state == PRESSED_STATE and current_state == UNPRESSED_STATE
      else if (current_state == UNPRESSED_STATE)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d10d      	bne.n	8001244 <update_button_state+0x88>
      {
        // Set hold flag if hold threshold was met, otherwise set single click flag
        if (button->hold_counter >= (HOLD_THRESHOLD / TICK))
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	69db      	ldr	r3, [r3, #28]
 800122c:	2b31      	cmp	r3, #49	@ 0x31
 800122e:	dd03      	ble.n	8001238 <update_button_state+0x7c>
        {
          button->hold_flag = 1;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2201      	movs	r2, #1
 8001234:	625a      	str	r2, [r3, #36]	@ 0x24
 8001236:	e002      	b.n	800123e <update_button_state+0x82>
        }
        else
        {
          button->single_click_flag = 1;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2201      	movs	r2, #1
 800123c:	621a      	str	r2, [r3, #32]
        }
        button->hold_counter = 0;  // Reset hold counter after release
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	61da      	str	r2, [r3, #28]
      }
    }

    // Increment hold counter while button is pressed
    if (button->last_stable_state == PRESSED_STATE)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d104      	bne.n	8001256 <update_button_state+0x9a>
    {
      button->hold_counter++;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69db      	ldr	r3, [r3, #28]
 8001250:	1c5a      	adds	r2, r3, #1
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	61da      	str	r2, [r3, #28]
    }
  }

  button->last_state = current_state;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	60da      	str	r2, [r3, #12]
}
 800125c:	bf00      	nop
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <get_key_input>:

/**
 * @brief  Get the key input from all buttons
 */
void get_key_input()
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
  for (int i = 0; i < NUM_BUTTONS; i++)
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	e00c      	b.n	800128a <get_key_input+0x26>
  {
    update_button_state(&buttons[i]);
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	4613      	mov	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	4413      	add	r3, r2
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	4a08      	ldr	r2, [pc, #32]	@ (800129c <get_key_input+0x38>)
 800127c:	4413      	add	r3, r2
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ff9c 	bl	80011bc <update_button_state>
  for (int i = 0; i < NUM_BUTTONS; i++)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3301      	adds	r3, #1
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b03      	cmp	r3, #3
 800128e:	ddef      	ble.n	8001270 <get_key_input+0xc>
  }
}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000000 	.word	0x20000000

080012a0 <is_button_pressed>:
 *
 * @param[in]  index  Index of the button
 * @return     1 if the button is pressed, 0 otherwise
 */
int is_button_pressed(int index)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if (buttons[index].single_click_flag == 1)
 80012a8:	490e      	ldr	r1, [pc, #56]	@ (80012e4 <is_button_pressed+0x44>)
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	4613      	mov	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	440b      	add	r3, r1
 80012b6:	3320      	adds	r3, #32
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d10b      	bne.n	80012d6 <is_button_pressed+0x36>
  {
    buttons[index].single_click_flag = 0;
 80012be:	4909      	ldr	r1, [pc, #36]	@ (80012e4 <is_button_pressed+0x44>)
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	4613      	mov	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	440b      	add	r3, r1
 80012cc:	3320      	adds	r3, #32
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
    return 1;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e000      	b.n	80012d8 <is_button_pressed+0x38>
  }
  return 0;
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	20000000 	.word	0x20000000

080012e8 <is_button_held>:
 *
 * @param[in]  index  Index of the button
 * @return     1 if the button is held, 0 otherwise
 */
int is_button_held(int index)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if (buttons[index].hold_flag == 1)
 80012f0:	490e      	ldr	r1, [pc, #56]	@ (800132c <is_button_held+0x44>)
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	4613      	mov	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	440b      	add	r3, r1
 80012fe:	3324      	adds	r3, #36	@ 0x24
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d10b      	bne.n	800131e <is_button_held+0x36>
  {
    buttons[index].hold_flag = 0;
 8001306:	4909      	ldr	r1, [pc, #36]	@ (800132c <is_button_held+0x44>)
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	4613      	mov	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	440b      	add	r3, r1
 8001314:	3324      	adds	r3, #36	@ 0x24
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
    return 1;
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <is_button_held+0x38>
  }
  return 0;
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	20000000 	.word	0x20000000

08001330 <HAL_GPIO_EXTI_Callback>:
 * @brief  GPIO EXTI callback function
 *
 * @param[in]  GPIO_Pin  GPIO pin that triggered the interrupt
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == BUTTON_LEFT_Pin)
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	2b10      	cmp	r3, #16
 800133e:	d107      	bne.n	8001350 <HAL_GPIO_EXTI_Callback+0x20>
  {
    if (ssd1306_get_scroll_flag())
 8001340:	f001 fed4 	bl	80030ec <ssd1306_get_scroll_flag>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d002      	beq.n	8001350 <HAL_GPIO_EXTI_Callback+0x20>
    {
      ssd1306_set_scroll_flag(false);
 800134a:	2000      	movs	r0, #0
 800134c:	f001 feda 	bl	8003104 <ssd1306_set_scroll_flag>
    }
  }

  if (GPIO_Pin == BUTTON_SELECT_Pin)
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	2b20      	cmp	r3, #32
 8001354:	d107      	bne.n	8001366 <HAL_GPIO_EXTI_Callback+0x36>
  {
    if (ssd1306_get_scroll_flag())
 8001356:	f001 fec9 	bl	80030ec <ssd1306_get_scroll_flag>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d002      	beq.n	8001366 <HAL_GPIO_EXTI_Callback+0x36>
    {
      ssd1306_set_scroll_flag(false);
 8001360:	2000      	movs	r0, #0
 8001362:	f001 fecf 	bl	8003104 <ssd1306_set_scroll_flag>
    }
  }

  if (GPIO_Pin == BUTTON_RIGHT_Pin)
 8001366:	88fb      	ldrh	r3, [r7, #6]
 8001368:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800136c:	d107      	bne.n	800137e <HAL_GPIO_EXTI_Callback+0x4e>
  {
    if (ssd1306_get_scroll_flag())
 800136e:	f001 febd 	bl	80030ec <ssd1306_get_scroll_flag>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <HAL_GPIO_EXTI_Callback+0x4e>
    {
      ssd1306_set_scroll_flag(false);
 8001378:	2000      	movs	r0, #0
 800137a:	f001 fec3 	bl	8003104 <ssd1306_set_scroll_flag>

  if (GPIO_Pin == BUTTON_TEST_Pin)
  {
    // Add any specific action for BUTTON_TEST_Pin if needed
  }
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <dfplayer_track_play>:
static void     dfplayer_send_command(uint8_t id_command, uint16_t para_byte);
static void     dfplayer_init_tf_card(void);

/* Function definitions ----------------------------------------------- */
void dfplayer_track_play(uint16_t ordinal_song_number)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	4603      	mov	r3, r0
 800138e:	80fb      	strh	r3, [r7, #6]
  dfplayer_send_command(DFPLAYER_CMD_PLAY_TRACK, ordinal_song_number);
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	4619      	mov	r1, r3
 8001394:	2003      	movs	r0, #3
 8001396:	f000 f867 	bl	8001468 <dfplayer_send_command>
  bsp_delay(100);
 800139a:	2064      	movs	r0, #100	@ 0x64
 800139c:	f7ff fef0 	bl	8001180 <bsp_delay>
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <dfplayer_track_pause>:

void dfplayer_track_pause(void) { dfplayer_send_command(DFPLAYER_CMD_PLAY_PAUSE, NONE_PARAMETER); }
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	2100      	movs	r1, #0
 80013ae:	200e      	movs	r0, #14
 80013b0:	f000 f85a 	bl	8001468 <dfplayer_send_command>
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <dfplayer_track_play_continue>:

void dfplayer_track_play_continue(void) { dfplayer_send_command(DFPLAYER_CMD_PLAY_CONTINUE, NONE_PARAMETER); }
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	2100      	movs	r1, #0
 80013be:	200d      	movs	r0, #13
 80013c0:	f000 f852 	bl	8001468 <dfplayer_send_command>
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <dfplayer_normal_mode_play>:

void dfplayer_normal_mode_play(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  dfplayer_send_command(DFPLAYER_CMD_NORMAL_MODE, NORMAL_MODE_PARAMETER);
 80013cc:	2100      	movs	r1, #0
 80013ce:	2011      	movs	r0, #17
 80013d0:	f000 f84a 	bl	8001468 <dfplayer_send_command>
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <dfplayer_repeat_mode_play>:

void dfplayer_repeat_mode_play(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  dfplayer_send_command(DFPLAYER_CMD_REPEAT_MODE, REPEAT_MODE_PARAMETER);
 80013dc:	2100      	movs	r1, #0
 80013de:	2008      	movs	r0, #8
 80013e0:	f000 f842 	bl	8001468 <dfplayer_send_command>
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <dfplayer_random_mode_play>:

void dfplayer_random_mode_play(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  //	while (bsp_check_playing_status())
  //	{
  //		continue;
  //	}

  dfplayer_send_command(DFPLAYER_CMD_RANDOM_MODE, NONE_PARAMETER);
 80013ec:	2100      	movs	r1, #0
 80013ee:	2018      	movs	r0, #24
 80013f0:	f000 f83a 	bl	8001468 <dfplayer_send_command>
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <dfplayer_adjust_volume>:

void dfplayer_adjust_volume(uint8_t volume) { dfplayer_send_command(DFPLAYER_CMD_SET_VOL, volume); }
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	b29b      	uxth	r3, r3
 8001406:	4619      	mov	r1, r3
 8001408:	2006      	movs	r0, #6
 800140a:	f000 f82d 	bl	8001468 <dfplayer_send_command>
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <dfplayer_init>:

void dfplayer_init(void)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	af00      	add	r7, sp, #0
  // reset module
  //	dfplayer_send_command (DFPLAYER_CMD_RESET, NONE_PARAMETER);
  //	bsp_delay(500);

  // Could adding the pause command to make sure there are stop play song
  dfplayer_track_pause();
 800141a:	f7ff ffc5 	bl	80013a8 <dfplayer_track_pause>
  bsp_delay(500);
 800141e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001422:	f7ff fead 	bl	8001180 <bsp_delay>

  // initial the playback source: Micro SD card (TF card)
  dfplayer_init_tf_card();
 8001426:	f000 f853 	bl	80014d0 <dfplayer_init_tf_card>

  // Setting the initial volume: 1
  dfplayer_adjust_volume(1);
 800142a:	2001      	movs	r0, #1
 800142c:	f7ff ffe4 	bl	80013f8 <dfplayer_adjust_volume>
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}

08001434 <dfplayer_cal_checksum>:

  dfplayer_track_play(2);
}
/* Private definitions ----------------------------------------------- */
static uint16_t dfplayer_cal_checksum(uint8_t id_command, uint16_t para_byte)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	460a      	mov	r2, r1
 800143e:	71fb      	strb	r3, [r7, #7]
 8001440:	4613      	mov	r3, r2
 8001442:	80bb      	strh	r3, [r7, #4]
  uint16_t checksum = DFPLAYER_VERSION + DFPLAYER_LENGTH + id_command + DFPLAYER_EN_FEEDBACK + para_byte;
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	b29a      	uxth	r2, r3
 8001448:	88bb      	ldrh	r3, [r7, #4]
 800144a:	4413      	add	r3, r2
 800144c:	b29b      	uxth	r3, r3
 800144e:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8001452:	81fb      	strh	r3, [r7, #14]
  checksum          = 0 - checksum;
 8001454:	89fb      	ldrh	r3, [r7, #14]
 8001456:	425b      	negs	r3, r3
 8001458:	81fb      	strh	r3, [r7, #14]

  return checksum;
 800145a:	89fb      	ldrh	r3, [r7, #14]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <dfplayer_send_command>:

static void dfplayer_send_command(uint8_t id_command, uint16_t para_byte)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	460a      	mov	r2, r1
 8001472:	71fb      	strb	r3, [r7, #7]
 8001474:	4613      	mov	r3, r2
 8001476:	80bb      	strh	r3, [r7, #4]
  df_player.id_command = id_command;
 8001478:	4a14      	ldr	r2, [pc, #80]	@ (80014cc <dfplayer_send_command+0x64>)
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	70d3      	strb	r3, [r2, #3]

  df_player.para_byte_high = (para_byte >> 8) & 0x00FF;
 800147e:	88bb      	ldrh	r3, [r7, #4]
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	b29b      	uxth	r3, r3
 8001484:	b2da      	uxtb	r2, r3
 8001486:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <dfplayer_send_command+0x64>)
 8001488:	715a      	strb	r2, [r3, #5]

  df_player.para_byte_low = para_byte & 0x00FF;
 800148a:	88bb      	ldrh	r3, [r7, #4]
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4b0f      	ldr	r3, [pc, #60]	@ (80014cc <dfplayer_send_command+0x64>)
 8001490:	719a      	strb	r2, [r3, #6]

  uint16_t temp_checksum = dfplayer_cal_checksum(id_command, para_byte);
 8001492:	88ba      	ldrh	r2, [r7, #4]
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	4611      	mov	r1, r2
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ffcb 	bl	8001434 <dfplayer_cal_checksum>
 800149e:	4603      	mov	r3, r0
 80014a0:	81fb      	strh	r3, [r7, #14]

  df_player.check_sum_high = (temp_checksum >> 8) & 0x00FF;
 80014a2:	89fb      	ldrh	r3, [r7, #14]
 80014a4:	0a1b      	lsrs	r3, r3, #8
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <dfplayer_send_command+0x64>)
 80014ac:	71da      	strb	r2, [r3, #7]

  df_player.check_sum_low = temp_checksum & 0x00FF;
 80014ae:	89fb      	ldrh	r3, [r7, #14]
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <dfplayer_send_command+0x64>)
 80014b4:	721a      	strb	r2, [r3, #8]

  bsp_transmit_data(DFPLAYER_COMMAND_TRANSMIT, DFPLAYER_COMMAND_SIZE);
 80014b6:	210a      	movs	r1, #10
 80014b8:	4804      	ldr	r0, [pc, #16]	@ (80014cc <dfplayer_send_command+0x64>)
 80014ba:	f7ff fd4f 	bl	8000f5c <bsp_transmit_data>

  bsp_delay(100);
 80014be:	2064      	movs	r0, #100	@ 0x64
 80014c0:	f7ff fe5e 	bl	8001180 <bsp_delay>
}
 80014c4:	bf00      	nop
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200000a0 	.word	0x200000a0

080014d0 <dfplayer_init_tf_card>:

static void dfplayer_init_tf_card(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  dfplayer_send_command(DFPLAYER_CMD_PLAYBACK_SRC, TF_CARD_PARAMETER);
 80014d4:	2102      	movs	r1, #2
 80014d6:	2009      	movs	r0, #9
 80014d8:	f7ff ffc6 	bl	8001468 <dfplayer_send_command>
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}

080014e0 <rotation_sensor_init>:
/* Private variables -------------------------------------------------- */

/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */
void rotation_sensor_init() { bsp_adc_start(); }
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	f7ff fdec 	bl	80010c0 <bsp_adc_start>
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}

080014ec <rotation_sensor_detect_volume_change>:

uint8_t rotation_sensor_detect_volume_change() { return bsp_check_adc_flag(); }
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	f7ff fdfe 	bl	80010f0 <bsp_check_adc_flag>
 80014f4:	4603      	mov	r3, r0
 80014f6:	4618      	mov	r0, r3
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <rotation_sensor_get_volume>:

uint8_t rotation_sensor_get_volume()
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  driver_volume_value = (bsp_get_adc_value() * MAX_VOLUME) / ADC_MAX_VALUE;
 8001500:	f7ff fde8 	bl	80010d4 <bsp_get_adc_value>
 8001504:	4602      	mov	r2, r0
 8001506:	4613      	mov	r3, r2
 8001508:	015b      	lsls	r3, r3, #5
 800150a:	1a9a      	subs	r2, r3, r2
 800150c:	4b07      	ldr	r3, [pc, #28]	@ (800152c <rotation_sensor_get_volume+0x30>)
 800150e:	fba3 1302 	umull	r1, r3, r3, r2
 8001512:	1ad2      	subs	r2, r2, r3
 8001514:	0852      	lsrs	r2, r2, #1
 8001516:	4413      	add	r3, r2
 8001518:	0adb      	lsrs	r3, r3, #11
 800151a:	b2da      	uxtb	r2, r3
 800151c:	4b04      	ldr	r3, [pc, #16]	@ (8001530 <rotation_sensor_get_volume+0x34>)
 800151e:	701a      	strb	r2, [r3, #0]

  return driver_volume_value;
 8001520:	4b03      	ldr	r3, [pc, #12]	@ (8001530 <rotation_sensor_get_volume+0x34>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	b2db      	uxtb	r3, r3
}
 8001526:	4618      	mov	r0, r3
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	00100101 	.word	0x00100101
 8001530:	20000132 	.word	0x20000132

08001534 <drv_ssd1306_init>:

/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */
drv_ssd1306_error_t drv_ssd1306_init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  if (!(bsp_i2c1_is_device_ready(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 5, BSP_I2C_TIMEOUT)))
 8001538:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800153c:	2205      	movs	r2, #5
 800153e:	2178      	movs	r1, #120	@ 0x78
 8001540:	4837      	ldr	r0, [pc, #220]	@ (8001620 <drv_ssd1306_init+0xec>)
 8001542:	f7ff fd72 	bl	800102a <bsp_i2c1_is_device_ready>
 8001546:	4603      	mov	r3, r0
 8001548:	f083 0301 	eor.w	r3, r3, #1
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <drv_ssd1306_init+0x22>
    return DRV_SSD1306_BUSY;
 8001552:	2302      	movs	r3, #2
 8001554:	e062      	b.n	800161c <drv_ssd1306_init+0xe8>

  // Wait for the screen to boot
  bsp_delay(100);
 8001556:	2064      	movs	r0, #100	@ 0x64
 8001558:	f7ff fe12 	bl	8001180 <bsp_delay>

  // Init OLED
  drv_ssd1306_set_display(DRV_SSD1306_DISPLAY_OFF);  // display off
 800155c:	2000      	movs	r0, #0
 800155e:	f000 f8e9 	bl	8001734 <drv_ssd1306_set_display>
  drv_ssd1306_write_command(0x20);                   // Set Memory Addressing Mode
 8001562:	2020      	movs	r0, #32
 8001564:	f000 f860 	bl	8001628 <drv_ssd1306_write_command>
  drv_ssd1306_write_command(0x00);  // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001568:	2000      	movs	r0, #0
 800156a:	f000 f85d 	bl	8001628 <drv_ssd1306_write_command>
  drv_ssd1306_write_command(0xB0);  // Set Page Start Address for Page Addressing Mode,0-7
 800156e:	20b0      	movs	r0, #176	@ 0xb0
 8001570:	f000 f85a 	bl	8001628 <drv_ssd1306_write_command>
  drv_ssd1306_write_command(0xC8);  // Set COM Output Scan Direction
 8001574:	20c8      	movs	r0, #200	@ 0xc8
 8001576:	f000 f857 	bl	8001628 <drv_ssd1306_write_command>
  drv_ssd1306_write_command(0x00);  //---set low column address
 800157a:	2000      	movs	r0, #0
 800157c:	f000 f854 	bl	8001628 <drv_ssd1306_write_command>
  drv_ssd1306_write_command(0x10);  //---set high column address
 8001580:	2010      	movs	r0, #16
 8001582:	f000 f851 	bl	8001628 <drv_ssd1306_write_command>
  drv_ssd1306_write_command(0x40);  //--set start line address
 8001586:	2040      	movs	r0, #64	@ 0x40
 8001588:	f000 f84e 	bl	8001628 <drv_ssd1306_write_command>
  drv_ssd1306_set_contrast(0xFF);
 800158c:	20ff      	movs	r0, #255	@ 0xff
 800158e:	f000 f8ef 	bl	8001770 <drv_ssd1306_set_contrast>
  drv_ssd1306_write_command(0xA1);  //--set segment re-map 0 to 127
 8001592:	20a1      	movs	r0, #161	@ 0xa1
 8001594:	f000 f848 	bl	8001628 <drv_ssd1306_write_command>
  drv_ssd1306_write_command(0xA6);  //--set normal color
 8001598:	20a6      	movs	r0, #166	@ 0xa6
 800159a:	f000 f845 	bl	8001628 <drv_ssd1306_write_command>
  drv_ssd1306_write_command(0xA8);  //--set multiplex ratio(1 to 64) - CHECK
 800159e:	20a8      	movs	r0, #168	@ 0xa8
 80015a0:	f000 f842 	bl	8001628 <drv_ssd1306_write_command>
  drv_ssd1306_write_command(0x3F);  //
 80015a4:	203f      	movs	r0, #63	@ 0x3f
 80015a6:	f000 f83f 	bl	8001628 <drv_ssd1306_write_command>
  drv_ssd1306_write_command(0xA4);  // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80015aa:	20a4      	movs	r0, #164	@ 0xa4
 80015ac:	f000 f83c 	bl	8001628 <drv_ssd1306_write_command>

  drv_ssd1306_write_command(0xD3);  //-set display offset - CHECK
 80015b0:	20d3      	movs	r0, #211	@ 0xd3
 80015b2:	f000 f839 	bl	8001628 <drv_ssd1306_write_command>
  drv_ssd1306_write_command(0x00);  //-not offset
 80015b6:	2000      	movs	r0, #0
 80015b8:	f000 f836 	bl	8001628 <drv_ssd1306_write_command>

  drv_ssd1306_write_command(0xD5);  //--set display clock divide ratio/oscillator frequency
 80015bc:	20d5      	movs	r0, #213	@ 0xd5
 80015be:	f000 f833 	bl	8001628 <drv_ssd1306_write_command>
  drv_ssd1306_write_command(0xF0);  //--set divide ratio
 80015c2:	20f0      	movs	r0, #240	@ 0xf0
 80015c4:	f000 f830 	bl	8001628 <drv_ssd1306_write_command>

  drv_ssd1306_write_command(0xD9);  //--set pre-charge period
 80015c8:	20d9      	movs	r0, #217	@ 0xd9
 80015ca:	f000 f82d 	bl	8001628 <drv_ssd1306_write_command>
  drv_ssd1306_write_command(0x22);  //
 80015ce:	2022      	movs	r0, #34	@ 0x22
 80015d0:	f000 f82a 	bl	8001628 <drv_ssd1306_write_command>

  drv_ssd1306_write_command(0xDA);  //--set com pins hardware configuration - CHECK
 80015d4:	20da      	movs	r0, #218	@ 0xda
 80015d6:	f000 f827 	bl	8001628 <drv_ssd1306_write_command>
  drv_ssd1306_write_command(0x12);
 80015da:	2012      	movs	r0, #18
 80015dc:	f000 f824 	bl	8001628 <drv_ssd1306_write_command>
  drv_ssd1306_write_command(0xDB);                  //--set vcomh
 80015e0:	20db      	movs	r0, #219	@ 0xdb
 80015e2:	f000 f821 	bl	8001628 <drv_ssd1306_write_command>
  drv_ssd1306_write_command(0x20);                  // 0x20,0.77xVcc
 80015e6:	2020      	movs	r0, #32
 80015e8:	f000 f81e 	bl	8001628 <drv_ssd1306_write_command>
  drv_ssd1306_write_command(0x8D);                  //--set DC-DC enable
 80015ec:	208d      	movs	r0, #141	@ 0x8d
 80015ee:	f000 f81b 	bl	8001628 <drv_ssd1306_write_command>
  drv_ssd1306_write_command(0x14);                  //
 80015f2:	2014      	movs	r0, #20
 80015f4:	f000 f818 	bl	8001628 <drv_ssd1306_write_command>
  drv_ssd1306_set_display(DRV_SSD1306_DISPLAY_ON);  //--turn on SSD1306 panel
 80015f8:	2001      	movs	r0, #1
 80015fa:	f000 f89b 	bl	8001734 <drv_ssd1306_set_display>

  // Clear screen
  drv_ssd1306_fill(DRV_SSD1306_COLOR_BLACK);
 80015fe:	2000      	movs	r0, #0
 8001600:	f000 f84e 	bl	80016a0 <drv_ssd1306_fill>

  // Flush buffer to screen
  drv_ssd1306_update_screen();
 8001604:	f000 f866 	bl	80016d4 <drv_ssd1306_update_screen>

  // Set default values for screen object
  ssd1306.current_x = 0;
 8001608:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <drv_ssd1306_init+0xf0>)
 800160a:	2200      	movs	r2, #0
 800160c:	801a      	strh	r2, [r3, #0]
  ssd1306.current_y = 0;
 800160e:	4b05      	ldr	r3, [pc, #20]	@ (8001624 <drv_ssd1306_init+0xf0>)
 8001610:	2200      	movs	r2, #0
 8001612:	805a      	strh	r2, [r3, #2]

  ssd1306.initialized = 1;
 8001614:	4b03      	ldr	r3, [pc, #12]	@ (8001624 <drv_ssd1306_init+0xf0>)
 8001616:	2201      	movs	r2, #1
 8001618:	711a      	strb	r2, [r3, #4]

  return DRV_SSD1306_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000584 	.word	0x20000584
 8001624:	20000534 	.word	0x20000534

08001628 <drv_ssd1306_write_command>:

drv_ssd1306_error_t drv_ssd1306_write_command(uint8_t byte)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af02      	add	r7, sp, #8
 800162e:	4603      	mov	r3, r0
 8001630:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001632:	2300      	movs	r3, #0
 8001634:	73fb      	strb	r3, [r7, #15]
  ret      = bsp_i2c_write_mem(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1);
 8001636:	2301      	movs	r3, #1
 8001638:	9301      	str	r3, [sp, #4]
 800163a:	1dfb      	adds	r3, r7, #7
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	2301      	movs	r3, #1
 8001640:	2200      	movs	r2, #0
 8001642:	2178      	movs	r1, #120	@ 0x78
 8001644:	4806      	ldr	r0, [pc, #24]	@ (8001660 <drv_ssd1306_write_command+0x38>)
 8001646:	f7ff fd0b 	bl	8001060 <bsp_i2c_write_mem>
 800164a:	4603      	mov	r3, r0
 800164c:	73fb      	strb	r3, [r7, #15]
  return (ret == true) ? DRV_SSD1306_OK : DRV_SSD1306_ERR;
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	f083 0301 	eor.w	r3, r3, #1
 8001654:	b2db      	uxtb	r3, r3
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000584 	.word	0x20000584

08001664 <drv_ssd1306_write_data>:

drv_ssd1306_error_t drv_ssd1306_write_data(uint8_t *buffer, size_t buff_size)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af02      	add	r7, sp, #8
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  bool ret = false;
 800166e:	2300      	movs	r3, #0
 8001670:	73fb      	strb	r3, [r7, #15]
  ret      = bsp_i2c_write_mem(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	b29b      	uxth	r3, r3
 8001676:	9301      	str	r3, [sp, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	2301      	movs	r3, #1
 800167e:	2240      	movs	r2, #64	@ 0x40
 8001680:	2178      	movs	r1, #120	@ 0x78
 8001682:	4806      	ldr	r0, [pc, #24]	@ (800169c <drv_ssd1306_write_data+0x38>)
 8001684:	f7ff fcec 	bl	8001060 <bsp_i2c_write_mem>
 8001688:	4603      	mov	r3, r0
 800168a:	73fb      	strb	r3, [r7, #15]
  return (ret == true) ? DRV_SSD1306_OK : DRV_SSD1306_ERR;
 800168c:	7bfb      	ldrb	r3, [r7, #15]
 800168e:	f083 0301 	eor.w	r3, r3, #1
 8001692:	b2db      	uxtb	r3, r3
}
 8001694:	4618      	mov	r0, r3
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000584 	.word	0x20000584

080016a0 <drv_ssd1306_fill>:

drv_ssd1306_error_t drv_ssd1306_fill(drv_ssd1306_color_t color)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
  uint8_t fill_color = (color == DRV_SSD1306_COLOR_BLACK) ? 0x00 : 0xFF;
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d101      	bne.n	80016b4 <drv_ssd1306_fill+0x14>
 80016b0:	2300      	movs	r3, #0
 80016b2:	e000      	b.n	80016b6 <drv_ssd1306_fill+0x16>
 80016b4:	23ff      	movs	r3, #255	@ 0xff
 80016b6:	73fb      	strb	r3, [r7, #15]
  memset(ssd1306_buffer, fill_color, sizeof(ssd1306_buffer));
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
 80016ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016be:	4619      	mov	r1, r3
 80016c0:	4803      	ldr	r0, [pc, #12]	@ (80016d0 <drv_ssd1306_fill+0x30>)
 80016c2:	f006 f9e7 	bl	8007a94 <memset>
  return DRV_SSD1306_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000134 	.word	0x20000134

080016d4 <drv_ssd1306_update_screen>:

drv_ssd1306_error_t drv_ssd1306_update_screen(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
  uint8_t pages          = SSD1306_HEIGHT / 8;
 80016da:	2308      	movs	r3, #8
 80016dc:	71bb      	strb	r3, [r7, #6]
  uint8_t x_offset_lower = 0x00 + SSD1306_X_OFFSET_LOWER;
 80016de:	2300      	movs	r3, #0
 80016e0:	717b      	strb	r3, [r7, #5]
  uint8_t x_offset_upper = 0x10 + SSD1306_X_OFFSET_UPPER;
 80016e2:	2310      	movs	r3, #16
 80016e4:	713b      	strb	r3, [r7, #4]

  for (uint8_t i = 0; i < pages; i++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	71fb      	strb	r3, [r7, #7]
 80016ea:	e018      	b.n	800171e <drv_ssd1306_update_screen+0x4a>
  {
    drv_ssd1306_write_command(0xB0 + i);  // Set the current RAM page address.
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	3b50      	subs	r3, #80	@ 0x50
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff ff98 	bl	8001628 <drv_ssd1306_write_command>
    drv_ssd1306_write_command(x_offset_lower);
 80016f8:	797b      	ldrb	r3, [r7, #5]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff ff94 	bl	8001628 <drv_ssd1306_write_command>
    drv_ssd1306_write_command(x_offset_upper);
 8001700:	793b      	ldrb	r3, [r7, #4]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff ff90 	bl	8001628 <drv_ssd1306_write_command>
    drv_ssd1306_write_data(&ssd1306_buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	01db      	lsls	r3, r3, #7
 800170c:	4a08      	ldr	r2, [pc, #32]	@ (8001730 <drv_ssd1306_update_screen+0x5c>)
 800170e:	4413      	add	r3, r2
 8001710:	2180      	movs	r1, #128	@ 0x80
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff ffa6 	bl	8001664 <drv_ssd1306_write_data>
  for (uint8_t i = 0; i < pages; i++)
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	3301      	adds	r3, #1
 800171c:	71fb      	strb	r3, [r7, #7]
 800171e:	79fa      	ldrb	r2, [r7, #7]
 8001720:	79bb      	ldrb	r3, [r7, #6]
 8001722:	429a      	cmp	r2, r3
 8001724:	d3e2      	bcc.n	80016ec <drv_ssd1306_update_screen+0x18>
  }
  return DRV_SSD1306_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000134 	.word	0x20000134

08001734 <drv_ssd1306_set_display>:

drv_ssd1306_error_t drv_ssd1306_set_display(drv_ssd1306_display_t status)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
  uint8_t value;
  if (status)
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <drv_ssd1306_set_display+0x1c>
  {
    value              = 0xAF;  // Display on
 8001744:	23af      	movs	r3, #175	@ 0xaf
 8001746:	73fb      	strb	r3, [r7, #15]
    ssd1306.display_on = 1;
 8001748:	4b08      	ldr	r3, [pc, #32]	@ (800176c <drv_ssd1306_set_display+0x38>)
 800174a:	2201      	movs	r2, #1
 800174c:	715a      	strb	r2, [r3, #5]
 800174e:	e004      	b.n	800175a <drv_ssd1306_set_display+0x26>
  }
  else
  {
    value              = 0xAE;  // Display off
 8001750:	23ae      	movs	r3, #174	@ 0xae
 8001752:	73fb      	strb	r3, [r7, #15]
    ssd1306.display_on = 0;
 8001754:	4b05      	ldr	r3, [pc, #20]	@ (800176c <drv_ssd1306_set_display+0x38>)
 8001756:	2200      	movs	r2, #0
 8001758:	715a      	strb	r2, [r3, #5]
  }
  drv_ssd1306_write_command(value);
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff63 	bl	8001628 <drv_ssd1306_write_command>

  return DRV_SSD1306_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000534 	.word	0x20000534

08001770 <drv_ssd1306_set_contrast>:

drv_ssd1306_error_t drv_ssd1306_set_contrast(uint8_t value)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
  const uint8_t SET_CONTRAST_CONTROL_REGISTER = 0x81;
 800177a:	2381      	movs	r3, #129	@ 0x81
 800177c:	73fb      	strb	r3, [r7, #15]
  drv_ssd1306_write_command(SET_CONTRAST_CONTROL_REGISTER);
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff51 	bl	8001628 <drv_ssd1306_write_command>
  drv_ssd1306_write_command(value);
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff4d 	bl	8001628 <drv_ssd1306_write_command>

  return DRV_SSD1306_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <drv_ssd1306_set_cursor>:

drv_ssd1306_error_t drv_ssd1306_set_cursor(uint8_t x, uint8_t y)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	71fb      	strb	r3, [r7, #7]
 80017a4:	4613      	mov	r3, r2
 80017a6:	71bb      	strb	r3, [r7, #6]
  ssd1306.current_x = x;
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <drv_ssd1306_set_cursor+0x30>)
 80017ae:	801a      	strh	r2, [r3, #0]
  ssd1306.current_y = y;
 80017b0:	79bb      	ldrb	r3, [r7, #6]
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	4b04      	ldr	r3, [pc, #16]	@ (80017c8 <drv_ssd1306_set_cursor+0x30>)
 80017b6:	805a      	strh	r2, [r3, #2]

  return DRV_SSD1306_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20000534 	.word	0x20000534

080017cc <drv_ssd1306_draw_pixel>:

drv_ssd1306_error_t drv_ssd1306_draw_pixel(uint8_t x, uint8_t y, drv_ssd1306_color_t color)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
 80017d6:	460b      	mov	r3, r1
 80017d8:	71bb      	strb	r3, [r7, #6]
 80017da:	4613      	mov	r3, r2
 80017dc:	717b      	strb	r3, [r7, #5]
  if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	db02      	blt.n	80017ec <drv_ssd1306_draw_pixel+0x20>
 80017e6:	79bb      	ldrb	r3, [r7, #6]
 80017e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80017ea:	d901      	bls.n	80017f0 <drv_ssd1306_draw_pixel+0x24>
  {
    // Don't write outside the buffer
    return DRV_SSD1306_ERR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e03a      	b.n	8001866 <drv_ssd1306_draw_pixel+0x9a>
  }

  // Draw in the right color
  if (color == DRV_SSD1306_COLOR_WHITE)
 80017f0:	797b      	ldrb	r3, [r7, #5]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d11a      	bne.n	800182c <drv_ssd1306_draw_pixel+0x60>
  {
    ssd1306_buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80017f6:	79fa      	ldrb	r2, [r7, #7]
 80017f8:	79bb      	ldrb	r3, [r7, #6]
 80017fa:	08db      	lsrs	r3, r3, #3
 80017fc:	b2d8      	uxtb	r0, r3
 80017fe:	4603      	mov	r3, r0
 8001800:	01db      	lsls	r3, r3, #7
 8001802:	4413      	add	r3, r2
 8001804:	4a1b      	ldr	r2, [pc, #108]	@ (8001874 <drv_ssd1306_draw_pixel+0xa8>)
 8001806:	5cd3      	ldrb	r3, [r2, r3]
 8001808:	b25a      	sxtb	r2, r3
 800180a:	79bb      	ldrb	r3, [r7, #6]
 800180c:	f003 0307 	and.w	r3, r3, #7
 8001810:	2101      	movs	r1, #1
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	b25b      	sxtb	r3, r3
 8001818:	4313      	orrs	r3, r2
 800181a:	b259      	sxtb	r1, r3
 800181c:	79fa      	ldrb	r2, [r7, #7]
 800181e:	4603      	mov	r3, r0
 8001820:	01db      	lsls	r3, r3, #7
 8001822:	4413      	add	r3, r2
 8001824:	b2c9      	uxtb	r1, r1
 8001826:	4a13      	ldr	r2, [pc, #76]	@ (8001874 <drv_ssd1306_draw_pixel+0xa8>)
 8001828:	54d1      	strb	r1, [r2, r3]
 800182a:	e01b      	b.n	8001864 <drv_ssd1306_draw_pixel+0x98>
  }
  else
  {
    ssd1306_buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800182c:	79fa      	ldrb	r2, [r7, #7]
 800182e:	79bb      	ldrb	r3, [r7, #6]
 8001830:	08db      	lsrs	r3, r3, #3
 8001832:	b2d8      	uxtb	r0, r3
 8001834:	4603      	mov	r3, r0
 8001836:	01db      	lsls	r3, r3, #7
 8001838:	4413      	add	r3, r2
 800183a:	4a0e      	ldr	r2, [pc, #56]	@ (8001874 <drv_ssd1306_draw_pixel+0xa8>)
 800183c:	5cd3      	ldrb	r3, [r2, r3]
 800183e:	b25a      	sxtb	r2, r3
 8001840:	79bb      	ldrb	r3, [r7, #6]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	2101      	movs	r1, #1
 8001848:	fa01 f303 	lsl.w	r3, r1, r3
 800184c:	b25b      	sxtb	r3, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	b25b      	sxtb	r3, r3
 8001852:	4013      	ands	r3, r2
 8001854:	b259      	sxtb	r1, r3
 8001856:	79fa      	ldrb	r2, [r7, #7]
 8001858:	4603      	mov	r3, r0
 800185a:	01db      	lsls	r3, r3, #7
 800185c:	4413      	add	r3, r2
 800185e:	b2c9      	uxtb	r1, r1
 8001860:	4a04      	ldr	r2, [pc, #16]	@ (8001874 <drv_ssd1306_draw_pixel+0xa8>)
 8001862:	54d1      	strb	r1, [r2, r3]
  }
  return DRV_SSD1306_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000134 	.word	0x20000134

08001878 <drv_ssd1306_write_char>:

char drv_ssd1306_write_char(char ch, drv_ssd1306_font_t font, drv_ssd1306_color_t color,
                            uint8_t char_overflow_flag)
{
 8001878:	b590      	push	{r4, r7, lr}
 800187a:	b089      	sub	sp, #36	@ 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	4604      	mov	r4, r0
 8001880:	4638      	mov	r0, r7
 8001882:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001886:	4623      	mov	r3, r4
 8001888:	73fb      	strb	r3, [r7, #15]
  uint32_t i, b, j;

  // Check if character is valid
  if (ch < 32 || ch > 126)
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	2b1f      	cmp	r3, #31
 800188e:	d902      	bls.n	8001896 <drv_ssd1306_write_char+0x1e>
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	2b7e      	cmp	r3, #126	@ 0x7e
 8001894:	d901      	bls.n	800189a <drv_ssd1306_write_char+0x22>
    return DRV_SSD1306_ERR;
 8001896:	2301      	movs	r3, #1
 8001898:	e0a9      	b.n	80019ee <drv_ssd1306_write_char+0x176>

  // Limit the amount of characters on the screen
  switch (char_overflow_flag)
 800189a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d016      	beq.n	80018d0 <drv_ssd1306_write_char+0x58>
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	dc24      	bgt.n	80018f0 <drv_ssd1306_write_char+0x78>
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d024      	beq.n	80018f4 <drv_ssd1306_write_char+0x7c>
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d000      	beq.n	80018b0 <drv_ssd1306_write_char+0x38>
        return 0;
      }
      break;

    default:
      break;
 80018ae:	e01f      	b.n	80018f0 <drv_ssd1306_write_char+0x78>
      if (128 < (ssd1306.current_x + font.width) || SSD1306_HEIGHT < (ssd1306.current_y + font.height))
 80018b0:	4b51      	ldr	r3, [pc, #324]	@ (80019f8 <drv_ssd1306_write_char+0x180>)
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	461a      	mov	r2, r3
 80018b6:	783b      	ldrb	r3, [r7, #0]
 80018b8:	4413      	add	r3, r2
 80018ba:	2b80      	cmp	r3, #128	@ 0x80
 80018bc:	dc06      	bgt.n	80018cc <drv_ssd1306_write_char+0x54>
 80018be:	4b4e      	ldr	r3, [pc, #312]	@ (80019f8 <drv_ssd1306_write_char+0x180>)
 80018c0:	885b      	ldrh	r3, [r3, #2]
 80018c2:	461a      	mov	r2, r3
 80018c4:	787b      	ldrb	r3, [r7, #1]
 80018c6:	4413      	add	r3, r2
 80018c8:	2b40      	cmp	r3, #64	@ 0x40
 80018ca:	dd15      	ble.n	80018f8 <drv_ssd1306_write_char+0x80>
        return 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	e08e      	b.n	80019ee <drv_ssd1306_write_char+0x176>
      if (90 < (ssd1306.current_x + font.width) || SSD1306_HEIGHT < (ssd1306.current_y + font.height))
 80018d0:	4b49      	ldr	r3, [pc, #292]	@ (80019f8 <drv_ssd1306_write_char+0x180>)
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	461a      	mov	r2, r3
 80018d6:	783b      	ldrb	r3, [r7, #0]
 80018d8:	4413      	add	r3, r2
 80018da:	2b5a      	cmp	r3, #90	@ 0x5a
 80018dc:	dc06      	bgt.n	80018ec <drv_ssd1306_write_char+0x74>
 80018de:	4b46      	ldr	r3, [pc, #280]	@ (80019f8 <drv_ssd1306_write_char+0x180>)
 80018e0:	885b      	ldrh	r3, [r3, #2]
 80018e2:	461a      	mov	r2, r3
 80018e4:	787b      	ldrb	r3, [r7, #1]
 80018e6:	4413      	add	r3, r2
 80018e8:	2b40      	cmp	r3, #64	@ 0x40
 80018ea:	dd07      	ble.n	80018fc <drv_ssd1306_write_char+0x84>
        return 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	e07e      	b.n	80019ee <drv_ssd1306_write_char+0x176>
      break;
 80018f0:	bf00      	nop
 80018f2:	e004      	b.n	80018fe <drv_ssd1306_write_char+0x86>
      break;
 80018f4:	bf00      	nop
 80018f6:	e002      	b.n	80018fe <drv_ssd1306_write_char+0x86>
      break;
 80018f8:	bf00      	nop
 80018fa:	e000      	b.n	80018fe <drv_ssd1306_write_char+0x86>
      break;
 80018fc:	bf00      	nop
  }

  // Check remaining space on current line
  if (SSD1306_WIDTH < (ssd1306.current_x + font.width) || SSD1306_HEIGHT < (ssd1306.current_y + font.height))
 80018fe:	4b3e      	ldr	r3, [pc, #248]	@ (80019f8 <drv_ssd1306_write_char+0x180>)
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	783b      	ldrb	r3, [r7, #0]
 8001906:	4413      	add	r3, r2
 8001908:	2b80      	cmp	r3, #128	@ 0x80
 800190a:	dc06      	bgt.n	800191a <drv_ssd1306_write_char+0xa2>
 800190c:	4b3a      	ldr	r3, [pc, #232]	@ (80019f8 <drv_ssd1306_write_char+0x180>)
 800190e:	885b      	ldrh	r3, [r3, #2]
 8001910:	461a      	mov	r2, r3
 8001912:	787b      	ldrb	r3, [r7, #1]
 8001914:	4413      	add	r3, r2
 8001916:	2b40      	cmp	r3, #64	@ 0x40
 8001918:	dd01      	ble.n	800191e <drv_ssd1306_write_char+0xa6>
  {
    // Not enough space on current line
    return DRV_SSD1306_ERR;
 800191a:	2301      	movs	r3, #1
 800191c:	e067      	b.n	80019ee <drv_ssd1306_write_char+0x176>
  }

  // Use the font to write
  for (i = 0; i < font.height; i++)
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
 8001922:	e04e      	b.n	80019c2 <drv_ssd1306_write_char+0x14a>
  {
    b = font.data[(ch - 32) * font.height + i];
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	7bfb      	ldrb	r3, [r7, #15]
 8001928:	3b20      	subs	r3, #32
 800192a:	7879      	ldrb	r1, [r7, #1]
 800192c:	fb01 f303 	mul.w	r3, r1, r3
 8001930:	4619      	mov	r1, r3
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	440b      	add	r3, r1
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	4413      	add	r3, r2
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	617b      	str	r3, [r7, #20]
    for (j = 0; j < font.width; j++)
 800193e:	2300      	movs	r3, #0
 8001940:	61bb      	str	r3, [r7, #24]
 8001942:	e036      	b.n	80019b2 <drv_ssd1306_write_char+0x13a>
    {
      if ((b << j) & 0x8000)
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d013      	beq.n	800197c <drv_ssd1306_write_char+0x104>
      {
        drv_ssd1306_draw_pixel(ssd1306.current_x + j, (ssd1306.current_y + i), (drv_ssd1306_color_t) color);
 8001954:	4b28      	ldr	r3, [pc, #160]	@ (80019f8 <drv_ssd1306_write_char+0x180>)
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	b2da      	uxtb	r2, r3
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	b2db      	uxtb	r3, r3
 800195e:	4413      	add	r3, r2
 8001960:	b2d8      	uxtb	r0, r3
 8001962:	4b25      	ldr	r3, [pc, #148]	@ (80019f8 <drv_ssd1306_write_char+0x180>)
 8001964:	885b      	ldrh	r3, [r3, #2]
 8001966:	b2da      	uxtb	r2, r3
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	b2db      	uxtb	r3, r3
 800196c:	4413      	add	r3, r2
 800196e:	b2db      	uxtb	r3, r3
 8001970:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001974:	4619      	mov	r1, r3
 8001976:	f7ff ff29 	bl	80017cc <drv_ssd1306_draw_pixel>
 800197a:	e017      	b.n	80019ac <drv_ssd1306_write_char+0x134>
      }
      else
      {
        drv_ssd1306_draw_pixel(ssd1306.current_x + j, (ssd1306.current_y + i), (drv_ssd1306_color_t) !color);
 800197c:	4b1e      	ldr	r3, [pc, #120]	@ (80019f8 <drv_ssd1306_write_char+0x180>)
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	b2da      	uxtb	r2, r3
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	4413      	add	r3, r2
 8001988:	b2d8      	uxtb	r0, r3
 800198a:	4b1b      	ldr	r3, [pc, #108]	@ (80019f8 <drv_ssd1306_write_char+0x180>)
 800198c:	885b      	ldrh	r3, [r3, #2]
 800198e:	b2da      	uxtb	r2, r3
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	b2db      	uxtb	r3, r3
 8001994:	4413      	add	r3, r2
 8001996:	b2d9      	uxtb	r1, r3
 8001998:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800199c:	2b00      	cmp	r3, #0
 800199e:	bf0c      	ite	eq
 80019a0:	2301      	moveq	r3, #1
 80019a2:	2300      	movne	r3, #0
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	461a      	mov	r2, r3
 80019a8:	f7ff ff10 	bl	80017cc <drv_ssd1306_draw_pixel>
    for (j = 0; j < font.width; j++)
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	3301      	adds	r3, #1
 80019b0:	61bb      	str	r3, [r7, #24]
 80019b2:	783b      	ldrb	r3, [r7, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d3c3      	bcc.n	8001944 <drv_ssd1306_write_char+0xcc>
  for (i = 0; i < font.height; i++)
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	3301      	adds	r3, #1
 80019c0:	61fb      	str	r3, [r7, #28]
 80019c2:	787b      	ldrb	r3, [r7, #1]
 80019c4:	461a      	mov	r2, r3
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d3ab      	bcc.n	8001924 <drv_ssd1306_write_char+0xac>
      }
    }
  }

  // The current space is now taken
  ssd1306.current_x += font.char_width ? font.char_width[ch - 32] : font.width;
 80019cc:	4b0a      	ldr	r3, [pc, #40]	@ (80019f8 <drv_ssd1306_write_char+0x180>)
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	2a00      	cmp	r2, #0
 80019d4:	d005      	beq.n	80019e2 <drv_ssd1306_write_char+0x16a>
 80019d6:	68b9      	ldr	r1, [r7, #8]
 80019d8:	7bfa      	ldrb	r2, [r7, #15]
 80019da:	3a20      	subs	r2, #32
 80019dc:	440a      	add	r2, r1
 80019de:	7812      	ldrb	r2, [r2, #0]
 80019e0:	e000      	b.n	80019e4 <drv_ssd1306_write_char+0x16c>
 80019e2:	783a      	ldrb	r2, [r7, #0]
 80019e4:	4413      	add	r3, r2
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	4b03      	ldr	r3, [pc, #12]	@ (80019f8 <drv_ssd1306_write_char+0x180>)
 80019ea:	801a      	strh	r2, [r3, #0]

  // Return written char for validation
  return ch;
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3724      	adds	r7, #36	@ 0x24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd90      	pop	{r4, r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000534 	.word	0x20000534

080019fc <drv_ssd1306_write_string>:

char drv_ssd1306_write_string(const char *str, drv_ssd1306_font_t font, drv_ssd1306_color_t color,
                              uint8_t char_overflow_flag)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af02      	add	r7, sp, #8
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	4638      	mov	r0, r7
 8001a06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  while (*str)
 8001a0a:	e014      	b.n	8001a36 <drv_ssd1306_write_string+0x3a>
  {
    if (drv_ssd1306_write_char(*str, font, color, char_overflow_flag) != *str)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	7818      	ldrb	r0, [r3, #0]
 8001a10:	7f3b      	ldrb	r3, [r7, #28]
 8001a12:	9301      	str	r3, [sp, #4]
 8001a14:	7e3b      	ldrb	r3, [r7, #24]
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	463b      	mov	r3, r7
 8001a1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a1c:	f7ff ff2c 	bl	8001878 <drv_ssd1306_write_char>
 8001a20:	4603      	mov	r3, r0
 8001a22:	461a      	mov	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d001      	beq.n	8001a30 <drv_ssd1306_write_string+0x34>
    {
      // Char could not be written
      return DRV_SSD1306_ERR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e008      	b.n	8001a42 <drv_ssd1306_write_string+0x46>
    }
    str++;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	3301      	adds	r3, #1
 8001a34:	60fb      	str	r3, [r7, #12]
  while (*str)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1e6      	bne.n	8001a0c <drv_ssd1306_write_string+0x10>
  }

  // Success
  return *str;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	781b      	ldrb	r3, [r3, #0]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <drv_ssd1306_line>:

drv_ssd1306_error_t drv_ssd1306_line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2,
                                     drv_ssd1306_color_t color)
{
 8001a4a:	b590      	push	{r4, r7, lr}
 8001a4c:	b089      	sub	sp, #36	@ 0x24
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4604      	mov	r4, r0
 8001a52:	4608      	mov	r0, r1
 8001a54:	4611      	mov	r1, r2
 8001a56:	461a      	mov	r2, r3
 8001a58:	4623      	mov	r3, r4
 8001a5a:	71fb      	strb	r3, [r7, #7]
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	71bb      	strb	r3, [r7, #6]
 8001a60:	460b      	mov	r3, r1
 8001a62:	717b      	strb	r3, [r7, #5]
 8001a64:	4613      	mov	r3, r2
 8001a66:	713b      	strb	r3, [r7, #4]
  int32_t delta_x = abs(x2 - x1);
 8001a68:	797a      	ldrb	r2, [r7, #5]
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	bfb8      	it	lt
 8001a72:	425b      	neglt	r3, r3
 8001a74:	61bb      	str	r3, [r7, #24]
  int32_t delta_y = abs(y2 - y1);
 8001a76:	793a      	ldrb	r2, [r7, #4]
 8001a78:	79bb      	ldrb	r3, [r7, #6]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	bfb8      	it	lt
 8001a80:	425b      	neglt	r3, r3
 8001a82:	617b      	str	r3, [r7, #20]
  int32_t sign_x  = (x1 < x2) ? 1 : -1;
 8001a84:	79fa      	ldrb	r2, [r7, #7]
 8001a86:	797b      	ldrb	r3, [r7, #5]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d201      	bcs.n	8001a90 <drv_ssd1306_line+0x46>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e001      	b.n	8001a94 <drv_ssd1306_line+0x4a>
 8001a90:	f04f 33ff 	mov.w	r3, #4294967295
 8001a94:	613b      	str	r3, [r7, #16]
  int32_t sign_y  = (y1 < y2) ? 1 : -1;
 8001a96:	79ba      	ldrb	r2, [r7, #6]
 8001a98:	793b      	ldrb	r3, [r7, #4]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d201      	bcs.n	8001aa2 <drv_ssd1306_line+0x58>
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e001      	b.n	8001aa6 <drv_ssd1306_line+0x5c>
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa6:	60fb      	str	r3, [r7, #12]
  int32_t error   = delta_x - delta_y;
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	61fb      	str	r3, [r7, #28]
  int32_t error2;

  drv_ssd1306_draw_pixel(x2, y2, color);
 8001ab0:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001ab4:	7939      	ldrb	r1, [r7, #4]
 8001ab6:	797b      	ldrb	r3, [r7, #5]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fe87 	bl	80017cc <drv_ssd1306_draw_pixel>

  while ((x1 != x2) || (y1 != y2))
 8001abe:	e024      	b.n	8001b0a <drv_ssd1306_line+0xc0>
  {
    drv_ssd1306_draw_pixel(x1, y1, color);
 8001ac0:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001ac4:	79b9      	ldrb	r1, [r7, #6]
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fe7f 	bl	80017cc <drv_ssd1306_draw_pixel>
    error2 = error * 2;
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	60bb      	str	r3, [r7, #8]
    if (error2 > -delta_y)
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	425b      	negs	r3, r3
 8001ad8:	68ba      	ldr	r2, [r7, #8]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	dd08      	ble.n	8001af0 <drv_ssd1306_line+0xa6>
    {
      error -= delta_y;
 8001ade:	69fa      	ldr	r2, [r7, #28]
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	61fb      	str	r3, [r7, #28]
      x1 += sign_x;
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	4413      	add	r3, r2
 8001aee:	71fb      	strb	r3, [r7, #7]
    }

    if (error2 < delta_x)
 8001af0:	68ba      	ldr	r2, [r7, #8]
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	da08      	bge.n	8001b0a <drv_ssd1306_line+0xc0>
    {
      error += delta_x;
 8001af8:	69fa      	ldr	r2, [r7, #28]
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	4413      	add	r3, r2
 8001afe:	61fb      	str	r3, [r7, #28]
      y1 += sign_y;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	79bb      	ldrb	r3, [r7, #6]
 8001b06:	4413      	add	r3, r2
 8001b08:	71bb      	strb	r3, [r7, #6]
  while ((x1 != x2) || (y1 != y2))
 8001b0a:	79fa      	ldrb	r2, [r7, #7]
 8001b0c:	797b      	ldrb	r3, [r7, #5]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d1d6      	bne.n	8001ac0 <drv_ssd1306_line+0x76>
 8001b12:	79ba      	ldrb	r2, [r7, #6]
 8001b14:	793b      	ldrb	r3, [r7, #4]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d1d2      	bne.n	8001ac0 <drv_ssd1306_line+0x76>
    }
  }

  return DRV_SSD1306_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3724      	adds	r7, #36	@ 0x24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd90      	pop	{r4, r7, pc}
 8001b24:	0000      	movs	r0, r0
	...

08001b28 <drv_ssd1306_draw_arrow>:

drv_ssd1306_error_t drv_ssd1306_draw_arrow(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2,
                                           uint8_t arrow_head_size, drv_ssd1306_color_t color)
{
 8001b28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b2c:	b086      	sub	sp, #24
 8001b2e:	af02      	add	r7, sp, #8
 8001b30:	4604      	mov	r4, r0
 8001b32:	4608      	mov	r0, r1
 8001b34:	4611      	mov	r1, r2
 8001b36:	461a      	mov	r2, r3
 8001b38:	4623      	mov	r3, r4
 8001b3a:	71fb      	strb	r3, [r7, #7]
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	71bb      	strb	r3, [r7, #6]
 8001b40:	460b      	mov	r3, r1
 8001b42:	717b      	strb	r3, [r7, #5]
 8001b44:	4613      	mov	r3, r2
 8001b46:	713b      	strb	r3, [r7, #4]
  // Draw the main line of the arrow
  drv_ssd1306_line(x1, y1, x2, y2, color);
 8001b48:	793c      	ldrb	r4, [r7, #4]
 8001b4a:	797a      	ldrb	r2, [r7, #5]
 8001b4c:	79b9      	ldrb	r1, [r7, #6]
 8001b4e:	79f8      	ldrb	r0, [r7, #7]
 8001b50:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	4623      	mov	r3, r4
 8001b58:	f7ff ff77 	bl	8001a4a <drv_ssd1306_line>

  // Calculate the angle of the arrow
  float angle = atan2(y2 - y1, x2 - x1);
 8001b5c:	793a      	ldrb	r2, [r7, #4]
 8001b5e:	79bb      	ldrb	r3, [r7, #6]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fce6 	bl	8000534 <__aeabi_i2d>
 8001b68:	4604      	mov	r4, r0
 8001b6a:	460d      	mov	r5, r1
 8001b6c:	797a      	ldrb	r2, [r7, #5]
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fcde 	bl	8000534 <__aeabi_i2d>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	ec43 2b11 	vmov	d1, r2, r3
 8001b80:	ec45 4b10 	vmov	d0, r4, r5
 8001b84:	f006 fbf4 	bl	8008370 <atan2>
 8001b88:	ec53 2b10 	vmov	r2, r3, d0
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f7ff f81c 	bl	8000bcc <__aeabi_d2f>
 8001b94:	4603      	mov	r3, r0
 8001b96:	60fb      	str	r3, [r7, #12]

  // Calculate the coordinates of the arrowhead
  uint8_t arrow_x1 = x2 - arrow_head_size * cos(angle + M_PI / 6);
 8001b98:	797b      	ldrb	r3, [r7, #5]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fcca 	bl	8000534 <__aeabi_i2d>
 8001ba0:	4604      	mov	r4, r0
 8001ba2:	460d      	mov	r5, r1
 8001ba4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe fcc3 	bl	8000534 <__aeabi_i2d>
 8001bae:	4680      	mov	r8, r0
 8001bb0:	4689      	mov	r9, r1
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f7fe fcd0 	bl	8000558 <__aeabi_f2d>
 8001bb8:	a36b      	add	r3, pc, #428	@ (adr r3, 8001d68 <drv_ssd1306_draw_arrow+0x240>)
 8001bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbe:	f7fe fb6d 	bl	800029c <__adddf3>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	ec43 2b17 	vmov	d7, r2, r3
 8001bca:	eeb0 0a47 	vmov.f32	s0, s14
 8001bce:	eef0 0a67 	vmov.f32	s1, s15
 8001bd2:	f006 fbd1 	bl	8008378 <cos>
 8001bd6:	ec53 2b10 	vmov	r2, r3, d0
 8001bda:	4640      	mov	r0, r8
 8001bdc:	4649      	mov	r1, r9
 8001bde:	f7fe fd13 	bl	8000608 <__aeabi_dmul>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4620      	mov	r0, r4
 8001be8:	4629      	mov	r1, r5
 8001bea:	f7fe fb55 	bl	8000298 <__aeabi_dsub>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f7fe ffc9 	bl	8000b8c <__aeabi_d2uiz>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	72fb      	strb	r3, [r7, #11]
  uint8_t arrow_y1 = y2 - arrow_head_size * sin(angle + M_PI / 6);
 8001bfe:	793b      	ldrb	r3, [r7, #4]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fc97 	bl	8000534 <__aeabi_i2d>
 8001c06:	4604      	mov	r4, r0
 8001c08:	460d      	mov	r5, r1
 8001c0a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe fc90 	bl	8000534 <__aeabi_i2d>
 8001c14:	4680      	mov	r8, r0
 8001c16:	4689      	mov	r9, r1
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f7fe fc9d 	bl	8000558 <__aeabi_f2d>
 8001c1e:	a352      	add	r3, pc, #328	@ (adr r3, 8001d68 <drv_ssd1306_draw_arrow+0x240>)
 8001c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c24:	f7fe fb3a 	bl	800029c <__adddf3>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	ec43 2b17 	vmov	d7, r2, r3
 8001c30:	eeb0 0a47 	vmov.f32	s0, s14
 8001c34:	eef0 0a67 	vmov.f32	s1, s15
 8001c38:	f006 fbf2 	bl	8008420 <sin>
 8001c3c:	ec53 2b10 	vmov	r2, r3, d0
 8001c40:	4640      	mov	r0, r8
 8001c42:	4649      	mov	r1, r9
 8001c44:	f7fe fce0 	bl	8000608 <__aeabi_dmul>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	4629      	mov	r1, r5
 8001c50:	f7fe fb22 	bl	8000298 <__aeabi_dsub>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4610      	mov	r0, r2
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f7fe ff96 	bl	8000b8c <__aeabi_d2uiz>
 8001c60:	4603      	mov	r3, r0
 8001c62:	72bb      	strb	r3, [r7, #10]
  uint8_t arrow_x2 = x2 - arrow_head_size * cos(angle - M_PI / 6);
 8001c64:	797b      	ldrb	r3, [r7, #5]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe fc64 	bl	8000534 <__aeabi_i2d>
 8001c6c:	4604      	mov	r4, r0
 8001c6e:	460d      	mov	r5, r1
 8001c70:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe fc5d 	bl	8000534 <__aeabi_i2d>
 8001c7a:	4680      	mov	r8, r0
 8001c7c:	4689      	mov	r9, r1
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f7fe fc6a 	bl	8000558 <__aeabi_f2d>
 8001c84:	a338      	add	r3, pc, #224	@ (adr r3, 8001d68 <drv_ssd1306_draw_arrow+0x240>)
 8001c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8a:	f7fe fb05 	bl	8000298 <__aeabi_dsub>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	ec43 2b17 	vmov	d7, r2, r3
 8001c96:	eeb0 0a47 	vmov.f32	s0, s14
 8001c9a:	eef0 0a67 	vmov.f32	s1, s15
 8001c9e:	f006 fb6b 	bl	8008378 <cos>
 8001ca2:	ec53 2b10 	vmov	r2, r3, d0
 8001ca6:	4640      	mov	r0, r8
 8001ca8:	4649      	mov	r1, r9
 8001caa:	f7fe fcad 	bl	8000608 <__aeabi_dmul>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	4629      	mov	r1, r5
 8001cb6:	f7fe faef 	bl	8000298 <__aeabi_dsub>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f7fe ff63 	bl	8000b8c <__aeabi_d2uiz>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	727b      	strb	r3, [r7, #9]
  uint8_t arrow_y2 = y2 - arrow_head_size * sin(angle - M_PI / 6);
 8001cca:	793b      	ldrb	r3, [r7, #4]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fc31 	bl	8000534 <__aeabi_i2d>
 8001cd2:	4604      	mov	r4, r0
 8001cd4:	460d      	mov	r5, r1
 8001cd6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fc2a 	bl	8000534 <__aeabi_i2d>
 8001ce0:	4680      	mov	r8, r0
 8001ce2:	4689      	mov	r9, r1
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f7fe fc37 	bl	8000558 <__aeabi_f2d>
 8001cea:	a31f      	add	r3, pc, #124	@ (adr r3, 8001d68 <drv_ssd1306_draw_arrow+0x240>)
 8001cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf0:	f7fe fad2 	bl	8000298 <__aeabi_dsub>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	ec43 2b17 	vmov	d7, r2, r3
 8001cfc:	eeb0 0a47 	vmov.f32	s0, s14
 8001d00:	eef0 0a67 	vmov.f32	s1, s15
 8001d04:	f006 fb8c 	bl	8008420 <sin>
 8001d08:	ec53 2b10 	vmov	r2, r3, d0
 8001d0c:	4640      	mov	r0, r8
 8001d0e:	4649      	mov	r1, r9
 8001d10:	f7fe fc7a 	bl	8000608 <__aeabi_dmul>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4620      	mov	r0, r4
 8001d1a:	4629      	mov	r1, r5
 8001d1c:	f7fe fabc 	bl	8000298 <__aeabi_dsub>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4610      	mov	r0, r2
 8001d26:	4619      	mov	r1, r3
 8001d28:	f7fe ff30 	bl	8000b8c <__aeabi_d2uiz>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	723b      	strb	r3, [r7, #8]

  // Draw the arrowhead
  drv_ssd1306_line(x2, y2, arrow_x1, arrow_y1, color);
 8001d30:	7abc      	ldrb	r4, [r7, #10]
 8001d32:	7afa      	ldrb	r2, [r7, #11]
 8001d34:	7939      	ldrb	r1, [r7, #4]
 8001d36:	7978      	ldrb	r0, [r7, #5]
 8001d38:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	4623      	mov	r3, r4
 8001d40:	f7ff fe83 	bl	8001a4a <drv_ssd1306_line>
  drv_ssd1306_line(x2, y2, arrow_x2, arrow_y2, color);
 8001d44:	7a3c      	ldrb	r4, [r7, #8]
 8001d46:	7a7a      	ldrb	r2, [r7, #9]
 8001d48:	7939      	ldrb	r1, [r7, #4]
 8001d4a:	7978      	ldrb	r0, [r7, #5]
 8001d4c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	4623      	mov	r3, r4
 8001d54:	f7ff fe79 	bl	8001a4a <drv_ssd1306_line>

  return DRV_SSD1306_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d64:	f3af 8000 	nop.w
 8001d68:	382d7365 	.word	0x382d7365
 8001d6c:	3fe0c152 	.word	0x3fe0c152

08001d70 <drv_ssd1306_fill_rectangle>:
  return DRV_SSD1306_OK;
}

drv_ssd1306_error_t drv_ssd1306_fill_rectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2,
                                               drv_ssd1306_color_t color)
{
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4604      	mov	r4, r0
 8001d78:	4608      	mov	r0, r1
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4623      	mov	r3, r4
 8001d80:	71fb      	strb	r3, [r7, #7]
 8001d82:	4603      	mov	r3, r0
 8001d84:	71bb      	strb	r3, [r7, #6]
 8001d86:	460b      	mov	r3, r1
 8001d88:	717b      	strb	r3, [r7, #5]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	713b      	strb	r3, [r7, #4]
  uint8_t x_start = (x1 <= x2) ? x1 : x2;
 8001d8e:	79fa      	ldrb	r2, [r7, #7]
 8001d90:	797b      	ldrb	r3, [r7, #5]
 8001d92:	4293      	cmp	r3, r2
 8001d94:	bf28      	it	cs
 8001d96:	4613      	movcs	r3, r2
 8001d98:	737b      	strb	r3, [r7, #13]
  uint8_t x_end   = (x1 <= x2) ? x2 : x1;
 8001d9a:	797a      	ldrb	r2, [r7, #5]
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	bf38      	it	cc
 8001da2:	4613      	movcc	r3, r2
 8001da4:	733b      	strb	r3, [r7, #12]
  uint8_t y_start = (y1 <= y2) ? y1 : y2;
 8001da6:	79ba      	ldrb	r2, [r7, #6]
 8001da8:	793b      	ldrb	r3, [r7, #4]
 8001daa:	4293      	cmp	r3, r2
 8001dac:	bf28      	it	cs
 8001dae:	4613      	movcs	r3, r2
 8001db0:	72fb      	strb	r3, [r7, #11]
  uint8_t y_end   = (y1 <= y2) ? y2 : y1;
 8001db2:	793a      	ldrb	r2, [r7, #4]
 8001db4:	79bb      	ldrb	r3, [r7, #6]
 8001db6:	4293      	cmp	r3, r2
 8001db8:	bf38      	it	cc
 8001dba:	4613      	movcc	r3, r2
 8001dbc:	72bb      	strb	r3, [r7, #10]

  for (uint8_t y = y_start; (y <= y_end) && (y < SSD1306_HEIGHT); y++)
 8001dbe:	7afb      	ldrb	r3, [r7, #11]
 8001dc0:	73fb      	strb	r3, [r7, #15]
 8001dc2:	e017      	b.n	8001df4 <drv_ssd1306_fill_rectangle+0x84>
  {
    for (uint8_t x = x_start; (x <= x_end) && (x < SSD1306_WIDTH); x++)
 8001dc4:	7b7b      	ldrb	r3, [r7, #13]
 8001dc6:	73bb      	strb	r3, [r7, #14]
 8001dc8:	e009      	b.n	8001dde <drv_ssd1306_fill_rectangle+0x6e>
    {
      drv_ssd1306_draw_pixel(x, y, color);
 8001dca:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001dce:	7bf9      	ldrb	r1, [r7, #15]
 8001dd0:	7bbb      	ldrb	r3, [r7, #14]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fcfa 	bl	80017cc <drv_ssd1306_draw_pixel>
    for (uint8_t x = x_start; (x <= x_end) && (x < SSD1306_WIDTH); x++)
 8001dd8:	7bbb      	ldrb	r3, [r7, #14]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	73bb      	strb	r3, [r7, #14]
 8001dde:	7bba      	ldrb	r2, [r7, #14]
 8001de0:	7b3b      	ldrb	r3, [r7, #12]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d803      	bhi.n	8001dee <drv_ssd1306_fill_rectangle+0x7e>
 8001de6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	daed      	bge.n	8001dca <drv_ssd1306_fill_rectangle+0x5a>
  for (uint8_t y = y_start; (y <= y_end) && (y < SSD1306_HEIGHT); y++)
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	3301      	adds	r3, #1
 8001df2:	73fb      	strb	r3, [r7, #15]
 8001df4:	7bfa      	ldrb	r2, [r7, #15]
 8001df6:	7abb      	ldrb	r3, [r7, #10]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d802      	bhi.n	8001e02 <drv_ssd1306_fill_rectangle+0x92>
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e00:	d9e0      	bls.n	8001dc4 <drv_ssd1306_fill_rectangle+0x54>
    }
  }
  return DRV_SSD1306_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd90      	pop	{r4, r7, pc}

08001e0c <drv_ssd1306_fill_circle>:
  return DRV_SSD1306_OK;
}

drv_ssd1306_error_t drv_ssd1306_fill_circle(uint8_t center_x, uint8_t center_y, uint8_t radius,
                                            drv_ssd1306_color_t color)
{
 8001e0c:	b590      	push	{r4, r7, lr}
 8001e0e:	b089      	sub	sp, #36	@ 0x24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4604      	mov	r4, r0
 8001e14:	4608      	mov	r0, r1
 8001e16:	4611      	mov	r1, r2
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4623      	mov	r3, r4
 8001e1c:	71fb      	strb	r3, [r7, #7]
 8001e1e:	4603      	mov	r3, r0
 8001e20:	71bb      	strb	r3, [r7, #6]
 8001e22:	460b      	mov	r3, r1
 8001e24:	717b      	strb	r3, [r7, #5]
 8001e26:	4613      	mov	r3, r2
 8001e28:	713b      	strb	r3, [r7, #4]
  int32_t x   = -radius;         // Initialize x to the negative radius
 8001e2a:	797b      	ldrb	r3, [r7, #5]
 8001e2c:	425b      	negs	r3, r3
 8001e2e:	61fb      	str	r3, [r7, #28]
  int32_t y   = 0;               // Initialize y to 0
 8001e30:	2300      	movs	r3, #0
 8001e32:	61bb      	str	r3, [r7, #24]
  int32_t err = 2 - 2 * radius;  // Initialize the error term
 8001e34:	797b      	ldrb	r3, [r7, #5]
 8001e36:	f1c3 0301 	rsb	r3, r3, #1
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	617b      	str	r3, [r7, #20]
  int32_t e2;

  // Check if the center coordinates are within the display bounds
  if (center_x >= SSD1306_WIDTH || center_y >= SSD1306_HEIGHT)
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	db02      	blt.n	8001e4c <drv_ssd1306_fill_circle+0x40>
 8001e46:	79bb      	ldrb	r3, [r7, #6]
 8001e48:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e4a:	d901      	bls.n	8001e50 <drv_ssd1306_fill_circle+0x44>
  {
    return DRV_SSD1306_ERR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e04e      	b.n	8001eee <drv_ssd1306_fill_circle+0xe2>
  }

  do
  {
    // Fill the vertical line for the current x and y
    for (uint8_t par_y = center_y + y; par_y >= center_y - y; par_y--)
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	79bb      	ldrb	r3, [r7, #6]
 8001e56:	4413      	add	r3, r2
 8001e58:	73fb      	strb	r3, [r7, #15]
 8001e5a:	e017      	b.n	8001e8c <drv_ssd1306_fill_circle+0x80>
    {
      for (uint8_t par_x = center_x - x; par_x >= center_x + x; par_x--)
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	79fa      	ldrb	r2, [r7, #7]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	73bb      	strb	r3, [r7, #14]
 8001e66:	e008      	b.n	8001e7a <drv_ssd1306_fill_circle+0x6e>
      {
        drv_ssd1306_draw_pixel(par_x, par_y, color);
 8001e68:	793a      	ldrb	r2, [r7, #4]
 8001e6a:	7bf9      	ldrb	r1, [r7, #15]
 8001e6c:	7bbb      	ldrb	r3, [r7, #14]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff fcac 	bl	80017cc <drv_ssd1306_draw_pixel>
      for (uint8_t par_x = center_x - x; par_x >= center_x + x; par_x--)
 8001e74:	7bbb      	ldrb	r3, [r7, #14]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	73bb      	strb	r3, [r7, #14]
 8001e7a:	7bba      	ldrb	r2, [r7, #14]
 8001e7c:	79f9      	ldrb	r1, [r7, #7]
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	440b      	add	r3, r1
 8001e82:	429a      	cmp	r2, r3
 8001e84:	daf0      	bge.n	8001e68 <drv_ssd1306_fill_circle+0x5c>
    for (uint8_t par_y = center_y + y; par_y >= center_y - y; par_y--)
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	73fb      	strb	r3, [r7, #15]
 8001e8c:	7bfa      	ldrb	r2, [r7, #15]
 8001e8e:	79b9      	ldrb	r1, [r7, #6]
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	1acb      	subs	r3, r1, r3
 8001e94:	429a      	cmp	r2, r3
 8001e96:	dae1      	bge.n	8001e5c <drv_ssd1306_fill_circle+0x50>
      }
    }

    e2 = err;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	613b      	str	r3, [r7, #16]

    // Adjust the error term and coordinates
    if (e2 <= y)
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	dc13      	bgt.n	8001ecc <drv_ssd1306_fill_circle+0xc0>
    {
      y++;
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	61bb      	str	r3, [r7, #24]
      err += y * 2 + 1;
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	3301      	adds	r3, #1
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	617b      	str	r3, [r7, #20]
      if (-x == y && e2 <= x)
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	425b      	negs	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d105      	bne.n	8001ecc <drv_ssd1306_fill_circle+0xc0>
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	dc01      	bgt.n	8001ecc <drv_ssd1306_fill_circle+0xc0>
      {
        e2 = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	613b      	str	r3, [r7, #16]
      }
    }

    if (e2 > x)
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	dd08      	ble.n	8001ee6 <drv_ssd1306_fill_circle+0xda>
    {
      x++;
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	61fb      	str	r3, [r7, #28]
      err += x * 2 + 1;
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	3301      	adds	r3, #1
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	617b      	str	r3, [r7, #20]
    }
  } while (x <= 0);
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	ddb1      	ble.n	8001e50 <drv_ssd1306_fill_circle+0x44>

  return DRV_SSD1306_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3724      	adds	r7, #36	@ 0x24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd90      	pop	{r4, r7, pc}

08001ef6 <drv_ssd1306_draw_bitmap>:

drv_ssd1306_error_t drv_ssd1306_draw_bitmap(uint8_t x, uint8_t y, const unsigned char *bitmap, uint8_t width,
                                            uint8_t height, drv_ssd1306_color_t color)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b084      	sub	sp, #16
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	603a      	str	r2, [r7, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	4603      	mov	r3, r0
 8001f02:	71fb      	strb	r3, [r7, #7]
 8001f04:	460b      	mov	r3, r1
 8001f06:	71bb      	strb	r3, [r7, #6]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	717b      	strb	r3, [r7, #5]
  int16_t byte_width = (width + 7) / 8;  // Bitmap scanline pad = whole byte
 8001f0c:	797b      	ldrb	r3, [r7, #5]
 8001f0e:	3307      	adds	r3, #7
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	da00      	bge.n	8001f16 <drv_ssd1306_draw_bitmap+0x20>
 8001f14:	3307      	adds	r3, #7
 8001f16:	10db      	asrs	r3, r3, #3
 8001f18:	817b      	strh	r3, [r7, #10]
  uint8_t byte       = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	73fb      	strb	r3, [r7, #15]

  // Check if the coordinates are within the display bounds
  if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	db02      	blt.n	8001f2c <drv_ssd1306_draw_bitmap+0x36>
 8001f26:	79bb      	ldrb	r3, [r7, #6]
 8001f28:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f2a:	d901      	bls.n	8001f30 <drv_ssd1306_draw_bitmap+0x3a>
  {
    return DRV_SSD1306_ERR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e03b      	b.n	8001fa8 <drv_ssd1306_draw_bitmap+0xb2>
  }

  // Loop through each row of the bitmap
  for (uint8_t j = 0; j < height; j++, y++)
 8001f30:	2300      	movs	r3, #0
 8001f32:	73bb      	strb	r3, [r7, #14]
 8001f34:	e033      	b.n	8001f9e <drv_ssd1306_draw_bitmap+0xa8>
  {
    // Loop through each column of the bitmap
    for (uint8_t i = 0; i < width; i++)
 8001f36:	2300      	movs	r3, #0
 8001f38:	737b      	strb	r3, [r7, #13]
 8001f3a:	e026      	b.n	8001f8a <drv_ssd1306_draw_bitmap+0x94>
    {
      // Load a new byte every 8 pixels
      if (i & 7)
 8001f3c:	7b7b      	ldrb	r3, [r7, #13]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <drv_ssd1306_draw_bitmap+0x58>
      {
        byte <<= 1;  // Shift the byte left by 1 bit
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	73fb      	strb	r3, [r7, #15]
 8001f4c:	e00d      	b.n	8001f6a <drv_ssd1306_draw_bitmap+0x74>
      }
      else
      {
        // Load the next byte from the bitmap data
        byte = (*(const unsigned char *) (&bitmap[j * byte_width + i / 8]));
 8001f4e:	7bbb      	ldrb	r3, [r7, #14]
 8001f50:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001f54:	fb02 f303 	mul.w	r3, r2, r3
 8001f58:	7b7a      	ldrb	r2, [r7, #13]
 8001f5a:	08d2      	lsrs	r2, r2, #3
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	4413      	add	r3, r2
 8001f60:	461a      	mov	r2, r3
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	4413      	add	r3, r2
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	73fb      	strb	r3, [r7, #15]
      }

      // Draw the pixel if the most significant bit is set
      if (byte & 0x80)
 8001f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	da08      	bge.n	8001f84 <drv_ssd1306_draw_bitmap+0x8e>
      {
        drv_ssd1306_draw_pixel(x + i, y, color);
 8001f72:	79fa      	ldrb	r2, [r7, #7]
 8001f74:	7b7b      	ldrb	r3, [r7, #13]
 8001f76:	4413      	add	r3, r2
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	7f3a      	ldrb	r2, [r7, #28]
 8001f7c:	79b9      	ldrb	r1, [r7, #6]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff fc24 	bl	80017cc <drv_ssd1306_draw_pixel>
    for (uint8_t i = 0; i < width; i++)
 8001f84:	7b7b      	ldrb	r3, [r7, #13]
 8001f86:	3301      	adds	r3, #1
 8001f88:	737b      	strb	r3, [r7, #13]
 8001f8a:	7b7a      	ldrb	r2, [r7, #13]
 8001f8c:	797b      	ldrb	r3, [r7, #5]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d3d4      	bcc.n	8001f3c <drv_ssd1306_draw_bitmap+0x46>
  for (uint8_t j = 0; j < height; j++, y++)
 8001f92:	7bbb      	ldrb	r3, [r7, #14]
 8001f94:	3301      	adds	r3, #1
 8001f96:	73bb      	strb	r3, [r7, #14]
 8001f98:	79bb      	ldrb	r3, [r7, #6]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	71bb      	strb	r3, [r7, #6]
 8001f9e:	7bba      	ldrb	r2, [r7, #14]
 8001fa0:	7e3b      	ldrb	r3, [r7, #24]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d3c7      	bcc.n	8001f36 <drv_ssd1306_draw_bitmap+0x40>
      }
    }
  }
  return DRV_SSD1306_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fb4:	f001 fbde 	bl	8003774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fb8:	f000 f812 	bl	8001fe0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fbc:	f000 f98e 	bl	80022dc <MX_GPIO_Init>
  MX_DMA_Init();
 8001fc0:	f000 f96c 	bl	800229c <MX_DMA_Init>
  MX_I2C1_Init();
 8001fc4:	f000 f8c6 	bl	8002154 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001fc8:	f000 f8f2 	bl	80021b0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001fcc:	f000 f93c 	bl	8002248 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001fd0:	f000 f86e 	bl	80020b0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  system_manager_init();
 8001fd4:	f001 f93e 	bl	8003254 <system_manager_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	system_manager_run();
 8001fd8:	f001 f952 	bl	8003280 <system_manager_run>
 8001fdc:	e7fc      	b.n	8001fd8 <main+0x28>
	...

08001fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b094      	sub	sp, #80	@ 0x50
 8001fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fe6:	f107 0320 	add.w	r3, r7, #32
 8001fea:	2230      	movs	r2, #48	@ 0x30
 8001fec:	2100      	movs	r1, #0
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f005 fd50 	bl	8007a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ff4:	f107 030c 	add.w	r3, r7, #12
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002004:	2300      	movs	r3, #0
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	4b27      	ldr	r3, [pc, #156]	@ (80020a8 <SystemClock_Config+0xc8>)
 800200a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200c:	4a26      	ldr	r2, [pc, #152]	@ (80020a8 <SystemClock_Config+0xc8>)
 800200e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002012:	6413      	str	r3, [r2, #64]	@ 0x40
 8002014:	4b24      	ldr	r3, [pc, #144]	@ (80020a8 <SystemClock_Config+0xc8>)
 8002016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002018:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002020:	2300      	movs	r3, #0
 8002022:	607b      	str	r3, [r7, #4]
 8002024:	4b21      	ldr	r3, [pc, #132]	@ (80020ac <SystemClock_Config+0xcc>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a20      	ldr	r2, [pc, #128]	@ (80020ac <SystemClock_Config+0xcc>)
 800202a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800202e:	6013      	str	r3, [r2, #0]
 8002030:	4b1e      	ldr	r3, [pc, #120]	@ (80020ac <SystemClock_Config+0xcc>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002038:	607b      	str	r3, [r7, #4]
 800203a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800203c:	2302      	movs	r3, #2
 800203e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002040:	2301      	movs	r3, #1
 8002042:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002044:	2310      	movs	r3, #16
 8002046:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002048:	2302      	movs	r3, #2
 800204a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800204c:	2300      	movs	r3, #0
 800204e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002050:	2308      	movs	r3, #8
 8002052:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002054:	2364      	movs	r3, #100	@ 0x64
 8002056:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002058:	2302      	movs	r3, #2
 800205a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800205c:	2304      	movs	r3, #4
 800205e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002060:	f107 0320 	add.w	r3, r7, #32
 8002064:	4618      	mov	r0, r3
 8002066:	f003 fd09 	bl	8005a7c <HAL_RCC_OscConfig>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002070:	f000 f9b2 	bl	80023d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002074:	230f      	movs	r3, #15
 8002076:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002078:	2302      	movs	r3, #2
 800207a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002080:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002084:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800208a:	f107 030c 	add.w	r3, r7, #12
 800208e:	2103      	movs	r1, #3
 8002090:	4618      	mov	r0, r3
 8002092:	f003 ff6b 	bl	8005f6c <HAL_RCC_ClockConfig>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800209c:	f000 f99c 	bl	80023d8 <Error_Handler>
  }
}
 80020a0:	bf00      	nop
 80020a2:	3750      	adds	r7, #80	@ 0x50
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40023800 	.word	0x40023800
 80020ac:	40007000 	.word	0x40007000

080020b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80020b6:	463b      	mov	r3, r7
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80020c2:	4b21      	ldr	r3, [pc, #132]	@ (8002148 <MX_ADC1_Init+0x98>)
 80020c4:	4a21      	ldr	r2, [pc, #132]	@ (800214c <MX_ADC1_Init+0x9c>)
 80020c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80020c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002148 <MX_ADC1_Init+0x98>)
 80020ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80020ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80020d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002148 <MX_ADC1_Init+0x98>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80020d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002148 <MX_ADC1_Init+0x98>)
 80020d8:	2200      	movs	r2, #0
 80020da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80020dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002148 <MX_ADC1_Init+0x98>)
 80020de:	2201      	movs	r2, #1
 80020e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020e2:	4b19      	ldr	r3, [pc, #100]	@ (8002148 <MX_ADC1_Init+0x98>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020ea:	4b17      	ldr	r3, [pc, #92]	@ (8002148 <MX_ADC1_Init+0x98>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020f0:	4b15      	ldr	r3, [pc, #84]	@ (8002148 <MX_ADC1_Init+0x98>)
 80020f2:	4a17      	ldr	r2, [pc, #92]	@ (8002150 <MX_ADC1_Init+0xa0>)
 80020f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020f6:	4b14      	ldr	r3, [pc, #80]	@ (8002148 <MX_ADC1_Init+0x98>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80020fc:	4b12      	ldr	r3, [pc, #72]	@ (8002148 <MX_ADC1_Init+0x98>)
 80020fe:	2201      	movs	r2, #1
 8002100:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002102:	4b11      	ldr	r3, [pc, #68]	@ (8002148 <MX_ADC1_Init+0x98>)
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800210a:	4b0f      	ldr	r3, [pc, #60]	@ (8002148 <MX_ADC1_Init+0x98>)
 800210c:	2201      	movs	r2, #1
 800210e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002110:	480d      	ldr	r0, [pc, #52]	@ (8002148 <MX_ADC1_Init+0x98>)
 8002112:	f001 fbc5 	bl	80038a0 <HAL_ADC_Init>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800211c:	f000 f95c 	bl	80023d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002120:	2301      	movs	r3, #1
 8002122:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002124:	2301      	movs	r3, #1
 8002126:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002128:	2300      	movs	r3, #0
 800212a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800212c:	463b      	mov	r3, r7
 800212e:	4619      	mov	r1, r3
 8002130:	4805      	ldr	r0, [pc, #20]	@ (8002148 <MX_ADC1_Init+0x98>)
 8002132:	f001 fe25 	bl	8003d80 <HAL_ADC_ConfigChannel>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800213c:	f000 f94c 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002140:	bf00      	nop
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	2000053c 	.word	0x2000053c
 800214c:	40012000 	.word	0x40012000
 8002150:	0f000001 	.word	0x0f000001

08002154 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002158:	4b12      	ldr	r3, [pc, #72]	@ (80021a4 <MX_I2C1_Init+0x50>)
 800215a:	4a13      	ldr	r2, [pc, #76]	@ (80021a8 <MX_I2C1_Init+0x54>)
 800215c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800215e:	4b11      	ldr	r3, [pc, #68]	@ (80021a4 <MX_I2C1_Init+0x50>)
 8002160:	4a12      	ldr	r2, [pc, #72]	@ (80021ac <MX_I2C1_Init+0x58>)
 8002162:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002164:	4b0f      	ldr	r3, [pc, #60]	@ (80021a4 <MX_I2C1_Init+0x50>)
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800216a:	4b0e      	ldr	r3, [pc, #56]	@ (80021a4 <MX_I2C1_Init+0x50>)
 800216c:	2200      	movs	r2, #0
 800216e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002170:	4b0c      	ldr	r3, [pc, #48]	@ (80021a4 <MX_I2C1_Init+0x50>)
 8002172:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002176:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002178:	4b0a      	ldr	r3, [pc, #40]	@ (80021a4 <MX_I2C1_Init+0x50>)
 800217a:	2200      	movs	r2, #0
 800217c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800217e:	4b09      	ldr	r3, [pc, #36]	@ (80021a4 <MX_I2C1_Init+0x50>)
 8002180:	2200      	movs	r2, #0
 8002182:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002184:	4b07      	ldr	r3, [pc, #28]	@ (80021a4 <MX_I2C1_Init+0x50>)
 8002186:	2200      	movs	r2, #0
 8002188:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800218a:	4b06      	ldr	r3, [pc, #24]	@ (80021a4 <MX_I2C1_Init+0x50>)
 800218c:	2200      	movs	r2, #0
 800218e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002190:	4804      	ldr	r0, [pc, #16]	@ (80021a4 <MX_I2C1_Init+0x50>)
 8002192:	f002 fe89 	bl	8004ea8 <HAL_I2C_Init>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800219c:	f000 f91c 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021a0:	bf00      	nop
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000584 	.word	0x20000584
 80021a8:	40005400 	.word	0x40005400
 80021ac:	000186a0 	.word	0x000186a0

080021b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021b6:	f107 0308 	add.w	r3, r7, #8
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	609a      	str	r2, [r3, #8]
 80021c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021c4:	463b      	mov	r3, r7
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002244 <MX_TIM2_Init+0x94>)
 80021ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 80021d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002244 <MX_TIM2_Init+0x94>)
 80021d6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80021da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021dc:	4b19      	ldr	r3, [pc, #100]	@ (8002244 <MX_TIM2_Init+0x94>)
 80021de:	2200      	movs	r2, #0
 80021e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80021e2:	4b18      	ldr	r3, [pc, #96]	@ (8002244 <MX_TIM2_Init+0x94>)
 80021e4:	2263      	movs	r2, #99	@ 0x63
 80021e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021e8:	4b16      	ldr	r3, [pc, #88]	@ (8002244 <MX_TIM2_Init+0x94>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ee:	4b15      	ldr	r3, [pc, #84]	@ (8002244 <MX_TIM2_Init+0x94>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021f4:	4813      	ldr	r0, [pc, #76]	@ (8002244 <MX_TIM2_Init+0x94>)
 80021f6:	f004 f899 	bl	800632c <HAL_TIM_Base_Init>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002200:	f000 f8ea 	bl	80023d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002204:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002208:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800220a:	f107 0308 	add.w	r3, r7, #8
 800220e:	4619      	mov	r1, r3
 8002210:	480c      	ldr	r0, [pc, #48]	@ (8002244 <MX_TIM2_Init+0x94>)
 8002212:	f004 fa2d 	bl	8006670 <HAL_TIM_ConfigClockSource>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800221c:	f000 f8dc 	bl	80023d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002220:	2300      	movs	r3, #0
 8002222:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002224:	2300      	movs	r3, #0
 8002226:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002228:	463b      	mov	r3, r7
 800222a:	4619      	mov	r1, r3
 800222c:	4805      	ldr	r0, [pc, #20]	@ (8002244 <MX_TIM2_Init+0x94>)
 800222e:	f004 fc35 	bl	8006a9c <HAL_TIMEx_MasterConfigSynchronization>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002238:	f000 f8ce 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800223c:	bf00      	nop
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	200005d8 	.word	0x200005d8

08002248 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800224c:	4b11      	ldr	r3, [pc, #68]	@ (8002294 <MX_USART2_UART_Init+0x4c>)
 800224e:	4a12      	ldr	r2, [pc, #72]	@ (8002298 <MX_USART2_UART_Init+0x50>)
 8002250:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002252:	4b10      	ldr	r3, [pc, #64]	@ (8002294 <MX_USART2_UART_Init+0x4c>)
 8002254:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002258:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800225a:	4b0e      	ldr	r3, [pc, #56]	@ (8002294 <MX_USART2_UART_Init+0x4c>)
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002260:	4b0c      	ldr	r3, [pc, #48]	@ (8002294 <MX_USART2_UART_Init+0x4c>)
 8002262:	2200      	movs	r2, #0
 8002264:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002266:	4b0b      	ldr	r3, [pc, #44]	@ (8002294 <MX_USART2_UART_Init+0x4c>)
 8002268:	2200      	movs	r2, #0
 800226a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800226c:	4b09      	ldr	r3, [pc, #36]	@ (8002294 <MX_USART2_UART_Init+0x4c>)
 800226e:	220c      	movs	r2, #12
 8002270:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002272:	4b08      	ldr	r3, [pc, #32]	@ (8002294 <MX_USART2_UART_Init+0x4c>)
 8002274:	2200      	movs	r2, #0
 8002276:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002278:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <MX_USART2_UART_Init+0x4c>)
 800227a:	2200      	movs	r2, #0
 800227c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800227e:	4805      	ldr	r0, [pc, #20]	@ (8002294 <MX_USART2_UART_Init+0x4c>)
 8002280:	f004 fc8e 	bl	8006ba0 <HAL_UART_Init>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800228a:	f000 f8a5 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000620 	.word	0x20000620
 8002298:	40004400 	.word	0x40004400

0800229c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	607b      	str	r3, [r7, #4]
 80022a6:	4b0c      	ldr	r3, [pc, #48]	@ (80022d8 <MX_DMA_Init+0x3c>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022aa:	4a0b      	ldr	r2, [pc, #44]	@ (80022d8 <MX_DMA_Init+0x3c>)
 80022ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b2:	4b09      	ldr	r3, [pc, #36]	@ (80022d8 <MX_DMA_Init+0x3c>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022ba:	607b      	str	r3, [r7, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80022be:	2200      	movs	r2, #0
 80022c0:	2100      	movs	r1, #0
 80022c2:	2010      	movs	r0, #16
 80022c4:	f002 f86f 	bl	80043a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80022c8:	2010      	movs	r0, #16
 80022ca:	f002 f888 	bl	80043de <HAL_NVIC_EnableIRQ>

}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40023800 	.word	0x40023800

080022dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b088      	sub	sp, #32
 80022e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e2:	f107 030c 	add.w	r3, r7, #12
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	609a      	str	r2, [r3, #8]
 80022ee:	60da      	str	r2, [r3, #12]
 80022f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	4b35      	ldr	r3, [pc, #212]	@ (80023cc <MX_GPIO_Init+0xf0>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fa:	4a34      	ldr	r2, [pc, #208]	@ (80023cc <MX_GPIO_Init+0xf0>)
 80022fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002300:	6313      	str	r3, [r2, #48]	@ 0x30
 8002302:	4b32      	ldr	r3, [pc, #200]	@ (80023cc <MX_GPIO_Init+0xf0>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	607b      	str	r3, [r7, #4]
 8002312:	4b2e      	ldr	r3, [pc, #184]	@ (80023cc <MX_GPIO_Init+0xf0>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002316:	4a2d      	ldr	r2, [pc, #180]	@ (80023cc <MX_GPIO_Init+0xf0>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6313      	str	r3, [r2, #48]	@ 0x30
 800231e:	4b2b      	ldr	r3, [pc, #172]	@ (80023cc <MX_GPIO_Init+0xf0>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	607b      	str	r3, [r7, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	603b      	str	r3, [r7, #0]
 800232e:	4b27      	ldr	r3, [pc, #156]	@ (80023cc <MX_GPIO_Init+0xf0>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002332:	4a26      	ldr	r2, [pc, #152]	@ (80023cc <MX_GPIO_Init+0xf0>)
 8002334:	f043 0302 	orr.w	r3, r3, #2
 8002338:	6313      	str	r3, [r2, #48]	@ 0x30
 800233a:	4b24      	ldr	r3, [pc, #144]	@ (80023cc <MX_GPIO_Init+0xf0>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002346:	2301      	movs	r3, #1
 8002348:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800234a:	2300      	movs	r3, #0
 800234c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002352:	f107 030c 	add.w	r3, r7, #12
 8002356:	4619      	mov	r1, r3
 8002358:	481d      	ldr	r0, [pc, #116]	@ (80023d0 <MX_GPIO_Init+0xf4>)
 800235a:	f002 fbd7 	bl	8004b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800235e:	2330      	movs	r3, #48	@ 0x30
 8002360:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002362:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002366:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002368:	2302      	movs	r3, #2
 800236a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236c:	f107 030c 	add.w	r3, r7, #12
 8002370:	4619      	mov	r1, r3
 8002372:	4817      	ldr	r0, [pc, #92]	@ (80023d0 <MX_GPIO_Init+0xf4>)
 8002374:	f002 fbca 	bl	8004b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002378:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800237c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800237e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002382:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002384:	2302      	movs	r3, #2
 8002386:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002388:	f107 030c 	add.w	r3, r7, #12
 800238c:	4619      	mov	r1, r3
 800238e:	4811      	ldr	r0, [pc, #68]	@ (80023d4 <MX_GPIO_Init+0xf8>)
 8002390:	f002 fbbc 	bl	8004b0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002394:	2200      	movs	r2, #0
 8002396:	2100      	movs	r1, #0
 8002398:	200a      	movs	r0, #10
 800239a:	f002 f804 	bl	80043a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800239e:	200a      	movs	r0, #10
 80023a0:	f002 f81d 	bl	80043de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80023a4:	2200      	movs	r2, #0
 80023a6:	2100      	movs	r1, #0
 80023a8:	2017      	movs	r0, #23
 80023aa:	f001 fffc 	bl	80043a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80023ae:	2017      	movs	r0, #23
 80023b0:	f002 f815 	bl	80043de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80023b4:	2200      	movs	r2, #0
 80023b6:	2100      	movs	r1, #0
 80023b8:	2028      	movs	r0, #40	@ 0x28
 80023ba:	f001 fff4 	bl	80043a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80023be:	2028      	movs	r0, #40	@ 0x28
 80023c0:	f002 f80d 	bl	80043de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023c4:	bf00      	nop
 80023c6:	3720      	adds	r7, #32
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40020000 	.word	0x40020000
 80023d4:	40020400 	.word	0x40020400

080023d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023dc:	b672      	cpsid	i
}
 80023de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023e0:	bf00      	nop
 80023e2:	e7fd      	b.n	80023e0 <Error_Handler+0x8>

080023e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	4b10      	ldr	r3, [pc, #64]	@ (8002430 <HAL_MspInit+0x4c>)
 80023f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f2:	4a0f      	ldr	r2, [pc, #60]	@ (8002430 <HAL_MspInit+0x4c>)
 80023f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002430 <HAL_MspInit+0x4c>)
 80023fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002402:	607b      	str	r3, [r7, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	603b      	str	r3, [r7, #0]
 800240a:	4b09      	ldr	r3, [pc, #36]	@ (8002430 <HAL_MspInit+0x4c>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	4a08      	ldr	r2, [pc, #32]	@ (8002430 <HAL_MspInit+0x4c>)
 8002410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002414:	6413      	str	r3, [r2, #64]	@ 0x40
 8002416:	4b06      	ldr	r3, [pc, #24]	@ (8002430 <HAL_MspInit+0x4c>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800241e:	603b      	str	r3, [r7, #0]
 8002420:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	40023800 	.word	0x40023800

08002434 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08a      	sub	sp, #40	@ 0x28
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243c:	f107 0314 	add.w	r3, r7, #20
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a1b      	ldr	r2, [pc, #108]	@ (80024c0 <HAL_ADC_MspInit+0x8c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d12f      	bne.n	80024b6 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	613b      	str	r3, [r7, #16]
 800245a:	4b1a      	ldr	r3, [pc, #104]	@ (80024c4 <HAL_ADC_MspInit+0x90>)
 800245c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800245e:	4a19      	ldr	r2, [pc, #100]	@ (80024c4 <HAL_ADC_MspInit+0x90>)
 8002460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002464:	6453      	str	r3, [r2, #68]	@ 0x44
 8002466:	4b17      	ldr	r3, [pc, #92]	@ (80024c4 <HAL_ADC_MspInit+0x90>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	4b13      	ldr	r3, [pc, #76]	@ (80024c4 <HAL_ADC_MspInit+0x90>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247a:	4a12      	ldr	r2, [pc, #72]	@ (80024c4 <HAL_ADC_MspInit+0x90>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	6313      	str	r3, [r2, #48]	@ 0x30
 8002482:	4b10      	ldr	r3, [pc, #64]	@ (80024c4 <HAL_ADC_MspInit+0x90>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800248e:	2302      	movs	r3, #2
 8002490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002492:	2303      	movs	r3, #3
 8002494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249a:	f107 0314 	add.w	r3, r7, #20
 800249e:	4619      	mov	r1, r3
 80024a0:	4809      	ldr	r0, [pc, #36]	@ (80024c8 <HAL_ADC_MspInit+0x94>)
 80024a2:	f002 fb33 	bl	8004b0c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2100      	movs	r1, #0
 80024aa:	2012      	movs	r0, #18
 80024ac:	f001 ff7b 	bl	80043a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80024b0:	2012      	movs	r0, #18
 80024b2:	f001 ff94 	bl	80043de <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80024b6:	bf00      	nop
 80024b8:	3728      	adds	r7, #40	@ 0x28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40012000 	.word	0x40012000
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40020000 	.word	0x40020000

080024cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	@ 0x28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	60da      	str	r2, [r3, #12]
 80024e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a19      	ldr	r2, [pc, #100]	@ (8002550 <HAL_I2C_MspInit+0x84>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d12c      	bne.n	8002548 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	613b      	str	r3, [r7, #16]
 80024f2:	4b18      	ldr	r3, [pc, #96]	@ (8002554 <HAL_I2C_MspInit+0x88>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f6:	4a17      	ldr	r2, [pc, #92]	@ (8002554 <HAL_I2C_MspInit+0x88>)
 80024f8:	f043 0302 	orr.w	r3, r3, #2
 80024fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024fe:	4b15      	ldr	r3, [pc, #84]	@ (8002554 <HAL_I2C_MspInit+0x88>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800250a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800250e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002510:	2312      	movs	r3, #18
 8002512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002514:	2301      	movs	r3, #1
 8002516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002518:	2303      	movs	r3, #3
 800251a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800251c:	2304      	movs	r3, #4
 800251e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	4619      	mov	r1, r3
 8002526:	480c      	ldr	r0, [pc, #48]	@ (8002558 <HAL_I2C_MspInit+0x8c>)
 8002528:	f002 faf0 	bl	8004b0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800252c:	2300      	movs	r3, #0
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	4b08      	ldr	r3, [pc, #32]	@ (8002554 <HAL_I2C_MspInit+0x88>)
 8002532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002534:	4a07      	ldr	r2, [pc, #28]	@ (8002554 <HAL_I2C_MspInit+0x88>)
 8002536:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800253a:	6413      	str	r3, [r2, #64]	@ 0x40
 800253c:	4b05      	ldr	r3, [pc, #20]	@ (8002554 <HAL_I2C_MspInit+0x88>)
 800253e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002540:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002548:	bf00      	nop
 800254a:	3728      	adds	r7, #40	@ 0x28
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40005400 	.word	0x40005400
 8002554:	40023800 	.word	0x40023800
 8002558:	40020400 	.word	0x40020400

0800255c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800256c:	d115      	bne.n	800259a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	4b0c      	ldr	r3, [pc, #48]	@ (80025a4 <HAL_TIM_Base_MspInit+0x48>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002576:	4a0b      	ldr	r2, [pc, #44]	@ (80025a4 <HAL_TIM_Base_MspInit+0x48>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6413      	str	r3, [r2, #64]	@ 0x40
 800257e:	4b09      	ldr	r3, [pc, #36]	@ (80025a4 <HAL_TIM_Base_MspInit+0x48>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	2100      	movs	r1, #0
 800258e:	201c      	movs	r0, #28
 8002590:	f001 ff09 	bl	80043a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002594:	201c      	movs	r0, #28
 8002596:	f001 ff22 	bl	80043de <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800

080025a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08a      	sub	sp, #40	@ 0x28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b0:	f107 0314 	add.w	r3, r7, #20
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a3c      	ldr	r2, [pc, #240]	@ (80026b8 <HAL_UART_MspInit+0x110>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d172      	bne.n	80026b0 <HAL_UART_MspInit+0x108>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	4b3b      	ldr	r3, [pc, #236]	@ (80026bc <HAL_UART_MspInit+0x114>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d2:	4a3a      	ldr	r2, [pc, #232]	@ (80026bc <HAL_UART_MspInit+0x114>)
 80025d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025da:	4b38      	ldr	r3, [pc, #224]	@ (80026bc <HAL_UART_MspInit+0x114>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	4b34      	ldr	r3, [pc, #208]	@ (80026bc <HAL_UART_MspInit+0x114>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ee:	4a33      	ldr	r2, [pc, #204]	@ (80026bc <HAL_UART_MspInit+0x114>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025f6:	4b31      	ldr	r3, [pc, #196]	@ (80026bc <HAL_UART_MspInit+0x114>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002602:	2304      	movs	r3, #4
 8002604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002606:	2302      	movs	r3, #2
 8002608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800260e:	2303      	movs	r3, #3
 8002610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002612:	2307      	movs	r3, #7
 8002614:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002616:	f107 0314 	add.w	r3, r7, #20
 800261a:	4619      	mov	r1, r3
 800261c:	4828      	ldr	r0, [pc, #160]	@ (80026c0 <HAL_UART_MspInit+0x118>)
 800261e:	f002 fa75 	bl	8004b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002622:	2308      	movs	r3, #8
 8002624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002626:	2302      	movs	r3, #2
 8002628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800262a:	2301      	movs	r3, #1
 800262c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262e:	2303      	movs	r3, #3
 8002630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002632:	2307      	movs	r3, #7
 8002634:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002636:	f107 0314 	add.w	r3, r7, #20
 800263a:	4619      	mov	r1, r3
 800263c:	4820      	ldr	r0, [pc, #128]	@ (80026c0 <HAL_UART_MspInit+0x118>)
 800263e:	f002 fa65 	bl	8004b0c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002642:	4b20      	ldr	r3, [pc, #128]	@ (80026c4 <HAL_UART_MspInit+0x11c>)
 8002644:	4a20      	ldr	r2, [pc, #128]	@ (80026c8 <HAL_UART_MspInit+0x120>)
 8002646:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002648:	4b1e      	ldr	r3, [pc, #120]	@ (80026c4 <HAL_UART_MspInit+0x11c>)
 800264a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800264e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002650:	4b1c      	ldr	r3, [pc, #112]	@ (80026c4 <HAL_UART_MspInit+0x11c>)
 8002652:	2200      	movs	r2, #0
 8002654:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002656:	4b1b      	ldr	r3, [pc, #108]	@ (80026c4 <HAL_UART_MspInit+0x11c>)
 8002658:	2200      	movs	r2, #0
 800265a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800265c:	4b19      	ldr	r3, [pc, #100]	@ (80026c4 <HAL_UART_MspInit+0x11c>)
 800265e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002662:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002664:	4b17      	ldr	r3, [pc, #92]	@ (80026c4 <HAL_UART_MspInit+0x11c>)
 8002666:	2200      	movs	r2, #0
 8002668:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800266a:	4b16      	ldr	r3, [pc, #88]	@ (80026c4 <HAL_UART_MspInit+0x11c>)
 800266c:	2200      	movs	r2, #0
 800266e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002670:	4b14      	ldr	r3, [pc, #80]	@ (80026c4 <HAL_UART_MspInit+0x11c>)
 8002672:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002676:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002678:	4b12      	ldr	r3, [pc, #72]	@ (80026c4 <HAL_UART_MspInit+0x11c>)
 800267a:	2200      	movs	r2, #0
 800267c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800267e:	4b11      	ldr	r3, [pc, #68]	@ (80026c4 <HAL_UART_MspInit+0x11c>)
 8002680:	2200      	movs	r2, #0
 8002682:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002684:	480f      	ldr	r0, [pc, #60]	@ (80026c4 <HAL_UART_MspInit+0x11c>)
 8002686:	f001 fec5 	bl	8004414 <HAL_DMA_Init>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 8002690:	f7ff fea2 	bl	80023d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a0b      	ldr	r2, [pc, #44]	@ (80026c4 <HAL_UART_MspInit+0x11c>)
 8002698:	63da      	str	r2, [r3, #60]	@ 0x3c
 800269a:	4a0a      	ldr	r2, [pc, #40]	@ (80026c4 <HAL_UART_MspInit+0x11c>)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026a0:	2200      	movs	r2, #0
 80026a2:	2100      	movs	r1, #0
 80026a4:	2026      	movs	r0, #38	@ 0x26
 80026a6:	f001 fe7e 	bl	80043a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026aa:	2026      	movs	r0, #38	@ 0x26
 80026ac:	f001 fe97 	bl	80043de <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80026b0:	bf00      	nop
 80026b2:	3728      	adds	r7, #40	@ 0x28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40004400 	.word	0x40004400
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40020000 	.word	0x40020000
 80026c4:	20000668 	.word	0x20000668
 80026c8:	40026088 	.word	0x40026088

080026cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026d0:	bf00      	nop
 80026d2:	e7fd      	b.n	80026d0 <NMI_Handler+0x4>

080026d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026d8:	bf00      	nop
 80026da:	e7fd      	b.n	80026d8 <HardFault_Handler+0x4>

080026dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026e0:	bf00      	nop
 80026e2:	e7fd      	b.n	80026e0 <MemManage_Handler+0x4>

080026e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026e8:	bf00      	nop
 80026ea:	e7fd      	b.n	80026e8 <BusFault_Handler+0x4>

080026ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026f0:	bf00      	nop
 80026f2:	e7fd      	b.n	80026f0 <UsageFault_Handler+0x4>

080026f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026f8:	bf00      	nop
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002702:	b480      	push	{r7}
 8002704:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002706:	bf00      	nop
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002714:	bf00      	nop
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002722:	f001 f879 	bl	8003818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}

0800272a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800272e:	2010      	movs	r0, #16
 8002730:	f002 fba2 	bl	8004e78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002734:	bf00      	nop
 8002736:	bd80      	pop	{r7, pc}

08002738 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800273c:	4802      	ldr	r0, [pc, #8]	@ (8002748 <DMA1_Stream5_IRQHandler+0x10>)
 800273e:	f001 ffa9 	bl	8004694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000668 	.word	0x20000668

0800274c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002750:	4802      	ldr	r0, [pc, #8]	@ (800275c <ADC_IRQHandler+0x10>)
 8002752:	f001 f9e4 	bl	8003b1e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	2000053c 	.word	0x2000053c

08002760 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002764:	2020      	movs	r0, #32
 8002766:	f002 fb87 	bl	8004e78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002774:	4802      	ldr	r0, [pc, #8]	@ (8002780 <TIM2_IRQHandler+0x10>)
 8002776:	f003 fe8b 	bl	8006490 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	200005d8 	.word	0x200005d8

08002784 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002788:	4802      	ldr	r0, [pc, #8]	@ (8002794 <USART2_IRQHandler+0x10>)
 800278a:	f004 fa8f 	bl	8006cac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000620 	.word	0x20000620

08002798 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800279c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80027a0:	f002 fb6a 	bl	8004e78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027a4:	bf00      	nop
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027b0:	4a14      	ldr	r2, [pc, #80]	@ (8002804 <_sbrk+0x5c>)
 80027b2:	4b15      	ldr	r3, [pc, #84]	@ (8002808 <_sbrk+0x60>)
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027bc:	4b13      	ldr	r3, [pc, #76]	@ (800280c <_sbrk+0x64>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d102      	bne.n	80027ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027c4:	4b11      	ldr	r3, [pc, #68]	@ (800280c <_sbrk+0x64>)
 80027c6:	4a12      	ldr	r2, [pc, #72]	@ (8002810 <_sbrk+0x68>)
 80027c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ca:	4b10      	ldr	r3, [pc, #64]	@ (800280c <_sbrk+0x64>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4413      	add	r3, r2
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d207      	bcs.n	80027e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027d8:	f005 f964 	bl	8007aa4 <__errno>
 80027dc:	4603      	mov	r3, r0
 80027de:	220c      	movs	r2, #12
 80027e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027e2:	f04f 33ff 	mov.w	r3, #4294967295
 80027e6:	e009      	b.n	80027fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027e8:	4b08      	ldr	r3, [pc, #32]	@ (800280c <_sbrk+0x64>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ee:	4b07      	ldr	r3, [pc, #28]	@ (800280c <_sbrk+0x64>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4413      	add	r3, r2
 80027f6:	4a05      	ldr	r2, [pc, #20]	@ (800280c <_sbrk+0x64>)
 80027f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027fa:	68fb      	ldr	r3, [r7, #12]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20020000 	.word	0x20020000
 8002808:	00000400 	.word	0x00000400
 800280c:	200006c8 	.word	0x200006c8
 8002810:	20000828 	.word	0x20000828

08002814 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002818:	4b06      	ldr	r3, [pc, #24]	@ (8002834 <SystemInit+0x20>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800281e:	4a05      	ldr	r2, [pc, #20]	@ (8002834 <SystemInit+0x20>)
 8002820:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002824:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <ssd1306_starting_screen>:
static volatile bool scroll_flag = false;
/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */
void ssd1306_starting_screen(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af02      	add	r7, sp, #8
  drv_ssd1306_fill(DRV_SSD1306_COLOR_BLACK);
 800283e:	2000      	movs	r0, #0
 8002840:	f7fe ff2e 	bl	80016a0 <drv_ssd1306_fill>
  drv_ssd1306_draw_bitmap(0, 0, malkman_128x64, 128, 64, DRV_SSD1306_COLOR_WHITE);
 8002844:	2301      	movs	r3, #1
 8002846:	9301      	str	r3, [sp, #4]
 8002848:	2340      	movs	r3, #64	@ 0x40
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	2380      	movs	r3, #128	@ 0x80
 800284e:	4a05      	ldr	r2, [pc, #20]	@ (8002864 <ssd1306_starting_screen+0x2c>)
 8002850:	2100      	movs	r1, #0
 8002852:	2000      	movs	r0, #0
 8002854:	f7ff fb4f 	bl	8001ef6 <drv_ssd1306_draw_bitmap>
  drv_ssd1306_update_screen();
 8002858:	f7fe ff3c 	bl	80016d4 <drv_ssd1306_update_screen>
}
 800285c:	bf00      	nop
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	08009b74 	.word	0x08009b74

08002868 <ssd1306_playlist_menu>:

void ssd1306_playlist_menu(uint16_t song_id, int volume)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af02      	add	r7, sp, #8
 800286e:	4603      	mov	r3, r0
 8002870:	6039      	str	r1, [r7, #0]
 8002872:	80fb      	strh	r3, [r7, #6]
  const char* song_name1 = get_song_name_info(song_id % 10);
 8002874:	88fa      	ldrh	r2, [r7, #6]
 8002876:	4b59      	ldr	r3, [pc, #356]	@ (80029dc <ssd1306_playlist_menu+0x174>)
 8002878:	fba3 1302 	umull	r1, r3, r3, r2
 800287c:	08d9      	lsrs	r1, r3, #3
 800287e:	460b      	mov	r3, r1
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	b29b      	uxth	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	4618      	mov	r0, r3
 800288e:	f000 fc49 	bl	8003124 <get_song_name_info>
 8002892:	6178      	str	r0, [r7, #20]
  const char* song_name2 = get_song_name_info((song_id + 1) % 10);
 8002894:	88fb      	ldrh	r3, [r7, #6]
 8002896:	1c5a      	adds	r2, r3, #1
 8002898:	4b51      	ldr	r3, [pc, #324]	@ (80029e0 <ssd1306_playlist_menu+0x178>)
 800289a:	fb83 1302 	smull	r1, r3, r3, r2
 800289e:	1099      	asrs	r1, r3, #2
 80028a0:	17d3      	asrs	r3, r2, #31
 80028a2:	1ac9      	subs	r1, r1, r3
 80028a4:	460b      	mov	r3, r1
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	1ad1      	subs	r1, r2, r3
 80028ae:	b2cb      	uxtb	r3, r1
 80028b0:	4618      	mov	r0, r3
 80028b2:	f000 fc37 	bl	8003124 <get_song_name_info>
 80028b6:	6138      	str	r0, [r7, #16]
  const char* song_name3 = get_song_name_info((song_id + 2) % 10);
 80028b8:	88fb      	ldrh	r3, [r7, #6]
 80028ba:	1c9a      	adds	r2, r3, #2
 80028bc:	4b48      	ldr	r3, [pc, #288]	@ (80029e0 <ssd1306_playlist_menu+0x178>)
 80028be:	fb83 1302 	smull	r1, r3, r3, r2
 80028c2:	1099      	asrs	r1, r3, #2
 80028c4:	17d3      	asrs	r3, r2, #31
 80028c6:	1ac9      	subs	r1, r1, r3
 80028c8:	460b      	mov	r3, r1
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	1ad1      	subs	r1, r2, r3
 80028d2:	b2cb      	uxtb	r3, r1
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 fc25 	bl	8003124 <get_song_name_info>
 80028da:	60f8      	str	r0, [r7, #12]
  char volume_str[4];
  sprintf(volume_str, "%u", ((volume * 100) / 31));
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	2264      	movs	r2, #100	@ 0x64
 80028e0:	fb02 f303 	mul.w	r3, r2, r3
 80028e4:	4a3f      	ldr	r2, [pc, #252]	@ (80029e4 <ssd1306_playlist_menu+0x17c>)
 80028e6:	fb82 1203 	smull	r1, r2, r2, r3
 80028ea:	441a      	add	r2, r3
 80028ec:	1112      	asrs	r2, r2, #4
 80028ee:	17db      	asrs	r3, r3, #31
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	f107 0308 	add.w	r3, r7, #8
 80028f6:	493c      	ldr	r1, [pc, #240]	@ (80029e8 <ssd1306_playlist_menu+0x180>)
 80028f8:	4618      	mov	r0, r3
 80028fa:	f005 f891 	bl	8007a20 <siprintf>
  drv_ssd1306_fill(DRV_SSD1306_COLOR_BLACK);
 80028fe:	2000      	movs	r0, #0
 8002900:	f7fe fece 	bl	80016a0 <drv_ssd1306_fill>
  drv_ssd1306_draw_bitmap(0, 0, playlist_24x24, 24, 24, DRV_SSD1306_COLOR_WHITE);
 8002904:	2301      	movs	r3, #1
 8002906:	9301      	str	r3, [sp, #4]
 8002908:	2318      	movs	r3, #24
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	2318      	movs	r3, #24
 800290e:	4a37      	ldr	r2, [pc, #220]	@ (80029ec <ssd1306_playlist_menu+0x184>)
 8002910:	2100      	movs	r1, #0
 8002912:	2000      	movs	r0, #0
 8002914:	f7ff faef 	bl	8001ef6 <drv_ssd1306_draw_bitmap>
  drv_ssd1306_set_cursor(36, 12);
 8002918:	210c      	movs	r1, #12
 800291a:	2024      	movs	r0, #36	@ 0x24
 800291c:	f7fe ff3c 	bl	8001798 <drv_ssd1306_set_cursor>
  drv_ssd1306_write_string("Playlist", font_6x8, DRV_SSD1306_COLOR_WHITE, 0);
 8002920:	4b33      	ldr	r3, [pc, #204]	@ (80029f0 <ssd1306_playlist_menu+0x188>)
 8002922:	2200      	movs	r2, #0
 8002924:	9201      	str	r2, [sp, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	9200      	str	r2, [sp, #0]
 800292a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800292c:	4831      	ldr	r0, [pc, #196]	@ (80029f4 <ssd1306_playlist_menu+0x18c>)
 800292e:	f7ff f865 	bl	80019fc <drv_ssd1306_write_string>
  drv_ssd1306_line(0, 28, 127, 28, DRV_SSD1306_COLOR_WHITE);
 8002932:	2301      	movs	r3, #1
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	231c      	movs	r3, #28
 8002938:	227f      	movs	r2, #127	@ 0x7f
 800293a:	211c      	movs	r1, #28
 800293c:	2000      	movs	r0, #0
 800293e:	f7ff f884 	bl	8001a4a <drv_ssd1306_line>
  drv_ssd1306_line(24, 28, 24, 63, DRV_SSD1306_COLOR_WHITE);
 8002942:	2301      	movs	r3, #1
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	233f      	movs	r3, #63	@ 0x3f
 8002948:	2218      	movs	r2, #24
 800294a:	211c      	movs	r1, #28
 800294c:	2018      	movs	r0, #24
 800294e:	f7ff f87c 	bl	8001a4a <drv_ssd1306_line>
  drv_ssd1306_draw_arrow(10, 35, 20, 35, 10, DRV_SSD1306_COLOR_WHITE);
 8002952:	2301      	movs	r3, #1
 8002954:	9301      	str	r3, [sp, #4]
 8002956:	230a      	movs	r3, #10
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	2323      	movs	r3, #35	@ 0x23
 800295c:	2214      	movs	r2, #20
 800295e:	2123      	movs	r1, #35	@ 0x23
 8002960:	200a      	movs	r0, #10
 8002962:	f7ff f8e1 	bl	8001b28 <drv_ssd1306_draw_arrow>
  drv_ssd1306_set_cursor(28, 32);
 8002966:	2120      	movs	r1, #32
 8002968:	201c      	movs	r0, #28
 800296a:	f7fe ff15 	bl	8001798 <drv_ssd1306_set_cursor>
  drv_ssd1306_write_string(song_name1, font_6x8, DRV_SSD1306_COLOR_WHITE, false);  // Display first song
 800296e:	4b20      	ldr	r3, [pc, #128]	@ (80029f0 <ssd1306_playlist_menu+0x188>)
 8002970:	2200      	movs	r2, #0
 8002972:	9201      	str	r2, [sp, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	9200      	str	r2, [sp, #0]
 8002978:	cb0e      	ldmia	r3, {r1, r2, r3}
 800297a:	6978      	ldr	r0, [r7, #20]
 800297c:	f7ff f83e 	bl	80019fc <drv_ssd1306_write_string>
  drv_ssd1306_set_cursor(28, 42);
 8002980:	212a      	movs	r1, #42	@ 0x2a
 8002982:	201c      	movs	r0, #28
 8002984:	f7fe ff08 	bl	8001798 <drv_ssd1306_set_cursor>
  drv_ssd1306_write_string(song_name2, font_6x8, DRV_SSD1306_COLOR_WHITE, false);  // Display second song
 8002988:	4b19      	ldr	r3, [pc, #100]	@ (80029f0 <ssd1306_playlist_menu+0x188>)
 800298a:	2200      	movs	r2, #0
 800298c:	9201      	str	r2, [sp, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	9200      	str	r2, [sp, #0]
 8002992:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002994:	6938      	ldr	r0, [r7, #16]
 8002996:	f7ff f831 	bl	80019fc <drv_ssd1306_write_string>
  drv_ssd1306_set_cursor(28, 52);
 800299a:	2134      	movs	r1, #52	@ 0x34
 800299c:	201c      	movs	r0, #28
 800299e:	f7fe fefb 	bl	8001798 <drv_ssd1306_set_cursor>
  drv_ssd1306_write_string(song_name3, font_6x8, DRV_SSD1306_COLOR_WHITE, false);  // Display third song
 80029a2:	4b13      	ldr	r3, [pc, #76]	@ (80029f0 <ssd1306_playlist_menu+0x188>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	9201      	str	r2, [sp, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	9200      	str	r2, [sp, #0]
 80029ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f7ff f824 	bl	80019fc <drv_ssd1306_write_string>
  drv_ssd1306_set_cursor(105, 5);
 80029b4:	2105      	movs	r1, #5
 80029b6:	2069      	movs	r0, #105	@ 0x69
 80029b8:	f7fe feee 	bl	8001798 <drv_ssd1306_set_cursor>
  drv_ssd1306_write_string(volume_str, font_7x10, DRV_SSD1306_COLOR_WHITE, false); // Display Volume
 80029bc:	4b0e      	ldr	r3, [pc, #56]	@ (80029f8 <ssd1306_playlist_menu+0x190>)
 80029be:	f107 0008 	add.w	r0, r7, #8
 80029c2:	2200      	movs	r2, #0
 80029c4:	9201      	str	r2, [sp, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	9200      	str	r2, [sp, #0]
 80029ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029cc:	f7ff f816 	bl	80019fc <drv_ssd1306_write_string>
  //ssd1306_scroll_string(song_name1, 28, 32, font_6x8, DRV_SSD1306_COLOR_WHITE, 1);

  drv_ssd1306_update_screen();
 80029d0:	f7fe fe80 	bl	80016d4 <drv_ssd1306_update_screen>
}
 80029d4:	bf00      	nop
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	cccccccd 	.word	0xcccccccd
 80029e0:	66666667 	.word	0x66666667
 80029e4:	84210843 	.word	0x84210843
 80029e8:	08009958 	.word	0x08009958
 80029ec:	08009b2c 	.word	0x08009b2c
 80029f0:	0800b050 	.word	0x0800b050
 80029f4:	0800995c 	.word	0x0800995c
 80029f8:	0800b05c 	.word	0x0800b05c

080029fc <ssd1306_music_player_menu_default>:

void ssd1306_music_player_menu_default(uint16_t song_id, uint8_t playback_state, uint8_t play_mode_state)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af02      	add	r7, sp, #8
 8002a02:	4603      	mov	r3, r0
 8002a04:	80fb      	strh	r3, [r7, #6]
 8002a06:	460b      	mov	r3, r1
 8002a08:	717b      	strb	r3, [r7, #5]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	713b      	strb	r3, [r7, #4]
  const char* song_name = get_song_name_info(song_id);
 8002a0e:	88fb      	ldrh	r3, [r7, #6]
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 fb86 	bl	8003124 <get_song_name_info>
 8002a18:	60f8      	str	r0, [r7, #12]
  drv_ssd1306_fill(DRV_SSD1306_COLOR_BLACK);
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	f7fe fe40 	bl	80016a0 <drv_ssd1306_fill>
  drv_ssd1306_line(90, 0, 90, 64, DRV_SSD1306_COLOR_WHITE);
 8002a20:	2301      	movs	r3, #1
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	2340      	movs	r3, #64	@ 0x40
 8002a26:	225a      	movs	r2, #90	@ 0x5a
 8002a28:	2100      	movs	r1, #0
 8002a2a:	205a      	movs	r0, #90	@ 0x5a
 8002a2c:	f7ff f80d 	bl	8001a4a <drv_ssd1306_line>
  drv_ssd1306_line(0, 48, 90, 48, DRV_SSD1306_COLOR_WHITE);
 8002a30:	2301      	movs	r3, #1
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	2330      	movs	r3, #48	@ 0x30
 8002a36:	225a      	movs	r2, #90	@ 0x5a
 8002a38:	2130      	movs	r1, #48	@ 0x30
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	f7ff f805 	bl	8001a4a <drv_ssd1306_line>
  drv_ssd1306_draw_bitmap(8, 4, music_note_icon_64x32, 64, 32, DRV_SSD1306_COLOR_WHITE);
 8002a40:	2301      	movs	r3, #1
 8002a42:	9301      	str	r3, [sp, #4]
 8002a44:	2320      	movs	r3, #32
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	2340      	movs	r3, #64	@ 0x40
 8002a4a:	4a0f      	ldr	r2, [pc, #60]	@ (8002a88 <ssd1306_music_player_menu_default+0x8c>)
 8002a4c:	2104      	movs	r1, #4
 8002a4e:	2008      	movs	r0, #8
 8002a50:	f7ff fa51 	bl	8001ef6 <drv_ssd1306_draw_bitmap>
  ssd1306_draw_menu_button_fsm(playback_state, play_mode_state);
 8002a54:	793a      	ldrb	r2, [r7, #4]
 8002a56:	797b      	ldrb	r3, [r7, #5]
 8002a58:	4611      	mov	r1, r2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 f90a 	bl	8002c74 <ssd1306_draw_menu_button_fsm>
  drv_ssd1306_set_cursor(0, 50);
 8002a60:	2132      	movs	r1, #50	@ 0x32
 8002a62:	2000      	movs	r0, #0
 8002a64:	f7fe fe98 	bl	8001798 <drv_ssd1306_set_cursor>
  drv_ssd1306_write_string(song_name, font_6x8, DRV_SSD1306_COLOR_WHITE, 2);
 8002a68:	4b08      	ldr	r3, [pc, #32]	@ (8002a8c <ssd1306_music_player_menu_default+0x90>)
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	9201      	str	r2, [sp, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	9200      	str	r2, [sp, #0]
 8002a72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f7fe ffc1 	bl	80019fc <drv_ssd1306_write_string>
  drv_ssd1306_update_screen();
 8002a7a:	f7fe fe2b 	bl	80016d4 <drv_ssd1306_update_screen>
}
 8002a7e:	bf00      	nop
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	0800a1f4 	.word	0x0800a1f4
 8002a8c:	0800b050 	.word	0x0800b050

08002a90 <ssd1306_music_player_menu_title>:

void ssd1306_music_player_menu_title(uint16_t song_id, int volume)
{
 8002a90:	b590      	push	{r4, r7, lr}
 8002a92:	b089      	sub	sp, #36	@ 0x24
 8002a94:	af04      	add	r7, sp, #16
 8002a96:	4603      	mov	r3, r0
 8002a98:	6039      	str	r1, [r7, #0]
 8002a9a:	80fb      	strh	r3, [r7, #6]
  const char* song_name = get_song_name_info(song_id);
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 fb3f 	bl	8003124 <get_song_name_info>
 8002aa6:	60f8      	str	r0, [r7, #12]
  char volume_str[4];
  sprintf(volume_str, "%u", ((volume * 100) / 31));
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	2264      	movs	r2, #100	@ 0x64
 8002aac:	fb02 f303 	mul.w	r3, r2, r3
 8002ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8002b24 <ssd1306_music_player_menu_title+0x94>)
 8002ab2:	fb82 1203 	smull	r1, r2, r2, r3
 8002ab6:	441a      	add	r2, r3
 8002ab8:	1112      	asrs	r2, r2, #4
 8002aba:	17db      	asrs	r3, r3, #31
 8002abc:	1ad2      	subs	r2, r2, r3
 8002abe:	f107 0308 	add.w	r3, r7, #8
 8002ac2:	4919      	ldr	r1, [pc, #100]	@ (8002b28 <ssd1306_music_player_menu_title+0x98>)
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f004 ffab 	bl	8007a20 <siprintf>
  drv_ssd1306_fill_rectangle(75, 38, 88, 46, DRV_SSD1306_COLOR_BLACK);
 8002aca:	2300      	movs	r3, #0
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	232e      	movs	r3, #46	@ 0x2e
 8002ad0:	2258      	movs	r2, #88	@ 0x58
 8002ad2:	2126      	movs	r1, #38	@ 0x26
 8002ad4:	204b      	movs	r0, #75	@ 0x4b
 8002ad6:	f7ff f94b 	bl	8001d70 <drv_ssd1306_fill_rectangle>
  drv_ssd1306_set_cursor(68, 38);
 8002ada:	2126      	movs	r1, #38	@ 0x26
 8002adc:	2044      	movs	r0, #68	@ 0x44
 8002ade:	f7fe fe5b 	bl	8001798 <drv_ssd1306_set_cursor>
  drv_ssd1306_write_string(volume_str, font_7x10, DRV_SSD1306_COLOR_WHITE, false); // Display volume
 8002ae2:	4b12      	ldr	r3, [pc, #72]	@ (8002b2c <ssd1306_music_player_menu_title+0x9c>)
 8002ae4:	f107 0008 	add.w	r0, r7, #8
 8002ae8:	2200      	movs	r2, #0
 8002aea:	9201      	str	r2, [sp, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	9200      	str	r2, [sp, #0]
 8002af0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002af2:	f7fe ff83 	bl	80019fc <drv_ssd1306_write_string>
  ssd1306_scroll_string(song_name, 0, 50, font_6x8, DRV_SSD1306_COLOR_WHITE, 2);   // Display title
 8002af6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b30 <ssd1306_music_player_menu_title+0xa0>)
 8002af8:	2202      	movs	r2, #2
 8002afa:	9203      	str	r2, [sp, #12]
 8002afc:	2201      	movs	r2, #1
 8002afe:	9202      	str	r2, [sp, #8]
 8002b00:	466c      	mov	r4, sp
 8002b02:	1d1a      	adds	r2, r3, #4
 8002b04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b08:	e884 0003 	stmia.w	r4, {r0, r1}
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2232      	movs	r2, #50	@ 0x32
 8002b10:	2100      	movs	r1, #0
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 fa44 	bl	8002fa0 <ssd1306_scroll_string>
  drv_ssd1306_update_screen();
 8002b18:	f7fe fddc 	bl	80016d4 <drv_ssd1306_update_screen>
}
 8002b1c:	bf00      	nop
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd90      	pop	{r4, r7, pc}
 8002b24:	84210843 	.word	0x84210843
 8002b28:	08009958 	.word	0x08009958
 8002b2c:	0800b05c 	.word	0x0800b05c
 8002b30:	0800b050 	.word	0x0800b050

08002b34 <ssd1306_music_player_menu_play>:

void ssd1306_music_player_menu_play(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af04      	add	r7, sp, #16
  ssd1306_icon_transition(95, 0, play_button_32x32, 32, 32, DRV_SSD1306_COLOR_WHITE);
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	9301      	str	r3, [sp, #4]
 8002b3e:	2320      	movs	r3, #32
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	2320      	movs	r3, #32
 8002b44:	4a0a      	ldr	r2, [pc, #40]	@ (8002b70 <ssd1306_music_player_menu_play+0x3c>)
 8002b46:	2100      	movs	r1, #0
 8002b48:	205f      	movs	r0, #95	@ 0x5f
 8002b4a:	f000 f9f1 	bl	8002f30 <ssd1306_icon_transition>
  ssd1306_select(95, 0, 14, DRV_SSD1306_COLOR_WHITE, play_button_32x32, 32, 32);
 8002b4e:	2320      	movs	r3, #32
 8002b50:	9302      	str	r3, [sp, #8]
 8002b52:	2320      	movs	r3, #32
 8002b54:	9301      	str	r3, [sp, #4]
 8002b56:	4b06      	ldr	r3, [pc, #24]	@ (8002b70 <ssd1306_music_player_menu_play+0x3c>)
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	220e      	movs	r2, #14
 8002b5e:	2100      	movs	r1, #0
 8002b60:	205f      	movs	r0, #95	@ 0x5f
 8002b62:	f000 f8f5 	bl	8002d50 <ssd1306_select>
  drv_ssd1306_update_screen();
 8002b66:	f7fe fdb5 	bl	80016d4 <drv_ssd1306_update_screen>
}
 8002b6a:	bf00      	nop
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	08009f74 	.word	0x08009f74

08002b74 <ssd1306_music_player_menu_pause>:

void ssd1306_music_player_menu_pause(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af04      	add	r7, sp, #16
  ssd1306_icon_transition(95, 0, pause_button_32x32, 32, 32, DRV_SSD1306_COLOR_WHITE);
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	9301      	str	r3, [sp, #4]
 8002b7e:	2320      	movs	r3, #32
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	2320      	movs	r3, #32
 8002b84:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb0 <ssd1306_music_player_menu_pause+0x3c>)
 8002b86:	2100      	movs	r1, #0
 8002b88:	205f      	movs	r0, #95	@ 0x5f
 8002b8a:	f000 f9d1 	bl	8002f30 <ssd1306_icon_transition>
  ssd1306_select(95, 0, 14, DRV_SSD1306_COLOR_WHITE, pause_button_32x32, 32, 32);
 8002b8e:	2320      	movs	r3, #32
 8002b90:	9302      	str	r3, [sp, #8]
 8002b92:	2320      	movs	r3, #32
 8002b94:	9301      	str	r3, [sp, #4]
 8002b96:	4b06      	ldr	r3, [pc, #24]	@ (8002bb0 <ssd1306_music_player_menu_pause+0x3c>)
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	220e      	movs	r2, #14
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	205f      	movs	r0, #95	@ 0x5f
 8002ba2:	f000 f8d5 	bl	8002d50 <ssd1306_select>
  drv_ssd1306_update_screen();
 8002ba6:	f7fe fd95 	bl	80016d4 <drv_ssd1306_update_screen>
}
 8002baa:	bf00      	nop
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	08009ff4 	.word	0x08009ff4

08002bb4 <ssd1306_music_player_menu_once>:

void ssd1306_music_player_menu_once(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af04      	add	r7, sp, #16
  ssd1306_icon_transition(95, 32, once_button_32x32, 32, 32, DRV_SSD1306_COLOR_WHITE);
 8002bba:	2301      	movs	r3, #1
 8002bbc:	9301      	str	r3, [sp, #4]
 8002bbe:	2320      	movs	r3, #32
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	2320      	movs	r3, #32
 8002bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf0 <ssd1306_music_player_menu_once+0x3c>)
 8002bc6:	2120      	movs	r1, #32
 8002bc8:	205f      	movs	r0, #95	@ 0x5f
 8002bca:	f000 f9b1 	bl	8002f30 <ssd1306_icon_transition>
  ssd1306_select(95, 32, 14, DRV_SSD1306_COLOR_WHITE, once_button_32x32, 32, 32);
 8002bce:	2320      	movs	r3, #32
 8002bd0:	9302      	str	r3, [sp, #8]
 8002bd2:	2320      	movs	r3, #32
 8002bd4:	9301      	str	r3, [sp, #4]
 8002bd6:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <ssd1306_music_player_menu_once+0x3c>)
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	2301      	movs	r3, #1
 8002bdc:	220e      	movs	r2, #14
 8002bde:	2120      	movs	r1, #32
 8002be0:	205f      	movs	r0, #95	@ 0x5f
 8002be2:	f000 f8b5 	bl	8002d50 <ssd1306_select>
  drv_ssd1306_update_screen();
 8002be6:	f7fe fd75 	bl	80016d4 <drv_ssd1306_update_screen>
}
 8002bea:	bf00      	nop
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	0800a174 	.word	0x0800a174

08002bf4 <ssd1306_music_player_menu_repeat>:
void ssd1306_music_player_menu_repeat(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af04      	add	r7, sp, #16
  ssd1306_icon_transition(95, 32, repeat_button_32x32, 32, 32, DRV_SSD1306_COLOR_WHITE);
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	9301      	str	r3, [sp, #4]
 8002bfe:	2320      	movs	r3, #32
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	2320      	movs	r3, #32
 8002c04:	4a0a      	ldr	r2, [pc, #40]	@ (8002c30 <ssd1306_music_player_menu_repeat+0x3c>)
 8002c06:	2120      	movs	r1, #32
 8002c08:	205f      	movs	r0, #95	@ 0x5f
 8002c0a:	f000 f991 	bl	8002f30 <ssd1306_icon_transition>
  ssd1306_select(95, 32, 14, DRV_SSD1306_COLOR_WHITE, repeat_button_32x32, 32, 32);
 8002c0e:	2320      	movs	r3, #32
 8002c10:	9302      	str	r3, [sp, #8]
 8002c12:	2320      	movs	r3, #32
 8002c14:	9301      	str	r3, [sp, #4]
 8002c16:	4b06      	ldr	r3, [pc, #24]	@ (8002c30 <ssd1306_music_player_menu_repeat+0x3c>)
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	220e      	movs	r2, #14
 8002c1e:	2120      	movs	r1, #32
 8002c20:	205f      	movs	r0, #95	@ 0x5f
 8002c22:	f000 f895 	bl	8002d50 <ssd1306_select>
  drv_ssd1306_update_screen();
 8002c26:	f7fe fd55 	bl	80016d4 <drv_ssd1306_update_screen>
}
 8002c2a:	bf00      	nop
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	0800a074 	.word	0x0800a074

08002c34 <ssd1306_music_player_menu_randomize>:
void ssd1306_music_player_menu_randomize(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af04      	add	r7, sp, #16
  ssd1306_icon_transition(95, 32, shuffle_button_32x32, 32, 32, DRV_SSD1306_COLOR_WHITE);
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	9301      	str	r3, [sp, #4]
 8002c3e:	2320      	movs	r3, #32
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	2320      	movs	r3, #32
 8002c44:	4a0a      	ldr	r2, [pc, #40]	@ (8002c70 <ssd1306_music_player_menu_randomize+0x3c>)
 8002c46:	2120      	movs	r1, #32
 8002c48:	205f      	movs	r0, #95	@ 0x5f
 8002c4a:	f000 f971 	bl	8002f30 <ssd1306_icon_transition>
  ssd1306_select(95, 32, 14, DRV_SSD1306_COLOR_WHITE, shuffle_button_32x32, 32, 32);
 8002c4e:	2320      	movs	r3, #32
 8002c50:	9302      	str	r3, [sp, #8]
 8002c52:	2320      	movs	r3, #32
 8002c54:	9301      	str	r3, [sp, #4]
 8002c56:	4b06      	ldr	r3, [pc, #24]	@ (8002c70 <ssd1306_music_player_menu_randomize+0x3c>)
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	220e      	movs	r2, #14
 8002c5e:	2120      	movs	r1, #32
 8002c60:	205f      	movs	r0, #95	@ 0x5f
 8002c62:	f000 f875 	bl	8002d50 <ssd1306_select>
  drv_ssd1306_update_screen();
 8002c66:	f7fe fd35 	bl	80016d4 <drv_ssd1306_update_screen>
}
 8002c6a:	bf00      	nop
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	0800a0f4 	.word	0x0800a0f4

08002c74 <ssd1306_draw_menu_button_fsm>:

void ssd1306_draw_menu_button_fsm(uint8_t playback_state, uint8_t play_mode_state)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af02      	add	r7, sp, #8
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	460a      	mov	r2, r1
 8002c7e:	71fb      	strb	r3, [r7, #7]
 8002c80:	4613      	mov	r3, r2
 8002c82:	71bb      	strb	r3, [r7, #6]
  switch (playback_state)
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	2b63      	cmp	r3, #99	@ 0x63
 8002c88:	d01c      	beq.n	8002cc4 <ssd1306_draw_menu_button_fsm+0x50>
 8002c8a:	2b63      	cmp	r3, #99	@ 0x63
 8002c8c:	dc1c      	bgt.n	8002cc8 <ssd1306_draw_menu_button_fsm+0x54>
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <ssd1306_draw_menu_button_fsm+0x24>
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d00b      	beq.n	8002cae <ssd1306_draw_menu_button_fsm+0x3a>
      drv_ssd1306_draw_bitmap(95, 0, play_button_32x32, 32, 32, DRV_SSD1306_COLOR_WHITE);
      break;
    case 99:
      break;
    default:
      break;
 8002c96:	e017      	b.n	8002cc8 <ssd1306_draw_menu_button_fsm+0x54>
      drv_ssd1306_draw_bitmap(95, 0, pause_button_32x32, 32, 32, DRV_SSD1306_COLOR_WHITE);
 8002c98:	2301      	movs	r3, #1
 8002c9a:	9301      	str	r3, [sp, #4]
 8002c9c:	2320      	movs	r3, #32
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	2320      	movs	r3, #32
 8002ca2:	4a26      	ldr	r2, [pc, #152]	@ (8002d3c <ssd1306_draw_menu_button_fsm+0xc8>)
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	205f      	movs	r0, #95	@ 0x5f
 8002ca8:	f7ff f925 	bl	8001ef6 <drv_ssd1306_draw_bitmap>
      break;
 8002cac:	e00d      	b.n	8002cca <ssd1306_draw_menu_button_fsm+0x56>
      drv_ssd1306_draw_bitmap(95, 0, play_button_32x32, 32, 32, DRV_SSD1306_COLOR_WHITE);
 8002cae:	2301      	movs	r3, #1
 8002cb0:	9301      	str	r3, [sp, #4]
 8002cb2:	2320      	movs	r3, #32
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	2320      	movs	r3, #32
 8002cb8:	4a21      	ldr	r2, [pc, #132]	@ (8002d40 <ssd1306_draw_menu_button_fsm+0xcc>)
 8002cba:	2100      	movs	r1, #0
 8002cbc:	205f      	movs	r0, #95	@ 0x5f
 8002cbe:	f7ff f91a 	bl	8001ef6 <drv_ssd1306_draw_bitmap>
      break;
 8002cc2:	e002      	b.n	8002cca <ssd1306_draw_menu_button_fsm+0x56>
      break;
 8002cc4:	bf00      	nop
 8002cc6:	e000      	b.n	8002cca <ssd1306_draw_menu_button_fsm+0x56>
      break;
 8002cc8:	bf00      	nop
  }
  switch (play_mode_state)
 8002cca:	79bb      	ldrb	r3, [r7, #6]
 8002ccc:	2b63      	cmp	r3, #99	@ 0x63
 8002cce:	d02b      	beq.n	8002d28 <ssd1306_draw_menu_button_fsm+0xb4>
 8002cd0:	2b63      	cmp	r3, #99	@ 0x63
 8002cd2:	dc2b      	bgt.n	8002d2c <ssd1306_draw_menu_button_fsm+0xb8>
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d01c      	beq.n	8002d12 <ssd1306_draw_menu_button_fsm+0x9e>
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	dc27      	bgt.n	8002d2c <ssd1306_draw_menu_button_fsm+0xb8>
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <ssd1306_draw_menu_button_fsm+0x72>
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d00b      	beq.n	8002cfc <ssd1306_draw_menu_button_fsm+0x88>
      drv_ssd1306_draw_bitmap(95, 32, shuffle_button_32x32, 32, 32, DRV_SSD1306_COLOR_WHITE);
      break;
    case 99:
      break;
    default:
      break;
 8002ce4:	e022      	b.n	8002d2c <ssd1306_draw_menu_button_fsm+0xb8>
      drv_ssd1306_draw_bitmap(95, 32, once_button_32x32, 32, 32, DRV_SSD1306_COLOR_WHITE);
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	9301      	str	r3, [sp, #4]
 8002cea:	2320      	movs	r3, #32
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	2320      	movs	r3, #32
 8002cf0:	4a14      	ldr	r2, [pc, #80]	@ (8002d44 <ssd1306_draw_menu_button_fsm+0xd0>)
 8002cf2:	2120      	movs	r1, #32
 8002cf4:	205f      	movs	r0, #95	@ 0x5f
 8002cf6:	f7ff f8fe 	bl	8001ef6 <drv_ssd1306_draw_bitmap>
      break;
 8002cfa:	e018      	b.n	8002d2e <ssd1306_draw_menu_button_fsm+0xba>
      drv_ssd1306_draw_bitmap(95, 32, repeat_button_32x32, 32, 32, DRV_SSD1306_COLOR_WHITE);
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	9301      	str	r3, [sp, #4]
 8002d00:	2320      	movs	r3, #32
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	2320      	movs	r3, #32
 8002d06:	4a10      	ldr	r2, [pc, #64]	@ (8002d48 <ssd1306_draw_menu_button_fsm+0xd4>)
 8002d08:	2120      	movs	r1, #32
 8002d0a:	205f      	movs	r0, #95	@ 0x5f
 8002d0c:	f7ff f8f3 	bl	8001ef6 <drv_ssd1306_draw_bitmap>
      break;
 8002d10:	e00d      	b.n	8002d2e <ssd1306_draw_menu_button_fsm+0xba>
      drv_ssd1306_draw_bitmap(95, 32, shuffle_button_32x32, 32, 32, DRV_SSD1306_COLOR_WHITE);
 8002d12:	2301      	movs	r3, #1
 8002d14:	9301      	str	r3, [sp, #4]
 8002d16:	2320      	movs	r3, #32
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	2320      	movs	r3, #32
 8002d1c:	4a0b      	ldr	r2, [pc, #44]	@ (8002d4c <ssd1306_draw_menu_button_fsm+0xd8>)
 8002d1e:	2120      	movs	r1, #32
 8002d20:	205f      	movs	r0, #95	@ 0x5f
 8002d22:	f7ff f8e8 	bl	8001ef6 <drv_ssd1306_draw_bitmap>
      break;
 8002d26:	e002      	b.n	8002d2e <ssd1306_draw_menu_button_fsm+0xba>
      break;
 8002d28:	bf00      	nop
 8002d2a:	e000      	b.n	8002d2e <ssd1306_draw_menu_button_fsm+0xba>
      break;
 8002d2c:	bf00      	nop
  }
  drv_ssd1306_update_screen();
 8002d2e:	f7fe fcd1 	bl	80016d4 <drv_ssd1306_update_screen>
}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	08009ff4 	.word	0x08009ff4
 8002d40:	08009f74 	.word	0x08009f74
 8002d44:	0800a174 	.word	0x0800a174
 8002d48:	0800a074 	.word	0x0800a074
 8002d4c:	0800a0f4 	.word	0x0800a0f4

08002d50 <ssd1306_select>:

void ssd1306_select(uint8_t x, uint8_t y, uint8_t rad, drv_ssd1306_color_t color, const unsigned char* bitmap,
                    uint8_t w, uint8_t h)
{
 8002d50:	b590      	push	{r4, r7, lr}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	4604      	mov	r4, r0
 8002d58:	4608      	mov	r0, r1
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4623      	mov	r3, r4
 8002d60:	71fb      	strb	r3, [r7, #7]
 8002d62:	4603      	mov	r3, r0
 8002d64:	71bb      	strb	r3, [r7, #6]
 8002d66:	460b      	mov	r3, r1
 8002d68:	717b      	strb	r3, [r7, #5]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	713b      	strb	r3, [r7, #4]
  drv_ssd1306_color_t inverted;
  if (color == DRV_SSD1306_COLOR_WHITE)
 8002d6e:	793b      	ldrb	r3, [r7, #4]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d102      	bne.n	8002d7a <ssd1306_select+0x2a>
    inverted = DRV_SSD1306_COLOR_BLACK;
 8002d74:	2300      	movs	r3, #0
 8002d76:	73fb      	strb	r3, [r7, #15]
 8002d78:	e001      	b.n	8002d7e <ssd1306_select+0x2e>
  else
    inverted = DRV_SSD1306_COLOR_WHITE;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	73fb      	strb	r3, [r7, #15]

  drv_ssd1306_fill_circle(x + (w / 2), y + (h / 2), rad, color);
 8002d7e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002d82:	085b      	lsrs	r3, r3, #1
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	4413      	add	r3, r2
 8002d8a:	b2d8      	uxtb	r0, r3
 8002d8c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002d90:	085b      	lsrs	r3, r3, #1
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	79bb      	ldrb	r3, [r7, #6]
 8002d96:	4413      	add	r3, r2
 8002d98:	b2d9      	uxtb	r1, r3
 8002d9a:	793b      	ldrb	r3, [r7, #4]
 8002d9c:	797a      	ldrb	r2, [r7, #5]
 8002d9e:	f7ff f835 	bl	8001e0c <drv_ssd1306_fill_circle>
  drv_ssd1306_draw_bitmap(x, y, bitmap, w, h, inverted);
 8002da2:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002da6:	79b9      	ldrb	r1, [r7, #6]
 8002da8:	79f8      	ldrb	r0, [r7, #7]
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	9301      	str	r3, [sp, #4]
 8002dae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	4613      	mov	r3, r2
 8002db6:	6a3a      	ldr	r2, [r7, #32]
 8002db8:	f7ff f89d 	bl	8001ef6 <drv_ssd1306_draw_bitmap>
  drv_ssd1306_update_screen();
 8002dbc:	f7fe fc8a 	bl	80016d4 <drv_ssd1306_update_screen>
}
 8002dc0:	bf00      	nop
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd90      	pop	{r4, r7, pc}

08002dc8 <ssd1306_deselect>:

void ssd1306_deselect(uint8_t x, uint8_t y, uint8_t rad, drv_ssd1306_color_t color,
                      const unsigned char* bitmap, uint8_t w, uint8_t h)
{
 8002dc8:	b590      	push	{r4, r7, lr}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	4604      	mov	r4, r0
 8002dd0:	4608      	mov	r0, r1
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4623      	mov	r3, r4
 8002dd8:	71fb      	strb	r3, [r7, #7]
 8002dda:	4603      	mov	r3, r0
 8002ddc:	71bb      	strb	r3, [r7, #6]
 8002dde:	460b      	mov	r3, r1
 8002de0:	717b      	strb	r3, [r7, #5]
 8002de2:	4613      	mov	r3, r2
 8002de4:	713b      	strb	r3, [r7, #4]
  drv_ssd1306_color_t inverted;
  if (color == DRV_SSD1306_COLOR_WHITE)
 8002de6:	793b      	ldrb	r3, [r7, #4]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d102      	bne.n	8002df2 <ssd1306_deselect+0x2a>
    inverted = DRV_SSD1306_COLOR_BLACK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	73fb      	strb	r3, [r7, #15]
 8002df0:	e001      	b.n	8002df6 <ssd1306_deselect+0x2e>
  else
    inverted = DRV_SSD1306_COLOR_WHITE;
 8002df2:	2301      	movs	r3, #1
 8002df4:	73fb      	strb	r3, [r7, #15]
  drv_ssd1306_fill_circle(x + (w / 2), y + (h / 2), rad, inverted);
 8002df6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002dfa:	085b      	lsrs	r3, r3, #1
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	4413      	add	r3, r2
 8002e02:	b2d8      	uxtb	r0, r3
 8002e04:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002e08:	085b      	lsrs	r3, r3, #1
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	79bb      	ldrb	r3, [r7, #6]
 8002e0e:	4413      	add	r3, r2
 8002e10:	b2d9      	uxtb	r1, r3
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
 8002e14:	797a      	ldrb	r2, [r7, #5]
 8002e16:	f7fe fff9 	bl	8001e0c <drv_ssd1306_fill_circle>
  drv_ssd1306_draw_bitmap(x, y, bitmap, w, h, color);
 8002e1a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002e1e:	79b9      	ldrb	r1, [r7, #6]
 8002e20:	79f8      	ldrb	r0, [r7, #7]
 8002e22:	793b      	ldrb	r3, [r7, #4]
 8002e24:	9301      	str	r3, [sp, #4]
 8002e26:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	6a3a      	ldr	r2, [r7, #32]
 8002e30:	f7ff f861 	bl	8001ef6 <drv_ssd1306_draw_bitmap>
  drv_ssd1306_update_screen();
 8002e34:	f7fe fc4e 	bl	80016d4 <drv_ssd1306_update_screen>
}
 8002e38:	bf00      	nop
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd90      	pop	{r4, r7, pc}

08002e40 <ssd1306_deselect_fsm>:

void ssd1306_deselect_fsm(uint8_t playback_state, uint8_t play_mode_state)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af04      	add	r7, sp, #16
 8002e46:	4603      	mov	r3, r0
 8002e48:	460a      	mov	r2, r1
 8002e4a:	71fb      	strb	r3, [r7, #7]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	71bb      	strb	r3, [r7, #6]
  switch (playback_state)
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	2b63      	cmp	r3, #99	@ 0x63
 8002e54:	d020      	beq.n	8002e98 <ssd1306_deselect_fsm+0x58>
 8002e56:	2b63      	cmp	r3, #99	@ 0x63
 8002e58:	dc20      	bgt.n	8002e9c <ssd1306_deselect_fsm+0x5c>
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <ssd1306_deselect_fsm+0x24>
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d00d      	beq.n	8002e7e <ssd1306_deselect_fsm+0x3e>
      ssd1306_deselect(95, 0, 14, DRV_SSD1306_COLOR_WHITE, play_button_32x32, 32, 32);
      break;
    case 99:
      break;
    default:
      break;
 8002e62:	e01b      	b.n	8002e9c <ssd1306_deselect_fsm+0x5c>
      ssd1306_deselect(95, 0, 14, DRV_SSD1306_COLOR_WHITE, pause_button_32x32, 32, 32);
 8002e64:	2320      	movs	r3, #32
 8002e66:	9302      	str	r3, [sp, #8]
 8002e68:	2320      	movs	r3, #32
 8002e6a:	9301      	str	r3, [sp, #4]
 8002e6c:	4b2b      	ldr	r3, [pc, #172]	@ (8002f1c <ssd1306_deselect_fsm+0xdc>)
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	2301      	movs	r3, #1
 8002e72:	220e      	movs	r2, #14
 8002e74:	2100      	movs	r1, #0
 8002e76:	205f      	movs	r0, #95	@ 0x5f
 8002e78:	f7ff ffa6 	bl	8002dc8 <ssd1306_deselect>
      break;
 8002e7c:	e00f      	b.n	8002e9e <ssd1306_deselect_fsm+0x5e>
      ssd1306_deselect(95, 0, 14, DRV_SSD1306_COLOR_WHITE, play_button_32x32, 32, 32);
 8002e7e:	2320      	movs	r3, #32
 8002e80:	9302      	str	r3, [sp, #8]
 8002e82:	2320      	movs	r3, #32
 8002e84:	9301      	str	r3, [sp, #4]
 8002e86:	4b26      	ldr	r3, [pc, #152]	@ (8002f20 <ssd1306_deselect_fsm+0xe0>)
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	220e      	movs	r2, #14
 8002e8e:	2100      	movs	r1, #0
 8002e90:	205f      	movs	r0, #95	@ 0x5f
 8002e92:	f7ff ff99 	bl	8002dc8 <ssd1306_deselect>
      break;
 8002e96:	e002      	b.n	8002e9e <ssd1306_deselect_fsm+0x5e>
      break;
 8002e98:	bf00      	nop
 8002e9a:	e000      	b.n	8002e9e <ssd1306_deselect_fsm+0x5e>
      break;
 8002e9c:	bf00      	nop
  }
  switch (play_mode_state)
 8002e9e:	79bb      	ldrb	r3, [r7, #6]
 8002ea0:	2b63      	cmp	r3, #99	@ 0x63
 8002ea2:	d031      	beq.n	8002f08 <ssd1306_deselect_fsm+0xc8>
 8002ea4:	2b63      	cmp	r3, #99	@ 0x63
 8002ea6:	dc31      	bgt.n	8002f0c <ssd1306_deselect_fsm+0xcc>
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d020      	beq.n	8002eee <ssd1306_deselect_fsm+0xae>
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	dc2d      	bgt.n	8002f0c <ssd1306_deselect_fsm+0xcc>
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d002      	beq.n	8002eba <ssd1306_deselect_fsm+0x7a>
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d00d      	beq.n	8002ed4 <ssd1306_deselect_fsm+0x94>
      ssd1306_deselect(95, 32, 14, DRV_SSD1306_COLOR_WHITE, shuffle_button_32x32, 32, 32);
      break;
    case 99:
      break;
    default:
      break;
 8002eb8:	e028      	b.n	8002f0c <ssd1306_deselect_fsm+0xcc>
      ssd1306_deselect(95, 32, 14, DRV_SSD1306_COLOR_WHITE, once_button_32x32, 32, 32);
 8002eba:	2320      	movs	r3, #32
 8002ebc:	9302      	str	r3, [sp, #8]
 8002ebe:	2320      	movs	r3, #32
 8002ec0:	9301      	str	r3, [sp, #4]
 8002ec2:	4b18      	ldr	r3, [pc, #96]	@ (8002f24 <ssd1306_deselect_fsm+0xe4>)
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	220e      	movs	r2, #14
 8002eca:	2120      	movs	r1, #32
 8002ecc:	205f      	movs	r0, #95	@ 0x5f
 8002ece:	f7ff ff7b 	bl	8002dc8 <ssd1306_deselect>
      break;
 8002ed2:	e01c      	b.n	8002f0e <ssd1306_deselect_fsm+0xce>
      ssd1306_deselect(95, 32, 14, DRV_SSD1306_COLOR_WHITE, repeat_button_32x32, 32, 32);
 8002ed4:	2320      	movs	r3, #32
 8002ed6:	9302      	str	r3, [sp, #8]
 8002ed8:	2320      	movs	r3, #32
 8002eda:	9301      	str	r3, [sp, #4]
 8002edc:	4b12      	ldr	r3, [pc, #72]	@ (8002f28 <ssd1306_deselect_fsm+0xe8>)
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	220e      	movs	r2, #14
 8002ee4:	2120      	movs	r1, #32
 8002ee6:	205f      	movs	r0, #95	@ 0x5f
 8002ee8:	f7ff ff6e 	bl	8002dc8 <ssd1306_deselect>
      break;
 8002eec:	e00f      	b.n	8002f0e <ssd1306_deselect_fsm+0xce>
      ssd1306_deselect(95, 32, 14, DRV_SSD1306_COLOR_WHITE, shuffle_button_32x32, 32, 32);
 8002eee:	2320      	movs	r3, #32
 8002ef0:	9302      	str	r3, [sp, #8]
 8002ef2:	2320      	movs	r3, #32
 8002ef4:	9301      	str	r3, [sp, #4]
 8002ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8002f2c <ssd1306_deselect_fsm+0xec>)
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	2301      	movs	r3, #1
 8002efc:	220e      	movs	r2, #14
 8002efe:	2120      	movs	r1, #32
 8002f00:	205f      	movs	r0, #95	@ 0x5f
 8002f02:	f7ff ff61 	bl	8002dc8 <ssd1306_deselect>
      break;
 8002f06:	e002      	b.n	8002f0e <ssd1306_deselect_fsm+0xce>
      break;
 8002f08:	bf00      	nop
 8002f0a:	e000      	b.n	8002f0e <ssd1306_deselect_fsm+0xce>
      break;
 8002f0c:	bf00      	nop
  }
  drv_ssd1306_update_screen();
 8002f0e:	f7fe fbe1 	bl	80016d4 <drv_ssd1306_update_screen>
}
 8002f12:	bf00      	nop
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	08009ff4 	.word	0x08009ff4
 8002f20:	08009f74 	.word	0x08009f74
 8002f24:	0800a174 	.word	0x0800a174
 8002f28:	0800a074 	.word	0x0800a074
 8002f2c:	0800a0f4 	.word	0x0800a0f4

08002f30 <ssd1306_icon_transition>:

void ssd1306_icon_transition(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h,
                             drv_ssd1306_color_t color)
{
 8002f30:	b590      	push	{r4, r7, lr}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af02      	add	r7, sp, #8
 8002f36:	603a      	str	r2, [r7, #0]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	71fb      	strb	r3, [r7, #7]
 8002f3e:	460b      	mov	r3, r1
 8002f40:	71bb      	strb	r3, [r7, #6]
 8002f42:	4613      	mov	r3, r2
 8002f44:	717b      	strb	r3, [r7, #5]
  drv_ssd1306_color_t inverted;
  if (color == DRV_SSD1306_COLOR_WHITE)
 8002f46:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d102      	bne.n	8002f54 <ssd1306_icon_transition+0x24>
    inverted = DRV_SSD1306_COLOR_BLACK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	73fb      	strb	r3, [r7, #15]
 8002f52:	e001      	b.n	8002f58 <ssd1306_icon_transition+0x28>
  else
    inverted = DRV_SSD1306_COLOR_WHITE;
 8002f54:	2301      	movs	r3, #1
 8002f56:	73fb      	strb	r3, [r7, #15]
  drv_ssd1306_fill_rectangle(x, y, x + w, y + h, inverted);
 8002f58:	79fa      	ldrb	r2, [r7, #7]
 8002f5a:	797b      	ldrb	r3, [r7, #5]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	b2dc      	uxtb	r4, r3
 8002f60:	79ba      	ldrb	r2, [r7, #6]
 8002f62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f66:	4413      	add	r3, r2
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	79b9      	ldrb	r1, [r7, #6]
 8002f6c:	79f8      	ldrb	r0, [r7, #7]
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	4613      	mov	r3, r2
 8002f74:	4622      	mov	r2, r4
 8002f76:	f7fe fefb 	bl	8001d70 <drv_ssd1306_fill_rectangle>
  drv_ssd1306_draw_bitmap(x, y, bitmap, w, h, color);
 8002f7a:	797a      	ldrb	r2, [r7, #5]
 8002f7c:	79b9      	ldrb	r1, [r7, #6]
 8002f7e:	79f8      	ldrb	r0, [r7, #7]
 8002f80:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002f84:	9301      	str	r3, [sp, #4]
 8002f86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	f7fe ffb1 	bl	8001ef6 <drv_ssd1306_draw_bitmap>
  drv_ssd1306_update_screen();
 8002f94:	f7fe fb9e 	bl	80016d4 <drv_ssd1306_update_screen>
}
 8002f98:	bf00      	nop
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd90      	pop	{r4, r7, pc}

08002fa0 <ssd1306_scroll_string>:

void ssd1306_scroll_string(const char* str, uint8_t x, uint8_t y, drv_ssd1306_font_t font,
                           drv_ssd1306_color_t color, uint8_t screen_state)
{
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	b590      	push	{r4, r7, lr}
 8002fa4:	b0a9      	sub	sp, #164	@ 0xa4
 8002fa6:	af02      	add	r7, sp, #8
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002fae:	460b      	mov	r3, r1
 8002fb0:	70fb      	strb	r3, [r7, #3]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	70bb      	strb	r3, [r7, #2]
  int  len = strlen(str);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7fd f912 	bl	80001e0 <strlen>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  char buffer[128];  // Fixed-size buffer

  if (len > 118)
 8002fc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fc6:	2b76      	cmp	r3, #118	@ 0x76
 8002fc8:	f300 8082 	bgt.w	80030d0 <ssd1306_scroll_string+0x130>
  {          // Check if string is too long for buffer
    return;  // If so, return without doing anything
  }

  strcpy(buffer, str);   // Copy original string to buffer
 8002fcc:	f107 030c 	add.w	r3, r7, #12
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f004 fd92 	bl	8007afc <strcpy>
  strcat(buffer, "  ");  // Add 2 spaces at the end
 8002fd8:	f107 030c 	add.w	r3, r7, #12
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7fd f8ff 	bl	80001e0 <strlen>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	f107 030c 	add.w	r3, r7, #12
 8002fea:	4413      	add	r3, r2
 8002fec:	4a3d      	ldr	r2, [pc, #244]	@ (80030e4 <ssd1306_scroll_string+0x144>)
 8002fee:	8811      	ldrh	r1, [r2, #0]
 8002ff0:	7892      	ldrb	r2, [r2, #2]
 8002ff2:	8019      	strh	r1, [r3, #0]
 8002ff4:	709a      	strb	r2, [r3, #2]

  // Loop while scroll_flag is active
  while (ssd1306_get_scroll_flag())
 8002ff6:	e065      	b.n	80030c4 <ssd1306_scroll_string+0x124>
  {
    for (int i = 0; i < len + 2; i++)
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002ffe:	e05a      	b.n	80030b6 <ssd1306_scroll_string+0x116>
    {
      drv_ssd1306_set_cursor(x, y);  // Reset cursor to the beginning
 8003000:	78ba      	ldrb	r2, [r7, #2]
 8003002:	78fb      	ldrb	r3, [r7, #3]
 8003004:	4611      	mov	r1, r2
 8003006:	4618      	mov	r0, r3
 8003008:	f7fe fbc6 	bl	8001798 <drv_ssd1306_set_cursor>
      // Write up to 21 characters
      for (int j = 0; j < 21 && buffer[i + j] != '\0'; j++)
 800300c:	2300      	movs	r3, #0
 800300e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003012:	e03a      	b.n	800308a <ssd1306_scroll_string+0xea>
      {
        // If not scrolling, redraw the title at music player state
        if (!ssd1306_get_scroll_flag())
 8003014:	f000 f86a 	bl	80030ec <ssd1306_get_scroll_flag>
 8003018:	4603      	mov	r3, r0
 800301a:	f083 0301 	eor.w	r3, r3, #1
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d019      	beq.n	8003058 <ssd1306_scroll_string+0xb8>
        {
          if (screen_state == 2)
 8003024:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 8003028:	2b02      	cmp	r3, #2
 800302a:	d153      	bne.n	80030d4 <ssd1306_scroll_string+0x134>
          {
            drv_ssd1306_fill_rectangle(x, y, x + 15, y + 15, DRV_SSD1306_COLOR_BLACK);
 800302c:	78fb      	ldrb	r3, [r7, #3]
 800302e:	330f      	adds	r3, #15
 8003030:	b2da      	uxtb	r2, r3
 8003032:	78bb      	ldrb	r3, [r7, #2]
 8003034:	330f      	adds	r3, #15
 8003036:	b2db      	uxtb	r3, r3
 8003038:	78b9      	ldrb	r1, [r7, #2]
 800303a:	78f8      	ldrb	r0, [r7, #3]
 800303c:	2400      	movs	r4, #0
 800303e:	9400      	str	r4, [sp, #0]
 8003040:	f7fe fe96 	bl	8001d70 <drv_ssd1306_fill_rectangle>
            drv_ssd1306_write_string(str, font_6x8, DRV_SSD1306_COLOR_WHITE, 2);
 8003044:	4b28      	ldr	r3, [pc, #160]	@ (80030e8 <ssd1306_scroll_string+0x148>)
 8003046:	2202      	movs	r2, #2
 8003048:	9201      	str	r2, [sp, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	9200      	str	r2, [sp, #0]
 800304e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7fe fcd3 	bl	80019fc <drv_ssd1306_write_string>
          }
          return;
 8003056:	e03d      	b.n	80030d4 <ssd1306_scroll_string+0x134>
        }
        drv_ssd1306_write_char(buffer[i + j], font, color, screen_state);
 8003058:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800305c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003060:	4413      	add	r3, r2
 8003062:	3398      	adds	r3, #152	@ 0x98
 8003064:	443b      	add	r3, r7
 8003066:	f813 0c8c 	ldrb.w	r0, [r3, #-140]
 800306a:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 800306e:	9301      	str	r3, [sp, #4]
 8003070:	f897 30b8 	ldrb.w	r3, [r7, #184]	@ 0xb8
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800307a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800307c:	f7fe fbfc 	bl	8001878 <drv_ssd1306_write_char>
      for (int j = 0; j < 21 && buffer[i + j] != '\0'; j++)
 8003080:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003084:	3301      	adds	r3, #1
 8003086:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800308a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800308e:	2b14      	cmp	r3, #20
 8003090:	dc0a      	bgt.n	80030a8 <ssd1306_scroll_string+0x108>
 8003092:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003096:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800309a:	4413      	add	r3, r2
 800309c:	3398      	adds	r3, #152	@ 0x98
 800309e:	443b      	add	r3, r7
 80030a0:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1b5      	bne.n	8003014 <ssd1306_scroll_string+0x74>
      }
      drv_ssd1306_update_screen();  // Update the screen
 80030a8:	f7fe fb14 	bl	80016d4 <drv_ssd1306_update_screen>
    for (int i = 0; i < len + 2; i++)
 80030ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030b0:	3301      	adds	r3, #1
 80030b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80030b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030ba:	3301      	adds	r3, #1
 80030bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80030c0:	429a      	cmp	r2, r3
 80030c2:	dd9d      	ble.n	8003000 <ssd1306_scroll_string+0x60>
  while (ssd1306_get_scroll_flag())
 80030c4:	f000 f812 	bl	80030ec <ssd1306_get_scroll_flag>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d194      	bne.n	8002ff8 <ssd1306_scroll_string+0x58>
 80030ce:	e002      	b.n	80030d6 <ssd1306_scroll_string+0x136>
    return;  // If so, return without doing anything
 80030d0:	bf00      	nop
 80030d2:	e000      	b.n	80030d6 <ssd1306_scroll_string+0x136>
          return;
 80030d4:	bf00      	nop
    }
  }
}
 80030d6:	379c      	adds	r7, #156	@ 0x9c
 80030d8:	46bd      	mov	sp, r7
 80030da:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80030de:	b002      	add	sp, #8
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	08009968 	.word	0x08009968
 80030e8:	0800b050 	.word	0x0800b050

080030ec <ssd1306_get_scroll_flag>:

bool ssd1306_get_scroll_flag(void) { return scroll_flag; }
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	4b03      	ldr	r3, [pc, #12]	@ (8003100 <ssd1306_get_scroll_flag+0x14>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	4618      	mov	r0, r3
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	200006cc 	.word	0x200006cc

08003104 <ssd1306_set_scroll_flag>:

void ssd1306_set_scroll_flag(bool status) { scroll_flag = status; }
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	4603      	mov	r3, r0
 800310c:	71fb      	strb	r3, [r7, #7]
 800310e:	4a04      	ldr	r2, [pc, #16]	@ (8003120 <ssd1306_set_scroll_flag+0x1c>)
 8003110:	79fb      	ldrb	r3, [r7, #7]
 8003112:	7013      	strb	r3, [r2, #0]
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	200006cc 	.word	0x200006cc

08003124 <get_song_name_info>:
/* Function definitions ----------------------------------------------- */

uint8_t get_list_song_size(void) { return LIST_SONG_QUANTITY; }

const char *get_song_name_info(uint8_t index)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	71fb      	strb	r3, [r7, #7]
  if (index >= LIST_SONG_QUANTITY)
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	2b09      	cmp	r3, #9
 8003132:	d901      	bls.n	8003138 <get_song_name_info+0x14>
  {
    return NULL;  // Return NULL if index is out of range
 8003134:	2300      	movs	r3, #0
 8003136:	e003      	b.n	8003140 <get_song_name_info+0x1c>
  }
  return list_song_index[index].song_name;
 8003138:	79fb      	ldrb	r3, [r7, #7]
 800313a:	4a04      	ldr	r2, [pc, #16]	@ (800314c <get_song_name_info+0x28>)
 800313c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
}
 8003140:	4618      	mov	r0, r3
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	0800b068 	.word	0x0800b068

08003150 <system_display_init>:

/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */
system_display_error_t system_display_init(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  if (!(drv_ssd1306_init()))
 8003154:	f7fe f9ee 	bl	8001534 <drv_ssd1306_init>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <system_display_init+0x12>
    return SYSTEM_DISPLAY_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <system_display_init+0x14>
  return SYSTEM_DISPLAY_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	bd80      	pop	{r7, pc}

08003168 <system_display_boot_state>:

system_display_error_t system_display_boot_state(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  drv_ssd1306_fill(DRV_SSD1306_COLOR_BLACK);
 800316c:	2000      	movs	r0, #0
 800316e:	f7fe fa97 	bl	80016a0 <drv_ssd1306_fill>
  return SYSTEM_DISPLAY_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	bd80      	pop	{r7, pc}

08003178 <system_display_wait_state>:

system_display_error_t system_display_wait_state(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  ssd1306_starting_screen();
 800317c:	f7ff fb5c 	bl	8002838 <ssd1306_starting_screen>
  return SYSTEM_DISPLAY_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	bd80      	pop	{r7, pc}

08003186 <system_display_playlist_state>:

system_display_error_t system_display_playlist_state(uint16_t song_id, int volume)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	4603      	mov	r3, r0
 800318e:	6039      	str	r1, [r7, #0]
 8003190:	80fb      	strh	r3, [r7, #6]
  ssd1306_playlist_menu(song_id, volume);
 8003192:	88fb      	ldrh	r3, [r7, #6]
 8003194:	6839      	ldr	r1, [r7, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff fb66 	bl	8002868 <ssd1306_playlist_menu>
  return SYSTEM_DISPLAY_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <system_display_music_player_default_state>:

system_display_error_t system_display_music_player_default_state(uint16_t song_id, uint8_t playback_state,
                                                                 uint8_t play_mode_state)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	4603      	mov	r3, r0
 80031ae:	80fb      	strh	r3, [r7, #6]
 80031b0:	460b      	mov	r3, r1
 80031b2:	717b      	strb	r3, [r7, #5]
 80031b4:	4613      	mov	r3, r2
 80031b6:	713b      	strb	r3, [r7, #4]
  ssd1306_music_player_menu_default(song_id, playback_state, play_mode_state);
 80031b8:	793a      	ldrb	r2, [r7, #4]
 80031ba:	7979      	ldrb	r1, [r7, #5]
 80031bc:	88fb      	ldrh	r3, [r7, #6]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff fc1c 	bl	80029fc <ssd1306_music_player_menu_default>
  return SYSTEM_DISPLAY_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <system_display_music_player_title_state>:

system_display_error_t system_display_music_player_title_state(uint16_t song_id, int volume)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b082      	sub	sp, #8
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	4603      	mov	r3, r0
 80031d6:	6039      	str	r1, [r7, #0]
 80031d8:	80fb      	strh	r3, [r7, #6]
  ssd1306_music_player_menu_title(song_id, volume);
 80031da:	88fb      	ldrh	r3, [r7, #6]
 80031dc:	6839      	ldr	r1, [r7, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff fc56 	bl	8002a90 <ssd1306_music_player_menu_title>
  return SYSTEM_DISPLAY_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <system_display_music_player_playback_state>:

system_display_error_t system_display_music_player_playback_state(uint8_t state)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b082      	sub	sp, #8
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	4603      	mov	r3, r0
 80031f6:	71fb      	strb	r3, [r7, #7]
  switch (state)
 80031f8:	79fb      	ldrb	r3, [r7, #7]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d002      	beq.n	8003204 <system_display_music_player_playback_state+0x16>
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d003      	beq.n	800320a <system_display_music_player_playback_state+0x1c>
      break;
    case 1:
      ssd1306_music_player_menu_play();
      break;
    default:
      break;
 8003202:	e005      	b.n	8003210 <system_display_music_player_playback_state+0x22>
      ssd1306_music_player_menu_pause();
 8003204:	f7ff fcb6 	bl	8002b74 <ssd1306_music_player_menu_pause>
      break;
 8003208:	e002      	b.n	8003210 <system_display_music_player_playback_state+0x22>
      ssd1306_music_player_menu_play();
 800320a:	f7ff fc93 	bl	8002b34 <ssd1306_music_player_menu_play>
      break;
 800320e:	bf00      	nop
  }
  return SYSTEM_DISPLAY_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <system_display_music_player_play_mode_state>:

system_display_error_t system_display_music_player_play_mode_state(uint8_t state)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	4603      	mov	r3, r0
 8003222:	71fb      	strb	r3, [r7, #7]
  switch (state)
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d00c      	beq.n	8003244 <system_display_music_player_play_mode_state+0x2a>
 800322a:	2b02      	cmp	r3, #2
 800322c:	dc0c      	bgt.n	8003248 <system_display_music_player_play_mode_state+0x2e>
 800322e:	2b00      	cmp	r3, #0
 8003230:	d002      	beq.n	8003238 <system_display_music_player_play_mode_state+0x1e>
 8003232:	2b01      	cmp	r3, #1
 8003234:	d003      	beq.n	800323e <system_display_music_player_play_mode_state+0x24>
      ssd1306_music_player_menu_repeat();
      break;
    case 2:
      ssd1306_music_player_menu_randomize();
    default:
      break;
 8003236:	e007      	b.n	8003248 <system_display_music_player_play_mode_state+0x2e>
      ssd1306_music_player_menu_once();
 8003238:	f7ff fcbc 	bl	8002bb4 <ssd1306_music_player_menu_once>
      break;
 800323c:	e005      	b.n	800324a <system_display_music_player_play_mode_state+0x30>
      ssd1306_music_player_menu_repeat();
 800323e:	f7ff fcd9 	bl	8002bf4 <ssd1306_music_player_menu_repeat>
      break;
 8003242:	e002      	b.n	800324a <system_display_music_player_play_mode_state+0x30>
      ssd1306_music_player_menu_randomize();
 8003244:	f7ff fcf6 	bl	8002c34 <ssd1306_music_player_menu_randomize>
      break;
 8003248:	bf00      	nop
  }
  return SYSTEM_DISPLAY_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <system_manager_init>:
 */
static system_state_t system_manager_check_state();

/* Function definitions ----------------------------------------------- */
system_manager_error_t system_manager_init(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  // Initialize the display, dfplayer and timer
  system_display_init();
 8003258:	f7ff ff7a 	bl	8003150 <system_display_init>
  dfplayer_init();
 800325c:	f7fe f8db 	bl	8001416 <dfplayer_init>
  bsp_timer_init();
 8003260:	f7fd ff84 	bl	800116c <bsp_timer_init>
  rotation_sensor_init();
 8003264:	f7fe f93c 	bl	80014e0 <rotation_sensor_init>
  system_sound_volume = rotation_sensor_get_volume();
 8003268:	f7fe f948 	bl	80014fc <rotation_sensor_get_volume>
 800326c:	4603      	mov	r3, r0
 800326e:	461a      	mov	r2, r3
 8003270:	4b02      	ldr	r3, [pc, #8]	@ (800327c <system_manager_init+0x28>)
 8003272:	601a      	str	r2, [r3, #0]

  return SYSTEM_MANAGER_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	200000b4 	.word	0x200000b4

08003280 <system_manager_run>:

system_manager_error_t system_manager_run(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
  system_manager_error_t status             = SYSTEM_MANAGER_OK;
 8003286:	2300      	movs	r3, #0
 8003288:	71fb      	strb	r3, [r7, #7]
  system_state_t         system_state_check = BOOT_STATE;
 800328a:	2301      	movs	r3, #1
 800328c:	71bb      	strb	r3, [r7, #6]

  while (status == SYSTEM_MANAGER_OK)
 800328e:	e04b      	b.n	8003328 <system_manager_run+0xa8>
  {
    // Check the current state of the system
    system_state_check = system_manager_check_state();
 8003290:	f000 f85a 	bl	8003348 <system_manager_check_state>
 8003294:	4603      	mov	r3, r0
 8003296:	71bb      	strb	r3, [r7, #6]

    // Update the display based on the current state
    switch (system_state_check)
 8003298:	79bb      	ldrb	r3, [r7, #6]
 800329a:	3b01      	subs	r3, #1
 800329c:	2b06      	cmp	r3, #6
 800329e:	d842      	bhi.n	8003326 <system_manager_run+0xa6>
 80032a0:	a201      	add	r2, pc, #4	@ (adr r2, 80032a8 <system_manager_run+0x28>)
 80032a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a6:	bf00      	nop
 80032a8:	080032c5 	.word	0x080032c5
 80032ac:	080032cb 	.word	0x080032cb
 80032b0:	080032d1 	.word	0x080032d1
 80032b4:	080032e5 	.word	0x080032e5
 80032b8:	080032fb 	.word	0x080032fb
 80032bc:	0800330f 	.word	0x0800330f
 80032c0:	0800331b 	.word	0x0800331b
    {
      case BOOT_STATE:
        system_display_boot_state();
 80032c4:	f7ff ff50 	bl	8003168 <system_display_boot_state>
        break;
 80032c8:	e02e      	b.n	8003328 <system_manager_run+0xa8>

      case WAIT_STATE:
        system_display_wait_state();
 80032ca:	f7ff ff55 	bl	8003178 <system_display_wait_state>
        break;
 80032ce:	e02b      	b.n	8003328 <system_manager_run+0xa8>

      case PLAYLIST_STATE:
        system_display_playlist_state(system_song_id, system_sound_volume);
 80032d0:	4b19      	ldr	r3, [pc, #100]	@ (8003338 <system_manager_run+0xb8>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	4a19      	ldr	r2, [pc, #100]	@ (800333c <system_manager_run+0xbc>)
 80032d8:	6812      	ldr	r2, [r2, #0]
 80032da:	4611      	mov	r1, r2
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff52 	bl	8003186 <system_display_playlist_state>
        break;
 80032e2:	e021      	b.n	8003328 <system_manager_run+0xa8>

      case MUSIC_PLAYER_DEFAULT_STATE:
        system_display_music_player_default_state(system_song_id, system_playback_state,
 80032e4:	4b14      	ldr	r3, [pc, #80]	@ (8003338 <system_manager_run+0xb8>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	4a15      	ldr	r2, [pc, #84]	@ (8003340 <system_manager_run+0xc0>)
 80032ec:	7811      	ldrb	r1, [r2, #0]
 80032ee:	4a15      	ldr	r2, [pc, #84]	@ (8003344 <system_manager_run+0xc4>)
 80032f0:	7812      	ldrb	r2, [r2, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff ff57 	bl	80031a6 <system_display_music_player_default_state>
                                                  system_play_mode_state);
        break;
 80032f8:	e016      	b.n	8003328 <system_manager_run+0xa8>

      case MUSIC_PLAYER_TITLE_STATE:
        system_display_music_player_title_state(system_song_id, system_sound_volume);
 80032fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003338 <system_manager_run+0xb8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	b29b      	uxth	r3, r3
 8003300:	4a0e      	ldr	r2, [pc, #56]	@ (800333c <system_manager_run+0xbc>)
 8003302:	6812      	ldr	r2, [r2, #0]
 8003304:	4611      	mov	r1, r2
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff ff61 	bl	80031ce <system_display_music_player_title_state>
        break;
 800330c:	e00c      	b.n	8003328 <system_manager_run+0xa8>

      case MUSIC_PLAYER_PLAYBACK_STATE:
        system_display_music_player_playback_state(system_playback_state);
 800330e:	4b0c      	ldr	r3, [pc, #48]	@ (8003340 <system_manager_run+0xc0>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff ff6b 	bl	80031ee <system_display_music_player_playback_state>
        break;
 8003318:	e006      	b.n	8003328 <system_manager_run+0xa8>

      case MUSIC_PLAYER_PlAY_MODE_STATE:
        system_display_music_player_play_mode_state(system_play_mode_state);
 800331a:	4b0a      	ldr	r3, [pc, #40]	@ (8003344 <system_manager_run+0xc4>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff ff7b 	bl	800321a <system_display_music_player_play_mode_state>
        break;
 8003324:	e000      	b.n	8003328 <system_manager_run+0xa8>

      default:
        break;
 8003326:	bf00      	nop
  while (status == SYSTEM_MANAGER_OK)
 8003328:	79fb      	ldrb	r3, [r7, #7]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0b0      	beq.n	8003290 <system_manager_run+0x10>
    }
  }

  return status;
 800332e:	79fb      	ldrb	r3, [r7, #7]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	200006d0 	.word	0x200006d0
 800333c:	200000b4 	.word	0x200000b4
 8003340:	200006d5 	.word	0x200006d5
 8003344:	200006d6 	.word	0x200006d6

08003348 <system_manager_check_state>:

/* Private definitions ----------------------------------------------- */

static system_state_t system_manager_check_state()
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  // Check current volume from rotation sensor
  if (rotation_sensor_detect_volume_change()){
 800334c:	f7fe f8ce 	bl	80014ec <rotation_sensor_detect_volume_change>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00b      	beq.n	800336e <system_manager_check_state+0x26>
	system_sound_volume = rotation_sensor_get_volume();
 8003356:	f7fe f8d1 	bl	80014fc <rotation_sensor_get_volume>
 800335a:	4603      	mov	r3, r0
 800335c:	461a      	mov	r2, r3
 800335e:	4ba2      	ldr	r3, [pc, #648]	@ (80035e8 <system_manager_check_state+0x2a0>)
 8003360:	601a      	str	r2, [r3, #0]
  	dfplayer_adjust_volume(system_sound_volume);
 8003362:	4ba1      	ldr	r3, [pc, #644]	@ (80035e8 <system_manager_check_state+0x2a0>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	b2db      	uxtb	r3, r3
 8003368:	4618      	mov	r0, r3
 800336a:	f7fe f845 	bl	80013f8 <dfplayer_adjust_volume>
  }
  rotation_sensor_init();
 800336e:	f7fe f8b7 	bl	80014e0 <rotation_sensor_init>

  switch (system_state)
 8003372:	4b9e      	ldr	r3, [pc, #632]	@ (80035ec <system_manager_check_state+0x2a4>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	3b01      	subs	r3, #1
 8003378:	2b06      	cmp	r3, #6
 800337a:	f200 81ba 	bhi.w	80036f2 <system_manager_check_state+0x3aa>
 800337e:	a201      	add	r2, pc, #4	@ (adr r2, 8003384 <system_manager_check_state+0x3c>)
 8003380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003384:	080033a1 	.word	0x080033a1
 8003388:	080033b7 	.word	0x080033b7
 800338c:	080033cd 	.word	0x080033cd
 8003390:	080034cd 	.word	0x080034cd
 8003394:	080034d5 	.word	0x080034d5
 8003398:	080035c1 	.word	0x080035c1
 800339c:	0800365d 	.word	0x0800365d
  {
    case BOOT_STATE:
      // Transition to WAIT_STATE if button 1 is held
      if (is_button_held(1))
 80033a0:	2001      	movs	r0, #1
 80033a2:	f7fd ffa1 	bl	80012e8 <is_button_held>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 81a4 	beq.w	80036f6 <system_manager_check_state+0x3ae>
      {
        system_state = WAIT_STATE;
 80033ae:	4b8f      	ldr	r3, [pc, #572]	@ (80035ec <system_manager_check_state+0x2a4>)
 80033b0:	2202      	movs	r2, #2
 80033b2:	701a      	strb	r2, [r3, #0]
      }
      break;
 80033b4:	e19f      	b.n	80036f6 <system_manager_check_state+0x3ae>

    case WAIT_STATE:
      // Transition to PLAYLIST_STATE if button 1 is pressed
      if (is_button_pressed(1))
 80033b6:	2001      	movs	r0, #1
 80033b8:	f7fd ff72 	bl	80012a0 <is_button_pressed>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 819b 	beq.w	80036fa <system_manager_check_state+0x3b2>
      {
        system_state = PLAYLIST_STATE;
 80033c4:	4b89      	ldr	r3, [pc, #548]	@ (80035ec <system_manager_check_state+0x2a4>)
 80033c6:	2203      	movs	r2, #3
 80033c8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80033ca:	e196      	b.n	80036fa <system_manager_check_state+0x3b2>

    case PLAYLIST_STATE:
      // Transition to MUSIC_PLAYER_DEFAULT_STATE if button 1 is pressed
      //ssd1306_set_scroll_flag(1);
      if (is_button_pressed(1))
 80033cc:	2001      	movs	r0, #1
 80033ce:	f7fd ff67 	bl	80012a0 <is_button_pressed>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d022      	beq.n	800341e <system_manager_check_state+0xd6>
      {
        system_state = MUSIC_PLAYER_DEFAULT_STATE;
 80033d8:	4b84      	ldr	r3, [pc, #528]	@ (80035ec <system_manager_check_state+0x2a4>)
 80033da:	2204      	movs	r2, #4
 80033dc:	701a      	strb	r2, [r3, #0]
        //ssd1306_set_scroll_flag(0);
        if (system_play_mode_state == 0)
 80033de:	4b84      	ldr	r3, [pc, #528]	@ (80035f0 <system_manager_check_state+0x2a8>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <system_manager_check_state+0xa2>
        	dfplayer_normal_mode_play();
 80033e6:	f7fd ffef 	bl	80013c8 <dfplayer_normal_mode_play>
        if (system_play_mode_state == 1)
 80033ea:	4b81      	ldr	r3, [pc, #516]	@ (80035f0 <system_manager_check_state+0x2a8>)
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <system_manager_check_state+0xae>
        	dfplayer_repeat_mode_play();
 80033f2:	f7fd fff1 	bl	80013d8 <dfplayer_repeat_mode_play>
        if (system_play_mode_state == 2)
 80033f6:	4b7e      	ldr	r3, [pc, #504]	@ (80035f0 <system_manager_check_state+0x2a8>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d104      	bne.n	8003408 <system_manager_check_state+0xc0>
        {
        	dfplayer_normal_mode_play();
 80033fe:	f7fd ffe3 	bl	80013c8 <dfplayer_normal_mode_play>
        	system_play_mode_state = 0;
 8003402:	4b7b      	ldr	r3, [pc, #492]	@ (80035f0 <system_manager_check_state+0x2a8>)
 8003404:	2200      	movs	r2, #0
 8003406:	701a      	strb	r2, [r3, #0]
        }
        dfplayer_track_play(system_song_id + 1);
 8003408:	4b7a      	ldr	r3, [pc, #488]	@ (80035f4 <system_manager_check_state+0x2ac>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	b29b      	uxth	r3, r3
 800340e:	3301      	adds	r3, #1
 8003410:	b29b      	uxth	r3, r3
 8003412:	4618      	mov	r0, r3
 8003414:	f7fd ffb7 	bl	8001386 <dfplayer_track_play>
        system_playback_state = 1;  // Set playback state to play
 8003418:	4b77      	ldr	r3, [pc, #476]	@ (80035f8 <system_manager_check_state+0x2b0>)
 800341a:	2201      	movs	r2, #1
 800341c:	701a      	strb	r2, [r3, #0]
      }

      // Navigate through the playlist
      if (is_button_pressed(2))  		// Navigate down (right button)
 800341e:	2002      	movs	r0, #2
 8003420:	f7fd ff3e 	bl	80012a0 <is_button_pressed>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d005      	beq.n	8003436 <system_manager_check_state+0xee>
        system_song_id++;
 800342a:	4b72      	ldr	r3, [pc, #456]	@ (80035f4 <system_manager_check_state+0x2ac>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	3301      	adds	r3, #1
 8003430:	4a70      	ldr	r2, [pc, #448]	@ (80035f4 <system_manager_check_state+0x2ac>)
 8003432:	6013      	str	r3, [r2, #0]
 8003434:	e00a      	b.n	800344c <system_manager_check_state+0x104>
      else if (is_button_pressed(0))  	// Navigate up (left button)
 8003436:	2000      	movs	r0, #0
 8003438:	f7fd ff32 	bl	80012a0 <is_button_pressed>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d004      	beq.n	800344c <system_manager_check_state+0x104>
        system_song_id--;
 8003442:	4b6c      	ldr	r3, [pc, #432]	@ (80035f4 <system_manager_check_state+0x2ac>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	3b01      	subs	r3, #1
 8003448:	4a6a      	ldr	r2, [pc, #424]	@ (80035f4 <system_manager_check_state+0x2ac>)
 800344a:	6013      	str	r3, [r2, #0]

      // Wrap around the song index
      if (system_song_id < 0)
 800344c:	4b69      	ldr	r3, [pc, #420]	@ (80035f4 <system_manager_check_state+0x2ac>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	da02      	bge.n	800345a <system_manager_check_state+0x112>
        system_song_id = LIST_SONG_QUANTITY - 1;
 8003454:	4b67      	ldr	r3, [pc, #412]	@ (80035f4 <system_manager_check_state+0x2ac>)
 8003456:	2209      	movs	r2, #9
 8003458:	601a      	str	r2, [r3, #0]
      if (system_song_id >= LIST_SONG_QUANTITY)
 800345a:	4b66      	ldr	r3, [pc, #408]	@ (80035f4 <system_manager_check_state+0x2ac>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b09      	cmp	r3, #9
 8003460:	dd02      	ble.n	8003468 <system_manager_check_state+0x120>
        system_song_id = 0;
 8003462:	4b64      	ldr	r3, [pc, #400]	@ (80035f4 <system_manager_check_state+0x2ac>)
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]

      // Adjust volume
      if (is_button_held(2)) // Volume up
 8003468:	2002      	movs	r0, #2
 800346a:	f7fd ff3d 	bl	80012e8 <is_button_held>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d011      	beq.n	8003498 <system_manager_check_state+0x150>
      {
        system_sound_volume++;
 8003474:	4b5c      	ldr	r3, [pc, #368]	@ (80035e8 <system_manager_check_state+0x2a0>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	3301      	adds	r3, #1
 800347a:	4a5b      	ldr	r2, [pc, #364]	@ (80035e8 <system_manager_check_state+0x2a0>)
 800347c:	6013      	str	r3, [r2, #0]
        if (system_sound_volume > 30)
 800347e:	4b5a      	ldr	r3, [pc, #360]	@ (80035e8 <system_manager_check_state+0x2a0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b1e      	cmp	r3, #30
 8003484:	dd02      	ble.n	800348c <system_manager_check_state+0x144>
          system_sound_volume = 30;
 8003486:	4b58      	ldr	r3, [pc, #352]	@ (80035e8 <system_manager_check_state+0x2a0>)
 8003488:	221e      	movs	r2, #30
 800348a:	601a      	str	r2, [r3, #0]
        dfplayer_adjust_volume(system_sound_volume);
 800348c:	4b56      	ldr	r3, [pc, #344]	@ (80035e8 <system_manager_check_state+0x2a0>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	b2db      	uxtb	r3, r3
 8003492:	4618      	mov	r0, r3
 8003494:	f7fd ffb0 	bl	80013f8 <dfplayer_adjust_volume>
      }

      if (is_button_held(0)) // Volume down
 8003498:	2000      	movs	r0, #0
 800349a:	f7fd ff25 	bl	80012e8 <is_button_held>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 812c 	beq.w	80036fe <system_manager_check_state+0x3b6>
      {
        system_sound_volume--;
 80034a6:	4b50      	ldr	r3, [pc, #320]	@ (80035e8 <system_manager_check_state+0x2a0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	4a4e      	ldr	r2, [pc, #312]	@ (80035e8 <system_manager_check_state+0x2a0>)
 80034ae:	6013      	str	r3, [r2, #0]
        if (system_sound_volume < 0)
 80034b0:	4b4d      	ldr	r3, [pc, #308]	@ (80035e8 <system_manager_check_state+0x2a0>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	da02      	bge.n	80034be <system_manager_check_state+0x176>
          system_sound_volume = 0;
 80034b8:	4b4b      	ldr	r3, [pc, #300]	@ (80035e8 <system_manager_check_state+0x2a0>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
        dfplayer_adjust_volume(system_sound_volume);
 80034be:	4b4a      	ldr	r3, [pc, #296]	@ (80035e8 <system_manager_check_state+0x2a0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7fd ff97 	bl	80013f8 <dfplayer_adjust_volume>
      }
      break;
 80034ca:	e118      	b.n	80036fe <system_manager_check_state+0x3b6>

    case MUSIC_PLAYER_DEFAULT_STATE:
      // Transition to MUSIC_PLAYER_TITLE_STATE
      system_state = MUSIC_PLAYER_TITLE_STATE;
 80034cc:	4b47      	ldr	r3, [pc, #284]	@ (80035ec <system_manager_check_state+0x2a4>)
 80034ce:	2205      	movs	r2, #5
 80034d0:	701a      	strb	r2, [r3, #0]
      break;
 80034d2:	e11b      	b.n	800370c <system_manager_check_state+0x3c4>

    case MUSIC_PLAYER_TITLE_STATE:
      // Transition to PLAYLIST_STATE if button 1 is held
      if (is_button_held(1))
 80034d4:	2001      	movs	r0, #1
 80034d6:	f7fd ff07 	bl	80012e8 <is_button_held>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <system_manager_check_state+0x19e>
        system_state = PLAYLIST_STATE;
 80034e0:	4b42      	ldr	r3, [pc, #264]	@ (80035ec <system_manager_check_state+0x2a4>)
 80034e2:	2203      	movs	r2, #3
 80034e4:	701a      	strb	r2, [r3, #0]

      // Toggle title scrolling if button 1 is pressed
      if (is_button_pressed(1))
 80034e6:	2001      	movs	r0, #1
 80034e8:	f7fd feda 	bl	80012a0 <is_button_pressed>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d022      	beq.n	8003538 <system_manager_check_state+0x1f0>
      {
        switch (system_title_state)
 80034f2:	4b42      	ldr	r3, [pc, #264]	@ (80035fc <system_manager_check_state+0x2b4>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d002      	beq.n	8003500 <system_manager_check_state+0x1b8>
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d00e      	beq.n	800351c <system_manager_check_state+0x1d4>
 80034fe:	e01b      	b.n	8003538 <system_manager_check_state+0x1f0>
        {
          case 0:
            system_title_state = 1;
 8003500:	4b3e      	ldr	r3, [pc, #248]	@ (80035fc <system_manager_check_state+0x2b4>)
 8003502:	2201      	movs	r2, #1
 8003504:	701a      	strb	r2, [r3, #0]
            ssd1306_set_scroll_flag(system_title_state);
 8003506:	4b3d      	ldr	r3, [pc, #244]	@ (80035fc <system_manager_check_state+0x2b4>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	bf14      	ite	ne
 800350e:	2301      	movne	r3, #1
 8003510:	2300      	moveq	r3, #0
 8003512:	b2db      	uxtb	r3, r3
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff fdf5 	bl	8003104 <ssd1306_set_scroll_flag>
            break;
 800351a:	e00d      	b.n	8003538 <system_manager_check_state+0x1f0>
          case 1:
            system_title_state = 0;
 800351c:	4b37      	ldr	r3, [pc, #220]	@ (80035fc <system_manager_check_state+0x2b4>)
 800351e:	2200      	movs	r2, #0
 8003520:	701a      	strb	r2, [r3, #0]
            ssd1306_set_scroll_flag(system_title_state);
 8003522:	4b36      	ldr	r3, [pc, #216]	@ (80035fc <system_manager_check_state+0x2b4>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	bf14      	ite	ne
 800352a:	2301      	movne	r3, #1
 800352c:	2300      	moveq	r3, #0
 800352e:	b2db      	uxtb	r3, r3
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff fde7 	bl	8003104 <ssd1306_set_scroll_flag>
            break;
 8003536:	bf00      	nop
        }
      }

      // Adjust volume
      if (is_button_held(2)) // Volume up
 8003538:	2002      	movs	r0, #2
 800353a:	f7fd fed5 	bl	80012e8 <is_button_held>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d011      	beq.n	8003568 <system_manager_check_state+0x220>
      {
        system_sound_volume++;
 8003544:	4b28      	ldr	r3, [pc, #160]	@ (80035e8 <system_manager_check_state+0x2a0>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	3301      	adds	r3, #1
 800354a:	4a27      	ldr	r2, [pc, #156]	@ (80035e8 <system_manager_check_state+0x2a0>)
 800354c:	6013      	str	r3, [r2, #0]
        if (system_sound_volume > 30)
 800354e:	4b26      	ldr	r3, [pc, #152]	@ (80035e8 <system_manager_check_state+0x2a0>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b1e      	cmp	r3, #30
 8003554:	dd02      	ble.n	800355c <system_manager_check_state+0x214>
          system_sound_volume = 30;
 8003556:	4b24      	ldr	r3, [pc, #144]	@ (80035e8 <system_manager_check_state+0x2a0>)
 8003558:	221e      	movs	r2, #30
 800355a:	601a      	str	r2, [r3, #0]
        dfplayer_adjust_volume(system_sound_volume);
 800355c:	4b22      	ldr	r3, [pc, #136]	@ (80035e8 <system_manager_check_state+0x2a0>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	b2db      	uxtb	r3, r3
 8003562:	4618      	mov	r0, r3
 8003564:	f7fd ff48 	bl	80013f8 <dfplayer_adjust_volume>
      }

      if (is_button_held(0)) // Volume down
 8003568:	2000      	movs	r0, #0
 800356a:	f7fd febd 	bl	80012e8 <is_button_held>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d011      	beq.n	8003598 <system_manager_check_state+0x250>
      {
        system_sound_volume--;
 8003574:	4b1c      	ldr	r3, [pc, #112]	@ (80035e8 <system_manager_check_state+0x2a0>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	3b01      	subs	r3, #1
 800357a:	4a1b      	ldr	r2, [pc, #108]	@ (80035e8 <system_manager_check_state+0x2a0>)
 800357c:	6013      	str	r3, [r2, #0]
        if (system_sound_volume < 0)
 800357e:	4b1a      	ldr	r3, [pc, #104]	@ (80035e8 <system_manager_check_state+0x2a0>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	da02      	bge.n	800358c <system_manager_check_state+0x244>
          system_sound_volume = 0;
 8003586:	4b18      	ldr	r3, [pc, #96]	@ (80035e8 <system_manager_check_state+0x2a0>)
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
        dfplayer_adjust_volume(system_sound_volume);
 800358c:	4b16      	ldr	r3, [pc, #88]	@ (80035e8 <system_manager_check_state+0x2a0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	b2db      	uxtb	r3, r3
 8003592:	4618      	mov	r0, r3
 8003594:	f7fd ff30 	bl	80013f8 <dfplayer_adjust_volume>
      }

      // Navigate to play mode or playback state
      if (is_button_pressed(0))
 8003598:	2000      	movs	r0, #0
 800359a:	f7fd fe81 	bl	80012a0 <is_button_pressed>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <system_manager_check_state+0x262>
        system_state = MUSIC_PLAYER_PlAY_MODE_STATE;
 80035a4:	4b11      	ldr	r3, [pc, #68]	@ (80035ec <system_manager_check_state+0x2a4>)
 80035a6:	2207      	movs	r2, #7
 80035a8:	701a      	strb	r2, [r3, #0]
      if (is_button_pressed(2))
 80035aa:	2002      	movs	r0, #2
 80035ac:	f7fd fe78 	bl	80012a0 <is_button_pressed>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 80a5 	beq.w	8003702 <system_manager_check_state+0x3ba>
        system_state = MUSIC_PLAYER_PLAYBACK_STATE;
 80035b8:	4b0c      	ldr	r3, [pc, #48]	@ (80035ec <system_manager_check_state+0x2a4>)
 80035ba:	2206      	movs	r2, #6
 80035bc:	701a      	strb	r2, [r3, #0]
      break;
 80035be:	e0a0      	b.n	8003702 <system_manager_check_state+0x3ba>

    case MUSIC_PLAYER_PLAYBACK_STATE:
      // Toggle playback state if button 1 is pressed
      if (is_button_pressed(1))
 80035c0:	2001      	movs	r0, #1
 80035c2:	f7fd fe6d 	bl	80012a0 <is_button_pressed>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d01f      	beq.n	800360c <system_manager_check_state+0x2c4>
        switch (system_playback_state)
 80035cc:	4b0a      	ldr	r3, [pc, #40]	@ (80035f8 <system_manager_check_state+0x2b0>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <system_manager_check_state+0x292>
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d013      	beq.n	8003600 <system_manager_check_state+0x2b8>
          case 1:
            system_playback_state = 0;
            dfplayer_track_pause();
            break;
          default:
            break;
 80035d8:	e018      	b.n	800360c <system_manager_check_state+0x2c4>
            system_playback_state = 1;
 80035da:	4b07      	ldr	r3, [pc, #28]	@ (80035f8 <system_manager_check_state+0x2b0>)
 80035dc:	2201      	movs	r2, #1
 80035de:	701a      	strb	r2, [r3, #0]
            dfplayer_track_play_continue();
 80035e0:	f7fd feea 	bl	80013b8 <dfplayer_track_play_continue>
            break;
 80035e4:	e012      	b.n	800360c <system_manager_check_state+0x2c4>
 80035e6:	bf00      	nop
 80035e8:	200000b4 	.word	0x200000b4
 80035ec:	200000b0 	.word	0x200000b0
 80035f0:	200006d6 	.word	0x200006d6
 80035f4:	200006d0 	.word	0x200006d0
 80035f8:	200006d5 	.word	0x200006d5
 80035fc:	200006d4 	.word	0x200006d4
            system_playback_state = 0;
 8003600:	4b44      	ldr	r3, [pc, #272]	@ (8003714 <system_manager_check_state+0x3cc>)
 8003602:	2200      	movs	r2, #0
 8003604:	701a      	strb	r2, [r3, #0]
            dfplayer_track_pause();
 8003606:	f7fd fecf 	bl	80013a8 <dfplayer_track_pause>
            break;
 800360a:	bf00      	nop
        }

      // Transition to PLAYLIST_STATE if button 1 is held
      if (is_button_held(1))
 800360c:	2001      	movs	r0, #1
 800360e:	f7fd fe6b 	bl	80012e8 <is_button_held>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <system_manager_check_state+0x2d6>
        system_state = PLAYLIST_STATE;
 8003618:	4b3f      	ldr	r3, [pc, #252]	@ (8003718 <system_manager_check_state+0x3d0>)
 800361a:	2203      	movs	r2, #3
 800361c:	701a      	strb	r2, [r3, #0]

      // Navigate to title or play mode state
      if (is_button_pressed(0))
 800361e:	2000      	movs	r0, #0
 8003620:	f7fd fe3e 	bl	80012a0 <is_button_pressed>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d008      	beq.n	800363c <system_manager_check_state+0x2f4>
      {
        system_state = MUSIC_PLAYER_TITLE_STATE;
 800362a:	4b3b      	ldr	r3, [pc, #236]	@ (8003718 <system_manager_check_state+0x3d0>)
 800362c:	2205      	movs	r2, #5
 800362e:	701a      	strb	r2, [r3, #0]
        ssd1306_deselect_fsm(system_playback_state, 99);
 8003630:	4b38      	ldr	r3, [pc, #224]	@ (8003714 <system_manager_check_state+0x3cc>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2163      	movs	r1, #99	@ 0x63
 8003636:	4618      	mov	r0, r3
 8003638:	f7ff fc02 	bl	8002e40 <ssd1306_deselect_fsm>
      }
      if (is_button_pressed(2))
 800363c:	2002      	movs	r0, #2
 800363e:	f7fd fe2f 	bl	80012a0 <is_button_pressed>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d05e      	beq.n	8003706 <system_manager_check_state+0x3be>
      {
        system_state = MUSIC_PLAYER_PlAY_MODE_STATE;
 8003648:	4b33      	ldr	r3, [pc, #204]	@ (8003718 <system_manager_check_state+0x3d0>)
 800364a:	2207      	movs	r2, #7
 800364c:	701a      	strb	r2, [r3, #0]
        ssd1306_deselect_fsm(system_playback_state, 99);
 800364e:	4b31      	ldr	r3, [pc, #196]	@ (8003714 <system_manager_check_state+0x3cc>)
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	2163      	movs	r1, #99	@ 0x63
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff fbf3 	bl	8002e40 <ssd1306_deselect_fsm>
      }
      break;
 800365a:	e054      	b.n	8003706 <system_manager_check_state+0x3be>

    case MUSIC_PLAYER_PlAY_MODE_STATE:
      // Cycle through play modes if button 1 is pressed
      if (is_button_pressed(1))
 800365c:	2001      	movs	r0, #1
 800365e:	f7fd fe1f 	bl	80012a0 <is_button_pressed>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d01c      	beq.n	80036a2 <system_manager_check_state+0x35a>
        switch (system_play_mode_state)
 8003668:	4b2c      	ldr	r3, [pc, #176]	@ (800371c <system_manager_check_state+0x3d4>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	2b02      	cmp	r3, #2
 800366e:	d012      	beq.n	8003696 <system_manager_check_state+0x34e>
 8003670:	2b02      	cmp	r3, #2
 8003672:	dc15      	bgt.n	80036a0 <system_manager_check_state+0x358>
 8003674:	2b00      	cmp	r3, #0
 8003676:	d002      	beq.n	800367e <system_manager_check_state+0x336>
 8003678:	2b01      	cmp	r3, #1
 800367a:	d006      	beq.n	800368a <system_manager_check_state+0x342>
            break;
          case 2:
            system_play_mode_state = 0;
            dfplayer_normal_mode_play();
          default:
            break;
 800367c:	e010      	b.n	80036a0 <system_manager_check_state+0x358>
            system_play_mode_state = 1;
 800367e:	4b27      	ldr	r3, [pc, #156]	@ (800371c <system_manager_check_state+0x3d4>)
 8003680:	2201      	movs	r2, #1
 8003682:	701a      	strb	r2, [r3, #0]
            dfplayer_repeat_mode_play();
 8003684:	f7fd fea8 	bl	80013d8 <dfplayer_repeat_mode_play>
            break;
 8003688:	e00b      	b.n	80036a2 <system_manager_check_state+0x35a>
            system_play_mode_state = 2;
 800368a:	4b24      	ldr	r3, [pc, #144]	@ (800371c <system_manager_check_state+0x3d4>)
 800368c:	2202      	movs	r2, #2
 800368e:	701a      	strb	r2, [r3, #0]
            dfplayer_random_mode_play();
 8003690:	f7fd feaa 	bl	80013e8 <dfplayer_random_mode_play>
            break;
 8003694:	e005      	b.n	80036a2 <system_manager_check_state+0x35a>
            system_play_mode_state = 0;
 8003696:	4b21      	ldr	r3, [pc, #132]	@ (800371c <system_manager_check_state+0x3d4>)
 8003698:	2200      	movs	r2, #0
 800369a:	701a      	strb	r2, [r3, #0]
            dfplayer_normal_mode_play();
 800369c:	f7fd fe94 	bl	80013c8 <dfplayer_normal_mode_play>
            break;
 80036a0:	bf00      	nop
        }

      // Transition to PLAYLIST_STATE if button 1 is held
      if (is_button_held(1))
 80036a2:	2001      	movs	r0, #1
 80036a4:	f7fd fe20 	bl	80012e8 <is_button_held>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <system_manager_check_state+0x36c>
        system_state = PLAYLIST_STATE;
 80036ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003718 <system_manager_check_state+0x3d0>)
 80036b0:	2203      	movs	r2, #3
 80036b2:	701a      	strb	r2, [r3, #0]

      // Navigate to playback or title state
      if (is_button_pressed(0))
 80036b4:	2000      	movs	r0, #0
 80036b6:	f7fd fdf3 	bl	80012a0 <is_button_pressed>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <system_manager_check_state+0x38a>
      {
        system_state = MUSIC_PLAYER_PLAYBACK_STATE;
 80036c0:	4b15      	ldr	r3, [pc, #84]	@ (8003718 <system_manager_check_state+0x3d0>)
 80036c2:	2206      	movs	r2, #6
 80036c4:	701a      	strb	r2, [r3, #0]
        ssd1306_deselect_fsm(99, system_play_mode_state);
 80036c6:	4b15      	ldr	r3, [pc, #84]	@ (800371c <system_manager_check_state+0x3d4>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	4619      	mov	r1, r3
 80036cc:	2063      	movs	r0, #99	@ 0x63
 80036ce:	f7ff fbb7 	bl	8002e40 <ssd1306_deselect_fsm>
      }
      if (is_button_pressed(2))
 80036d2:	2002      	movs	r0, #2
 80036d4:	f7fd fde4 	bl	80012a0 <is_button_pressed>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d015      	beq.n	800370a <system_manager_check_state+0x3c2>
      {
        system_state = MUSIC_PLAYER_TITLE_STATE;
 80036de:	4b0e      	ldr	r3, [pc, #56]	@ (8003718 <system_manager_check_state+0x3d0>)
 80036e0:	2205      	movs	r2, #5
 80036e2:	701a      	strb	r2, [r3, #0]
        ssd1306_deselect_fsm(99, system_play_mode_state);
 80036e4:	4b0d      	ldr	r3, [pc, #52]	@ (800371c <system_manager_check_state+0x3d4>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	4619      	mov	r1, r3
 80036ea:	2063      	movs	r0, #99	@ 0x63
 80036ec:	f7ff fba8 	bl	8002e40 <ssd1306_deselect_fsm>
      }
      break;
 80036f0:	e00b      	b.n	800370a <system_manager_check_state+0x3c2>

    default:
      break;
 80036f2:	bf00      	nop
 80036f4:	e00a      	b.n	800370c <system_manager_check_state+0x3c4>
      break;
 80036f6:	bf00      	nop
 80036f8:	e008      	b.n	800370c <system_manager_check_state+0x3c4>
      break;
 80036fa:	bf00      	nop
 80036fc:	e006      	b.n	800370c <system_manager_check_state+0x3c4>
      break;
 80036fe:	bf00      	nop
 8003700:	e004      	b.n	800370c <system_manager_check_state+0x3c4>
      break;
 8003702:	bf00      	nop
 8003704:	e002      	b.n	800370c <system_manager_check_state+0x3c4>
      break;
 8003706:	bf00      	nop
 8003708:	e000      	b.n	800370c <system_manager_check_state+0x3c4>
      break;
 800370a:	bf00      	nop
  }

  return system_state;
 800370c:	4b02      	ldr	r3, [pc, #8]	@ (8003718 <system_manager_check_state+0x3d0>)
 800370e:	781b      	ldrb	r3, [r3, #0]
}
 8003710:	4618      	mov	r0, r3
 8003712:	bd80      	pop	{r7, pc}
 8003714:	200006d5 	.word	0x200006d5
 8003718:	200000b0 	.word	0x200000b0
 800371c:	200006d6 	.word	0x200006d6

08003720 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003720:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003758 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003724:	f7ff f876 	bl	8002814 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003728:	480c      	ldr	r0, [pc, #48]	@ (800375c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800372a:	490d      	ldr	r1, [pc, #52]	@ (8003760 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800372c:	4a0d      	ldr	r2, [pc, #52]	@ (8003764 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800372e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003730:	e002      	b.n	8003738 <LoopCopyDataInit>

08003732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003736:	3304      	adds	r3, #4

08003738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800373a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800373c:	d3f9      	bcc.n	8003732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800373e:	4a0a      	ldr	r2, [pc, #40]	@ (8003768 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003740:	4c0a      	ldr	r4, [pc, #40]	@ (800376c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003744:	e001      	b.n	800374a <LoopFillZerobss>

08003746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003748:	3204      	adds	r2, #4

0800374a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800374a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800374c:	d3fb      	bcc.n	8003746 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800374e:	f004 f9af 	bl	8007ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003752:	f7fe fc2d 	bl	8001fb0 <main>
  bx  lr    
 8003756:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003758:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800375c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003760:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8003764:	0800b350 	.word	0x0800b350
  ldr r2, =_sbss
 8003768:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 800376c:	20000824 	.word	0x20000824

08003770 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003770:	e7fe      	b.n	8003770 <DMA1_Stream0_IRQHandler>
	...

08003774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003778:	4b0e      	ldr	r3, [pc, #56]	@ (80037b4 <HAL_Init+0x40>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a0d      	ldr	r2, [pc, #52]	@ (80037b4 <HAL_Init+0x40>)
 800377e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003782:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003784:	4b0b      	ldr	r3, [pc, #44]	@ (80037b4 <HAL_Init+0x40>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a0a      	ldr	r2, [pc, #40]	@ (80037b4 <HAL_Init+0x40>)
 800378a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800378e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003790:	4b08      	ldr	r3, [pc, #32]	@ (80037b4 <HAL_Init+0x40>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a07      	ldr	r2, [pc, #28]	@ (80037b4 <HAL_Init+0x40>)
 8003796:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800379a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800379c:	2003      	movs	r0, #3
 800379e:	f000 fdf7 	bl	8004390 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037a2:	200f      	movs	r0, #15
 80037a4:	f000 f808 	bl	80037b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037a8:	f7fe fe1c 	bl	80023e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40023c00 	.word	0x40023c00

080037b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037c0:	4b12      	ldr	r3, [pc, #72]	@ (800380c <HAL_InitTick+0x54>)
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	4b12      	ldr	r3, [pc, #72]	@ (8003810 <HAL_InitTick+0x58>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	4619      	mov	r1, r3
 80037ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80037d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 fe0f 	bl	80043fa <HAL_SYSTICK_Config>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e00e      	b.n	8003804 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b0f      	cmp	r3, #15
 80037ea:	d80a      	bhi.n	8003802 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037ec:	2200      	movs	r2, #0
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	f04f 30ff 	mov.w	r0, #4294967295
 80037f4:	f000 fdd7 	bl	80043a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037f8:	4a06      	ldr	r2, [pc, #24]	@ (8003814 <HAL_InitTick+0x5c>)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
 8003800:	e000      	b.n	8003804 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
}
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	200000ac 	.word	0x200000ac
 8003810:	200000bc 	.word	0x200000bc
 8003814:	200000b8 	.word	0x200000b8

08003818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800381c:	4b06      	ldr	r3, [pc, #24]	@ (8003838 <HAL_IncTick+0x20>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	4b06      	ldr	r3, [pc, #24]	@ (800383c <HAL_IncTick+0x24>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4413      	add	r3, r2
 8003828:	4a04      	ldr	r2, [pc, #16]	@ (800383c <HAL_IncTick+0x24>)
 800382a:	6013      	str	r3, [r2, #0]
}
 800382c:	bf00      	nop
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	200000bc 	.word	0x200000bc
 800383c:	200006d8 	.word	0x200006d8

08003840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  return uwTick;
 8003844:	4b03      	ldr	r3, [pc, #12]	@ (8003854 <HAL_GetTick+0x14>)
 8003846:	681b      	ldr	r3, [r3, #0]
}
 8003848:	4618      	mov	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	200006d8 	.word	0x200006d8

08003858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003860:	f7ff ffee 	bl	8003840 <HAL_GetTick>
 8003864:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003870:	d005      	beq.n	800387e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003872:	4b0a      	ldr	r3, [pc, #40]	@ (800389c <HAL_Delay+0x44>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4413      	add	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800387e:	bf00      	nop
 8003880:	f7ff ffde 	bl	8003840 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	429a      	cmp	r2, r3
 800388e:	d8f7      	bhi.n	8003880 <HAL_Delay+0x28>
  {
  }
}
 8003890:	bf00      	nop
 8003892:	bf00      	nop
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	200000bc 	.word	0x200000bc

080038a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038a8:	2300      	movs	r3, #0
 80038aa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e033      	b.n	800391e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d109      	bne.n	80038d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7fe fdb8 	bl	8002434 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d6:	f003 0310 	and.w	r3, r3, #16
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d118      	bne.n	8003910 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80038e6:	f023 0302 	bic.w	r3, r3, #2
 80038ea:	f043 0202 	orr.w	r2, r3, #2
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 fb76 	bl	8003fe4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003902:	f023 0303 	bic.w	r3, r3, #3
 8003906:	f043 0201 	orr.w	r2, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	641a      	str	r2, [r3, #64]	@ 0x40
 800390e:	e001      	b.n	8003914 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800391c:	7bfb      	ldrb	r3, [r7, #15]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003930:	2300      	movs	r3, #0
 8003932:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800393a:	2b01      	cmp	r3, #1
 800393c:	d101      	bne.n	8003942 <HAL_ADC_Start_IT+0x1a>
 800393e:	2302      	movs	r3, #2
 8003940:	e0a1      	b.n	8003a86 <HAL_ADC_Start_IT+0x15e>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b01      	cmp	r3, #1
 8003956:	d018      	beq.n	800398a <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0201 	orr.w	r2, r2, #1
 8003966:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003968:	4b4a      	ldr	r3, [pc, #296]	@ (8003a94 <HAL_ADC_Start_IT+0x16c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a4a      	ldr	r2, [pc, #296]	@ (8003a98 <HAL_ADC_Start_IT+0x170>)
 800396e:	fba2 2303 	umull	r2, r3, r2, r3
 8003972:	0c9a      	lsrs	r2, r3, #18
 8003974:	4613      	mov	r3, r2
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	4413      	add	r3, r2
 800397a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800397c:	e002      	b.n	8003984 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	3b01      	subs	r3, #1
 8003982:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1f9      	bne.n	800397e <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b01      	cmp	r3, #1
 8003996:	d169      	bne.n	8003a6c <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80039a0:	f023 0301 	bic.w	r3, r3, #1
 80039a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d007      	beq.n	80039ca <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039be:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80039c2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039d6:	d106      	bne.n	80039e6 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039dc:	f023 0206 	bic.w	r2, r3, #6
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	645a      	str	r2, [r3, #68]	@ 0x44
 80039e4:	e002      	b.n	80039ec <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039f4:	4b29      	ldr	r3, [pc, #164]	@ (8003a9c <HAL_ADC_Start_IT+0x174>)
 80039f6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003a00:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6812      	ldr	r2, [r2, #0]
 8003a0c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a10:	f043 0320 	orr.w	r3, r3, #32
 8003a14:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f003 031f 	and.w	r3, r3, #31
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10f      	bne.n	8003a42 <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d129      	bne.n	8003a84 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003a3e:	609a      	str	r2, [r3, #8]
 8003a40:	e020      	b.n	8003a84 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a16      	ldr	r2, [pc, #88]	@ (8003aa0 <HAL_ADC_Start_IT+0x178>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d11b      	bne.n	8003a84 <HAL_ADC_Start_IT+0x15c>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d114      	bne.n	8003a84 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003a68:	609a      	str	r2, [r3, #8]
 8003a6a:	e00b      	b.n	8003a84 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a70:	f043 0210 	orr.w	r2, r3, #16
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7c:	f043 0201 	orr.w	r2, r3, #1
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	200000ac 	.word	0x200000ac
 8003a98:	431bde83 	.word	0x431bde83
 8003a9c:	40012300 	.word	0x40012300
 8003aa0:	40012000 	.word	0x40012000

08003aa4 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d101      	bne.n	8003aba <HAL_ADC_Stop_IT+0x16>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	e02b      	b.n	8003b12 <HAL_ADC_Stop_IT+0x6e>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 0201 	bic.w	r2, r2, #1
 8003ad0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d113      	bne.n	8003b08 <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6812      	ldr	r2, [r2, #0]
 8003aea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003aee:	f023 0320 	bic.w	r3, r3, #32
 8003af2:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003afc:	f023 0301 	bic.w	r3, r3, #1
 8003b00:	f043 0201 	orr.w	r2, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b086      	sub	sp, #24
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	f003 0320 	and.w	r3, r3, #32
 8003b4c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d049      	beq.n	8003be8 <HAL_ADC_IRQHandler+0xca>
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d046      	beq.n	8003be8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5e:	f003 0310 	and.w	r3, r3, #16
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d105      	bne.n	8003b72 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d12b      	bne.n	8003bd8 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d127      	bne.n	8003bd8 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b8e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d006      	beq.n	8003ba4 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d119      	bne.n	8003bd8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 0220 	bic.w	r2, r2, #32
 8003bb2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d105      	bne.n	8003bd8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd0:	f043 0201 	orr.w	r2, r3, #1
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7fd fa9b 	bl	8001114 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f06f 0212 	mvn.w	r2, #18
 8003be6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f003 0304 	and.w	r3, r3, #4
 8003bee:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bf6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d057      	beq.n	8003cae <HAL_ADC_IRQHandler+0x190>
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d054      	beq.n	8003cae <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c08:	f003 0310 	and.w	r3, r3, #16
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d105      	bne.n	8003c1c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c14:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d139      	bne.n	8003c9e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c30:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d006      	beq.n	8003c46 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d12b      	bne.n	8003c9e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d124      	bne.n	8003c9e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d11d      	bne.n	8003c9e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d119      	bne.n	8003c9e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c78:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d105      	bne.n	8003c9e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c96:	f043 0201 	orr.w	r2, r3, #1
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 fa9c 	bl	80041dc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 020c 	mvn.w	r2, #12
 8003cac:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cbc:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d017      	beq.n	8003cf4 <HAL_ADC_IRQHandler+0x1d6>
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d014      	beq.n	8003cf4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d10d      	bne.n	8003cf4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cdc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f837 	bl	8003d58 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f06f 0201 	mvn.w	r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d02:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d015      	beq.n	8003d36 <HAL_ADC_IRQHandler+0x218>
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d012      	beq.n	8003d36 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d14:	f043 0202 	orr.w	r2, r3, #2
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f06f 0220 	mvn.w	r2, #32
 8003d24:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f820 	bl	8003d6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f06f 0220 	mvn.w	r2, #32
 8003d34:	601a      	str	r2, [r3, #0]
  }
}
 8003d36:	bf00      	nop
 8003d38:	3718      	adds	r7, #24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b083      	sub	sp, #12
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d101      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x1c>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e113      	b.n	8003fc4 <HAL_ADC_ConfigChannel+0x244>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b09      	cmp	r3, #9
 8003daa:	d925      	bls.n	8003df8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68d9      	ldr	r1, [r3, #12]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	461a      	mov	r2, r3
 8003dba:	4613      	mov	r3, r2
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	4413      	add	r3, r2
 8003dc0:	3b1e      	subs	r3, #30
 8003dc2:	2207      	movs	r2, #7
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	43da      	mvns	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	400a      	ands	r2, r1
 8003dd0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68d9      	ldr	r1, [r3, #12]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	4618      	mov	r0, r3
 8003de4:	4603      	mov	r3, r0
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	4403      	add	r3, r0
 8003dea:	3b1e      	subs	r3, #30
 8003dec:	409a      	lsls	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	60da      	str	r2, [r3, #12]
 8003df6:	e022      	b.n	8003e3e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6919      	ldr	r1, [r3, #16]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	461a      	mov	r2, r3
 8003e06:	4613      	mov	r3, r2
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	4413      	add	r3, r2
 8003e0c:	2207      	movs	r2, #7
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	43da      	mvns	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	400a      	ands	r2, r1
 8003e1a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6919      	ldr	r1, [r3, #16]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	4603      	mov	r3, r0
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	4403      	add	r3, r0
 8003e34:	409a      	lsls	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2b06      	cmp	r3, #6
 8003e44:	d824      	bhi.n	8003e90 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	3b05      	subs	r3, #5
 8003e58:	221f      	movs	r2, #31
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	43da      	mvns	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	400a      	ands	r2, r1
 8003e66:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	4618      	mov	r0, r3
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	3b05      	subs	r3, #5
 8003e82:	fa00 f203 	lsl.w	r2, r0, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e8e:	e04c      	b.n	8003f2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	2b0c      	cmp	r3, #12
 8003e96:	d824      	bhi.n	8003ee2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	3b23      	subs	r3, #35	@ 0x23
 8003eaa:	221f      	movs	r2, #31
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	43da      	mvns	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	400a      	ands	r2, r1
 8003eb8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	3b23      	subs	r3, #35	@ 0x23
 8003ed4:	fa00 f203 	lsl.w	r2, r0, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ee0:	e023      	b.n	8003f2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	4613      	mov	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	3b41      	subs	r3, #65	@ 0x41
 8003ef4:	221f      	movs	r2, #31
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	43da      	mvns	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	400a      	ands	r2, r1
 8003f02:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	4618      	mov	r0, r3
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	4613      	mov	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4413      	add	r3, r2
 8003f1c:	3b41      	subs	r3, #65	@ 0x41
 8003f1e:	fa00 f203 	lsl.w	r2, r0, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f2a:	4b29      	ldr	r3, [pc, #164]	@ (8003fd0 <HAL_ADC_ConfigChannel+0x250>)
 8003f2c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a28      	ldr	r2, [pc, #160]	@ (8003fd4 <HAL_ADC_ConfigChannel+0x254>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d10f      	bne.n	8003f58 <HAL_ADC_ConfigChannel+0x1d8>
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b12      	cmp	r3, #18
 8003f3e:	d10b      	bne.n	8003f58 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8003fd4 <HAL_ADC_ConfigChannel+0x254>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d12b      	bne.n	8003fba <HAL_ADC_ConfigChannel+0x23a>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a1c      	ldr	r2, [pc, #112]	@ (8003fd8 <HAL_ADC_ConfigChannel+0x258>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d003      	beq.n	8003f74 <HAL_ADC_ConfigChannel+0x1f4>
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b11      	cmp	r3, #17
 8003f72:	d122      	bne.n	8003fba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a11      	ldr	r2, [pc, #68]	@ (8003fd8 <HAL_ADC_ConfigChannel+0x258>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d111      	bne.n	8003fba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f96:	4b11      	ldr	r3, [pc, #68]	@ (8003fdc <HAL_ADC_ConfigChannel+0x25c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a11      	ldr	r2, [pc, #68]	@ (8003fe0 <HAL_ADC_ConfigChannel+0x260>)
 8003f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa0:	0c9a      	lsrs	r2, r3, #18
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003fac:	e002      	b.n	8003fb4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f9      	bne.n	8003fae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	40012300 	.word	0x40012300
 8003fd4:	40012000 	.word	0x40012000
 8003fd8:	10000012 	.word	0x10000012
 8003fdc:	200000ac 	.word	0x200000ac
 8003fe0:	431bde83 	.word	0x431bde83

08003fe4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fec:	4b79      	ldr	r3, [pc, #484]	@ (80041d4 <ADC_Init+0x1f0>)
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	431a      	orrs	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004018:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6859      	ldr	r1, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	021a      	lsls	r2, r3, #8
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800403c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6859      	ldr	r1, [r3, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800405e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6899      	ldr	r1, [r3, #8]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004076:	4a58      	ldr	r2, [pc, #352]	@ (80041d8 <ADC_Init+0x1f4>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d022      	beq.n	80040c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800408a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6899      	ldr	r1, [r3, #8]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80040ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6899      	ldr	r1, [r3, #8]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	609a      	str	r2, [r3, #8]
 80040c0:	e00f      	b.n	80040e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80040d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80040e0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0202 	bic.w	r2, r2, #2
 80040f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6899      	ldr	r1, [r3, #8]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	7e1b      	ldrb	r3, [r3, #24]
 80040fc:	005a      	lsls	r2, r3, #1
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 3020 	ldrb.w	r3, [r3, #32]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d01b      	beq.n	8004148 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800411e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800412e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6859      	ldr	r1, [r3, #4]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413a:	3b01      	subs	r3, #1
 800413c:	035a      	lsls	r2, r3, #13
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	605a      	str	r2, [r3, #4]
 8004146:	e007      	b.n	8004158 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004156:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004166:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	3b01      	subs	r3, #1
 8004174:	051a      	lsls	r2, r3, #20
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800418c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6899      	ldr	r1, [r3, #8]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800419a:	025a      	lsls	r2, r3, #9
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689a      	ldr	r2, [r3, #8]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6899      	ldr	r1, [r3, #8]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	029a      	lsls	r2, r3, #10
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	609a      	str	r2, [r3, #8]
}
 80041c8:	bf00      	nop
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	40012300 	.word	0x40012300
 80041d8:	0f000001 	.word	0x0f000001

080041dc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004200:	4b0c      	ldr	r3, [pc, #48]	@ (8004234 <__NVIC_SetPriorityGrouping+0x44>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800420c:	4013      	ands	r3, r2
 800420e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004218:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800421c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004222:	4a04      	ldr	r2, [pc, #16]	@ (8004234 <__NVIC_SetPriorityGrouping+0x44>)
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	60d3      	str	r3, [r2, #12]
}
 8004228:	bf00      	nop
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	e000ed00 	.word	0xe000ed00

08004238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800423c:	4b04      	ldr	r3, [pc, #16]	@ (8004250 <__NVIC_GetPriorityGrouping+0x18>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	0a1b      	lsrs	r3, r3, #8
 8004242:	f003 0307 	and.w	r3, r3, #7
}
 8004246:	4618      	mov	r0, r3
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	e000ed00 	.word	0xe000ed00

08004254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	4603      	mov	r3, r0
 800425c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800425e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004262:	2b00      	cmp	r3, #0
 8004264:	db0b      	blt.n	800427e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	f003 021f 	and.w	r2, r3, #31
 800426c:	4907      	ldr	r1, [pc, #28]	@ (800428c <__NVIC_EnableIRQ+0x38>)
 800426e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004272:	095b      	lsrs	r3, r3, #5
 8004274:	2001      	movs	r0, #1
 8004276:	fa00 f202 	lsl.w	r2, r0, r2
 800427a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800427e:	bf00      	nop
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	e000e100 	.word	0xe000e100

08004290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	6039      	str	r1, [r7, #0]
 800429a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800429c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	db0a      	blt.n	80042ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	490c      	ldr	r1, [pc, #48]	@ (80042dc <__NVIC_SetPriority+0x4c>)
 80042aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ae:	0112      	lsls	r2, r2, #4
 80042b0:	b2d2      	uxtb	r2, r2
 80042b2:	440b      	add	r3, r1
 80042b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042b8:	e00a      	b.n	80042d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	4908      	ldr	r1, [pc, #32]	@ (80042e0 <__NVIC_SetPriority+0x50>)
 80042c0:	79fb      	ldrb	r3, [r7, #7]
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	3b04      	subs	r3, #4
 80042c8:	0112      	lsls	r2, r2, #4
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	440b      	add	r3, r1
 80042ce:	761a      	strb	r2, [r3, #24]
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	e000e100 	.word	0xe000e100
 80042e0:	e000ed00 	.word	0xe000ed00

080042e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b089      	sub	sp, #36	@ 0x24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f003 0307 	and.w	r3, r3, #7
 80042f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	f1c3 0307 	rsb	r3, r3, #7
 80042fe:	2b04      	cmp	r3, #4
 8004300:	bf28      	it	cs
 8004302:	2304      	movcs	r3, #4
 8004304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	3304      	adds	r3, #4
 800430a:	2b06      	cmp	r3, #6
 800430c:	d902      	bls.n	8004314 <NVIC_EncodePriority+0x30>
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	3b03      	subs	r3, #3
 8004312:	e000      	b.n	8004316 <NVIC_EncodePriority+0x32>
 8004314:	2300      	movs	r3, #0
 8004316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004318:	f04f 32ff 	mov.w	r2, #4294967295
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	fa02 f303 	lsl.w	r3, r2, r3
 8004322:	43da      	mvns	r2, r3
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	401a      	ands	r2, r3
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800432c:	f04f 31ff 	mov.w	r1, #4294967295
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	fa01 f303 	lsl.w	r3, r1, r3
 8004336:	43d9      	mvns	r1, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800433c:	4313      	orrs	r3, r2
         );
}
 800433e:	4618      	mov	r0, r3
 8004340:	3724      	adds	r7, #36	@ 0x24
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
	...

0800434c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3b01      	subs	r3, #1
 8004358:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800435c:	d301      	bcc.n	8004362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800435e:	2301      	movs	r3, #1
 8004360:	e00f      	b.n	8004382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004362:	4a0a      	ldr	r2, [pc, #40]	@ (800438c <SysTick_Config+0x40>)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3b01      	subs	r3, #1
 8004368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800436a:	210f      	movs	r1, #15
 800436c:	f04f 30ff 	mov.w	r0, #4294967295
 8004370:	f7ff ff8e 	bl	8004290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004374:	4b05      	ldr	r3, [pc, #20]	@ (800438c <SysTick_Config+0x40>)
 8004376:	2200      	movs	r2, #0
 8004378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800437a:	4b04      	ldr	r3, [pc, #16]	@ (800438c <SysTick_Config+0x40>)
 800437c:	2207      	movs	r2, #7
 800437e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	e000e010 	.word	0xe000e010

08004390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7ff ff29 	bl	80041f0 <__NVIC_SetPriorityGrouping>
}
 800439e:	bf00      	nop
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b086      	sub	sp, #24
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	4603      	mov	r3, r0
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	607a      	str	r2, [r7, #4]
 80043b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043b4:	2300      	movs	r3, #0
 80043b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043b8:	f7ff ff3e 	bl	8004238 <__NVIC_GetPriorityGrouping>
 80043bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	68b9      	ldr	r1, [r7, #8]
 80043c2:	6978      	ldr	r0, [r7, #20]
 80043c4:	f7ff ff8e 	bl	80042e4 <NVIC_EncodePriority>
 80043c8:	4602      	mov	r2, r0
 80043ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ce:	4611      	mov	r1, r2
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff ff5d 	bl	8004290 <__NVIC_SetPriority>
}
 80043d6:	bf00      	nop
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b082      	sub	sp, #8
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	4603      	mov	r3, r0
 80043e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff ff31 	bl	8004254 <__NVIC_EnableIRQ>
}
 80043f2:	bf00      	nop
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b082      	sub	sp, #8
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f7ff ffa2 	bl	800434c <SysTick_Config>
 8004408:	4603      	mov	r3, r0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
	...

08004414 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800441c:	2300      	movs	r3, #0
 800441e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004420:	f7ff fa0e 	bl	8003840 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e099      	b.n	8004564 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0201 	bic.w	r2, r2, #1
 800444e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004450:	e00f      	b.n	8004472 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004452:	f7ff f9f5 	bl	8003840 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b05      	cmp	r3, #5
 800445e:	d908      	bls.n	8004472 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2220      	movs	r2, #32
 8004464:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2203      	movs	r2, #3
 800446a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e078      	b.n	8004564 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1e8      	bne.n	8004452 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	4b38      	ldr	r3, [pc, #224]	@ (800456c <HAL_DMA_Init+0x158>)
 800448c:	4013      	ands	r3, r2
 800448e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800449e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c8:	2b04      	cmp	r3, #4
 80044ca:	d107      	bne.n	80044dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d4:	4313      	orrs	r3, r2
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4313      	orrs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f023 0307 	bic.w	r3, r3, #7
 80044f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004502:	2b04      	cmp	r3, #4
 8004504:	d117      	bne.n	8004536 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	4313      	orrs	r3, r2
 800450e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00e      	beq.n	8004536 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 fa7b 	bl	8004a14 <DMA_CheckFifoParam>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d008      	beq.n	8004536 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2240      	movs	r2, #64	@ 0x40
 8004528:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004532:	2301      	movs	r3, #1
 8004534:	e016      	b.n	8004564 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fa32 	bl	80049a8 <DMA_CalcBaseAndBitshift>
 8004544:	4603      	mov	r3, r0
 8004546:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800454c:	223f      	movs	r2, #63	@ 0x3f
 800454e:	409a      	lsls	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	f010803f 	.word	0xf010803f

08004570 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800457c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800457e:	f7ff f95f 	bl	8003840 <HAL_GetTick>
 8004582:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d008      	beq.n	80045a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2280      	movs	r2, #128	@ 0x80
 8004594:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e052      	b.n	8004648 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0216 	bic.w	r2, r2, #22
 80045b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695a      	ldr	r2, [r3, #20]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d103      	bne.n	80045d2 <HAL_DMA_Abort+0x62>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d007      	beq.n	80045e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 0208 	bic.w	r2, r2, #8
 80045e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0201 	bic.w	r2, r2, #1
 80045f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045f2:	e013      	b.n	800461c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045f4:	f7ff f924 	bl	8003840 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b05      	cmp	r3, #5
 8004600:	d90c      	bls.n	800461c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2220      	movs	r2, #32
 8004606:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2203      	movs	r2, #3
 800460c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e015      	b.n	8004648 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1e4      	bne.n	80045f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800462e:	223f      	movs	r2, #63	@ 0x3f
 8004630:	409a      	lsls	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d004      	beq.n	800466e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2280      	movs	r2, #128	@ 0x80
 8004668:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e00c      	b.n	8004688 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2205      	movs	r2, #5
 8004672:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0201 	bic.w	r2, r2, #1
 8004684:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80046a0:	4b8e      	ldr	r3, [pc, #568]	@ (80048dc <HAL_DMA_IRQHandler+0x248>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a8e      	ldr	r2, [pc, #568]	@ (80048e0 <HAL_DMA_IRQHandler+0x24c>)
 80046a6:	fba2 2303 	umull	r2, r3, r2, r3
 80046aa:	0a9b      	lsrs	r3, r3, #10
 80046ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046be:	2208      	movs	r2, #8
 80046c0:	409a      	lsls	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	4013      	ands	r3, r2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d01a      	beq.n	8004700 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d013      	beq.n	8004700 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0204 	bic.w	r2, r2, #4
 80046e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ec:	2208      	movs	r2, #8
 80046ee:	409a      	lsls	r2, r3
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f8:	f043 0201 	orr.w	r2, r3, #1
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004704:	2201      	movs	r2, #1
 8004706:	409a      	lsls	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4013      	ands	r3, r2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d012      	beq.n	8004736 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00b      	beq.n	8004736 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004722:	2201      	movs	r2, #1
 8004724:	409a      	lsls	r2, r3
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800472e:	f043 0202 	orr.w	r2, r3, #2
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800473a:	2204      	movs	r2, #4
 800473c:	409a      	lsls	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	4013      	ands	r3, r2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d012      	beq.n	800476c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00b      	beq.n	800476c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004758:	2204      	movs	r2, #4
 800475a:	409a      	lsls	r2, r3
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004764:	f043 0204 	orr.w	r2, r3, #4
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004770:	2210      	movs	r2, #16
 8004772:	409a      	lsls	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4013      	ands	r3, r2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d043      	beq.n	8004804 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	2b00      	cmp	r3, #0
 8004788:	d03c      	beq.n	8004804 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800478e:	2210      	movs	r2, #16
 8004790:	409a      	lsls	r2, r3
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d018      	beq.n	80047d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d108      	bne.n	80047c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d024      	beq.n	8004804 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	4798      	blx	r3
 80047c2:	e01f      	b.n	8004804 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d01b      	beq.n	8004804 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	4798      	blx	r3
 80047d4:	e016      	b.n	8004804 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d107      	bne.n	80047f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0208 	bic.w	r2, r2, #8
 80047f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d003      	beq.n	8004804 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004808:	2220      	movs	r2, #32
 800480a:	409a      	lsls	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4013      	ands	r3, r2
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 808f 	beq.w	8004934 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0310 	and.w	r3, r3, #16
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 8087 	beq.w	8004934 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800482a:	2220      	movs	r2, #32
 800482c:	409a      	lsls	r2, r3
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b05      	cmp	r3, #5
 800483c:	d136      	bne.n	80048ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0216 	bic.w	r2, r2, #22
 800484c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	695a      	ldr	r2, [r3, #20]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800485c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004862:	2b00      	cmp	r3, #0
 8004864:	d103      	bne.n	800486e <HAL_DMA_IRQHandler+0x1da>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800486a:	2b00      	cmp	r3, #0
 800486c:	d007      	beq.n	800487e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0208 	bic.w	r2, r2, #8
 800487c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004882:	223f      	movs	r2, #63	@ 0x3f
 8004884:	409a      	lsls	r2, r3
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d07e      	beq.n	80049a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	4798      	blx	r3
        }
        return;
 80048aa:	e079      	b.n	80049a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d01d      	beq.n	80048f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10d      	bne.n	80048e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d031      	beq.n	8004934 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	4798      	blx	r3
 80048d8:	e02c      	b.n	8004934 <HAL_DMA_IRQHandler+0x2a0>
 80048da:	bf00      	nop
 80048dc:	200000ac 	.word	0x200000ac
 80048e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d023      	beq.n	8004934 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	4798      	blx	r3
 80048f4:	e01e      	b.n	8004934 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10f      	bne.n	8004924 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0210 	bic.w	r2, r2, #16
 8004912:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004928:	2b00      	cmp	r3, #0
 800492a:	d003      	beq.n	8004934 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004938:	2b00      	cmp	r3, #0
 800493a:	d032      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	2b00      	cmp	r3, #0
 8004946:	d022      	beq.n	800498e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2205      	movs	r2, #5
 800494c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0201 	bic.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	3301      	adds	r3, #1
 8004964:	60bb      	str	r3, [r7, #8]
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	429a      	cmp	r2, r3
 800496a:	d307      	bcc.n	800497c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1f2      	bne.n	8004960 <HAL_DMA_IRQHandler+0x2cc>
 800497a:	e000      	b.n	800497e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800497c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004992:	2b00      	cmp	r3, #0
 8004994:	d005      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	4798      	blx	r3
 800499e:	e000      	b.n	80049a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80049a0:	bf00      	nop
    }
  }
}
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	3b10      	subs	r3, #16
 80049b8:	4a14      	ldr	r2, [pc, #80]	@ (8004a0c <DMA_CalcBaseAndBitshift+0x64>)
 80049ba:	fba2 2303 	umull	r2, r3, r2, r3
 80049be:	091b      	lsrs	r3, r3, #4
 80049c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80049c2:	4a13      	ldr	r2, [pc, #76]	@ (8004a10 <DMA_CalcBaseAndBitshift+0x68>)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4413      	add	r3, r2
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	461a      	mov	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2b03      	cmp	r3, #3
 80049d4:	d909      	bls.n	80049ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80049de:	f023 0303 	bic.w	r3, r3, #3
 80049e2:	1d1a      	adds	r2, r3, #4
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	659a      	str	r2, [r3, #88]	@ 0x58
 80049e8:	e007      	b.n	80049fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80049f2:	f023 0303 	bic.w	r3, r3, #3
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	aaaaaaab 	.word	0xaaaaaaab
 8004a10:	0800b0b8 	.word	0x0800b0b8

08004a14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d11f      	bne.n	8004a6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	2b03      	cmp	r3, #3
 8004a32:	d856      	bhi.n	8004ae2 <DMA_CheckFifoParam+0xce>
 8004a34:	a201      	add	r2, pc, #4	@ (adr r2, 8004a3c <DMA_CheckFifoParam+0x28>)
 8004a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3a:	bf00      	nop
 8004a3c:	08004a4d 	.word	0x08004a4d
 8004a40:	08004a5f 	.word	0x08004a5f
 8004a44:	08004a4d 	.word	0x08004a4d
 8004a48:	08004ae3 	.word	0x08004ae3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d046      	beq.n	8004ae6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a5c:	e043      	b.n	8004ae6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a62:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004a66:	d140      	bne.n	8004aea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a6c:	e03d      	b.n	8004aea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a76:	d121      	bne.n	8004abc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2b03      	cmp	r3, #3
 8004a7c:	d837      	bhi.n	8004aee <DMA_CheckFifoParam+0xda>
 8004a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a84 <DMA_CheckFifoParam+0x70>)
 8004a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a84:	08004a95 	.word	0x08004a95
 8004a88:	08004a9b 	.word	0x08004a9b
 8004a8c:	08004a95 	.word	0x08004a95
 8004a90:	08004aad 	.word	0x08004aad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	73fb      	strb	r3, [r7, #15]
      break;
 8004a98:	e030      	b.n	8004afc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d025      	beq.n	8004af2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aaa:	e022      	b.n	8004af2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ab4:	d11f      	bne.n	8004af6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004aba:	e01c      	b.n	8004af6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d903      	bls.n	8004aca <DMA_CheckFifoParam+0xb6>
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2b03      	cmp	r3, #3
 8004ac6:	d003      	beq.n	8004ad0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ac8:	e018      	b.n	8004afc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	73fb      	strb	r3, [r7, #15]
      break;
 8004ace:	e015      	b.n	8004afc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00e      	beq.n	8004afa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	73fb      	strb	r3, [r7, #15]
      break;
 8004ae0:	e00b      	b.n	8004afa <DMA_CheckFifoParam+0xe6>
      break;
 8004ae2:	bf00      	nop
 8004ae4:	e00a      	b.n	8004afc <DMA_CheckFifoParam+0xe8>
      break;
 8004ae6:	bf00      	nop
 8004ae8:	e008      	b.n	8004afc <DMA_CheckFifoParam+0xe8>
      break;
 8004aea:	bf00      	nop
 8004aec:	e006      	b.n	8004afc <DMA_CheckFifoParam+0xe8>
      break;
 8004aee:	bf00      	nop
 8004af0:	e004      	b.n	8004afc <DMA_CheckFifoParam+0xe8>
      break;
 8004af2:	bf00      	nop
 8004af4:	e002      	b.n	8004afc <DMA_CheckFifoParam+0xe8>
      break;   
 8004af6:	bf00      	nop
 8004af8:	e000      	b.n	8004afc <DMA_CheckFifoParam+0xe8>
      break;
 8004afa:	bf00      	nop
    }
  } 
  
  return status; 
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop

08004b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b089      	sub	sp, #36	@ 0x24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b16:	2300      	movs	r3, #0
 8004b18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b22:	2300      	movs	r3, #0
 8004b24:	61fb      	str	r3, [r7, #28]
 8004b26:	e159      	b.n	8004ddc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b28:	2201      	movs	r2, #1
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	f040 8148 	bne.w	8004dd6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d005      	beq.n	8004b5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d130      	bne.n	8004bc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	2203      	movs	r2, #3
 8004b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	4013      	ands	r3, r2
 8004b74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b94:	2201      	movs	r2, #1
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	43db      	mvns	r3, r3
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	091b      	lsrs	r3, r3, #4
 8004baa:	f003 0201 	and.w	r2, r3, #1
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f003 0303 	and.w	r3, r3, #3
 8004bc8:	2b03      	cmp	r3, #3
 8004bca:	d017      	beq.n	8004bfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	2203      	movs	r2, #3
 8004bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bdc:	43db      	mvns	r3, r3
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	4013      	ands	r3, r2
 8004be2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f003 0303 	and.w	r3, r3, #3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d123      	bne.n	8004c50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	08da      	lsrs	r2, r3, #3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	3208      	adds	r2, #8
 8004c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	220f      	movs	r2, #15
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	43db      	mvns	r3, r3
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	691a      	ldr	r2, [r3, #16]
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	f003 0307 	and.w	r3, r3, #7
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	08da      	lsrs	r2, r3, #3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3208      	adds	r2, #8
 8004c4a:	69b9      	ldr	r1, [r7, #24]
 8004c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	2203      	movs	r2, #3
 8004c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c60:	43db      	mvns	r3, r3
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	4013      	ands	r3, r2
 8004c66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f003 0203 	and.w	r2, r3, #3
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	fa02 f303 	lsl.w	r3, r2, r3
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 80a2 	beq.w	8004dd6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c92:	2300      	movs	r3, #0
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	4b57      	ldr	r3, [pc, #348]	@ (8004df4 <HAL_GPIO_Init+0x2e8>)
 8004c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c9a:	4a56      	ldr	r2, [pc, #344]	@ (8004df4 <HAL_GPIO_Init+0x2e8>)
 8004c9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ca0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ca2:	4b54      	ldr	r3, [pc, #336]	@ (8004df4 <HAL_GPIO_Init+0x2e8>)
 8004ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ca6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cae:	4a52      	ldr	r2, [pc, #328]	@ (8004df8 <HAL_GPIO_Init+0x2ec>)
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	089b      	lsrs	r3, r3, #2
 8004cb4:	3302      	adds	r3, #2
 8004cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	220f      	movs	r2, #15
 8004cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cca:	43db      	mvns	r3, r3
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	4013      	ands	r3, r2
 8004cd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a49      	ldr	r2, [pc, #292]	@ (8004dfc <HAL_GPIO_Init+0x2f0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d019      	beq.n	8004d0e <HAL_GPIO_Init+0x202>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a48      	ldr	r2, [pc, #288]	@ (8004e00 <HAL_GPIO_Init+0x2f4>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d013      	beq.n	8004d0a <HAL_GPIO_Init+0x1fe>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a47      	ldr	r2, [pc, #284]	@ (8004e04 <HAL_GPIO_Init+0x2f8>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00d      	beq.n	8004d06 <HAL_GPIO_Init+0x1fa>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a46      	ldr	r2, [pc, #280]	@ (8004e08 <HAL_GPIO_Init+0x2fc>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d007      	beq.n	8004d02 <HAL_GPIO_Init+0x1f6>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a45      	ldr	r2, [pc, #276]	@ (8004e0c <HAL_GPIO_Init+0x300>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d101      	bne.n	8004cfe <HAL_GPIO_Init+0x1f2>
 8004cfa:	2304      	movs	r3, #4
 8004cfc:	e008      	b.n	8004d10 <HAL_GPIO_Init+0x204>
 8004cfe:	2307      	movs	r3, #7
 8004d00:	e006      	b.n	8004d10 <HAL_GPIO_Init+0x204>
 8004d02:	2303      	movs	r3, #3
 8004d04:	e004      	b.n	8004d10 <HAL_GPIO_Init+0x204>
 8004d06:	2302      	movs	r3, #2
 8004d08:	e002      	b.n	8004d10 <HAL_GPIO_Init+0x204>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e000      	b.n	8004d10 <HAL_GPIO_Init+0x204>
 8004d0e:	2300      	movs	r3, #0
 8004d10:	69fa      	ldr	r2, [r7, #28]
 8004d12:	f002 0203 	and.w	r2, r2, #3
 8004d16:	0092      	lsls	r2, r2, #2
 8004d18:	4093      	lsls	r3, r2
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d20:	4935      	ldr	r1, [pc, #212]	@ (8004df8 <HAL_GPIO_Init+0x2ec>)
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	089b      	lsrs	r3, r3, #2
 8004d26:	3302      	adds	r3, #2
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d2e:	4b38      	ldr	r3, [pc, #224]	@ (8004e10 <HAL_GPIO_Init+0x304>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	43db      	mvns	r3, r3
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d52:	4a2f      	ldr	r2, [pc, #188]	@ (8004e10 <HAL_GPIO_Init+0x304>)
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d58:	4b2d      	ldr	r3, [pc, #180]	@ (8004e10 <HAL_GPIO_Init+0x304>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	43db      	mvns	r3, r3
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	4013      	ands	r3, r2
 8004d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d7c:	4a24      	ldr	r2, [pc, #144]	@ (8004e10 <HAL_GPIO_Init+0x304>)
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d82:	4b23      	ldr	r3, [pc, #140]	@ (8004e10 <HAL_GPIO_Init+0x304>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	43db      	mvns	r3, r3
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	4013      	ands	r3, r2
 8004d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004da6:	4a1a      	ldr	r2, [pc, #104]	@ (8004e10 <HAL_GPIO_Init+0x304>)
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004dac:	4b18      	ldr	r3, [pc, #96]	@ (8004e10 <HAL_GPIO_Init+0x304>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	43db      	mvns	r3, r3
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	4013      	ands	r3, r2
 8004dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004dd0:	4a0f      	ldr	r2, [pc, #60]	@ (8004e10 <HAL_GPIO_Init+0x304>)
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	61fb      	str	r3, [r7, #28]
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	2b0f      	cmp	r3, #15
 8004de0:	f67f aea2 	bls.w	8004b28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004de4:	bf00      	nop
 8004de6:	bf00      	nop
 8004de8:	3724      	adds	r7, #36	@ 0x24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	40023800 	.word	0x40023800
 8004df8:	40013800 	.word	0x40013800
 8004dfc:	40020000 	.word	0x40020000
 8004e00:	40020400 	.word	0x40020400
 8004e04:	40020800 	.word	0x40020800
 8004e08:	40020c00 	.word	0x40020c00
 8004e0c:	40021000 	.word	0x40021000
 8004e10:	40013c00 	.word	0x40013c00

08004e14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691a      	ldr	r2, [r3, #16]
 8004e24:	887b      	ldrh	r3, [r7, #2]
 8004e26:	4013      	ands	r3, r2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	73fb      	strb	r3, [r7, #15]
 8004e30:	e001      	b.n	8004e36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e32:	2300      	movs	r3, #0
 8004e34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e56:	887a      	ldrh	r2, [r7, #2]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	041a      	lsls	r2, r3, #16
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	43d9      	mvns	r1, r3
 8004e62:	887b      	ldrh	r3, [r7, #2]
 8004e64:	400b      	ands	r3, r1
 8004e66:	431a      	orrs	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	619a      	str	r2, [r3, #24]
}
 8004e6c:	bf00      	nop
 8004e6e:	3714      	adds	r7, #20
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	4603      	mov	r3, r0
 8004e80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004e82:	4b08      	ldr	r3, [pc, #32]	@ (8004ea4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e84:	695a      	ldr	r2, [r3, #20]
 8004e86:	88fb      	ldrh	r3, [r7, #6]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d006      	beq.n	8004e9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e8e:	4a05      	ldr	r2, [pc, #20]	@ (8004ea4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e90:	88fb      	ldrh	r3, [r7, #6]
 8004e92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e94:	88fb      	ldrh	r3, [r7, #6]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fc fa4a 	bl	8001330 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e9c:	bf00      	nop
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40013c00 	.word	0x40013c00

08004ea8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e12b      	b.n	8005112 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d106      	bne.n	8004ed4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7fd fafc 	bl	80024cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2224      	movs	r2, #36	@ 0x24
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 0201 	bic.w	r2, r2, #1
 8004eea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004efa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f0c:	f001 f9e6 	bl	80062dc <HAL_RCC_GetPCLK1Freq>
 8004f10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	4a81      	ldr	r2, [pc, #516]	@ (800511c <HAL_I2C_Init+0x274>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d807      	bhi.n	8004f2c <HAL_I2C_Init+0x84>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4a80      	ldr	r2, [pc, #512]	@ (8005120 <HAL_I2C_Init+0x278>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	bf94      	ite	ls
 8004f24:	2301      	movls	r3, #1
 8004f26:	2300      	movhi	r3, #0
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	e006      	b.n	8004f3a <HAL_I2C_Init+0x92>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4a7d      	ldr	r2, [pc, #500]	@ (8005124 <HAL_I2C_Init+0x27c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	bf94      	ite	ls
 8004f34:	2301      	movls	r3, #1
 8004f36:	2300      	movhi	r3, #0
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e0e7      	b.n	8005112 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	4a78      	ldr	r2, [pc, #480]	@ (8005128 <HAL_I2C_Init+0x280>)
 8004f46:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4a:	0c9b      	lsrs	r3, r3, #18
 8004f4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	4a6a      	ldr	r2, [pc, #424]	@ (800511c <HAL_I2C_Init+0x274>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d802      	bhi.n	8004f7c <HAL_I2C_Init+0xd4>
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	e009      	b.n	8004f90 <HAL_I2C_Init+0xe8>
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004f82:	fb02 f303 	mul.w	r3, r2, r3
 8004f86:	4a69      	ldr	r2, [pc, #420]	@ (800512c <HAL_I2C_Init+0x284>)
 8004f88:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8c:	099b      	lsrs	r3, r3, #6
 8004f8e:	3301      	adds	r3, #1
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	6812      	ldr	r2, [r2, #0]
 8004f94:	430b      	orrs	r3, r1
 8004f96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004fa2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	495c      	ldr	r1, [pc, #368]	@ (800511c <HAL_I2C_Init+0x274>)
 8004fac:	428b      	cmp	r3, r1
 8004fae:	d819      	bhi.n	8004fe4 <HAL_I2C_Init+0x13c>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	1e59      	subs	r1, r3, #1
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fbe:	1c59      	adds	r1, r3, #1
 8004fc0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004fc4:	400b      	ands	r3, r1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <HAL_I2C_Init+0x138>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	1e59      	subs	r1, r3, #1
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fd8:	3301      	adds	r3, #1
 8004fda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fde:	e051      	b.n	8005084 <HAL_I2C_Init+0x1dc>
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	e04f      	b.n	8005084 <HAL_I2C_Init+0x1dc>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d111      	bne.n	8005010 <HAL_I2C_Init+0x168>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	1e58      	subs	r0, r3, #1
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6859      	ldr	r1, [r3, #4]
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	440b      	add	r3, r1
 8004ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ffe:	3301      	adds	r3, #1
 8005000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005004:	2b00      	cmp	r3, #0
 8005006:	bf0c      	ite	eq
 8005008:	2301      	moveq	r3, #1
 800500a:	2300      	movne	r3, #0
 800500c:	b2db      	uxtb	r3, r3
 800500e:	e012      	b.n	8005036 <HAL_I2C_Init+0x18e>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	1e58      	subs	r0, r3, #1
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6859      	ldr	r1, [r3, #4]
 8005018:	460b      	mov	r3, r1
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	440b      	add	r3, r1
 800501e:	0099      	lsls	r1, r3, #2
 8005020:	440b      	add	r3, r1
 8005022:	fbb0 f3f3 	udiv	r3, r0, r3
 8005026:	3301      	adds	r3, #1
 8005028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800502c:	2b00      	cmp	r3, #0
 800502e:	bf0c      	ite	eq
 8005030:	2301      	moveq	r3, #1
 8005032:	2300      	movne	r3, #0
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <HAL_I2C_Init+0x196>
 800503a:	2301      	movs	r3, #1
 800503c:	e022      	b.n	8005084 <HAL_I2C_Init+0x1dc>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10e      	bne.n	8005064 <HAL_I2C_Init+0x1bc>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	1e58      	subs	r0, r3, #1
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6859      	ldr	r1, [r3, #4]
 800504e:	460b      	mov	r3, r1
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	440b      	add	r3, r1
 8005054:	fbb0 f3f3 	udiv	r3, r0, r3
 8005058:	3301      	adds	r3, #1
 800505a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800505e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005062:	e00f      	b.n	8005084 <HAL_I2C_Init+0x1dc>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	1e58      	subs	r0, r3, #1
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6859      	ldr	r1, [r3, #4]
 800506c:	460b      	mov	r3, r1
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	440b      	add	r3, r1
 8005072:	0099      	lsls	r1, r3, #2
 8005074:	440b      	add	r3, r1
 8005076:	fbb0 f3f3 	udiv	r3, r0, r3
 800507a:	3301      	adds	r3, #1
 800507c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005080:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005084:	6879      	ldr	r1, [r7, #4]
 8005086:	6809      	ldr	r1, [r1, #0]
 8005088:	4313      	orrs	r3, r2
 800508a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	69da      	ldr	r2, [r3, #28]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80050b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	6911      	ldr	r1, [r2, #16]
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	68d2      	ldr	r2, [r2, #12]
 80050be:	4311      	orrs	r1, r2
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	6812      	ldr	r2, [r2, #0]
 80050c4:	430b      	orrs	r3, r1
 80050c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	695a      	ldr	r2, [r3, #20]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0201 	orr.w	r2, r2, #1
 80050f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2220      	movs	r2, #32
 80050fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	000186a0 	.word	0x000186a0
 8005120:	001e847f 	.word	0x001e847f
 8005124:	003d08ff 	.word	0x003d08ff
 8005128:	431bde83 	.word	0x431bde83
 800512c:	10624dd3 	.word	0x10624dd3

08005130 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af02      	add	r7, sp, #8
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	4608      	mov	r0, r1
 800513a:	4611      	mov	r1, r2
 800513c:	461a      	mov	r2, r3
 800513e:	4603      	mov	r3, r0
 8005140:	817b      	strh	r3, [r7, #10]
 8005142:	460b      	mov	r3, r1
 8005144:	813b      	strh	r3, [r7, #8]
 8005146:	4613      	mov	r3, r2
 8005148:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800514a:	f7fe fb79 	bl	8003840 <HAL_GetTick>
 800514e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b20      	cmp	r3, #32
 800515a:	f040 80d9 	bne.w	8005310 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	2319      	movs	r3, #25
 8005164:	2201      	movs	r2, #1
 8005166:	496d      	ldr	r1, [pc, #436]	@ (800531c <HAL_I2C_Mem_Write+0x1ec>)
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 faad 	bl	80056c8 <I2C_WaitOnFlagUntilTimeout>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005174:	2302      	movs	r3, #2
 8005176:	e0cc      	b.n	8005312 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <HAL_I2C_Mem_Write+0x56>
 8005182:	2302      	movs	r3, #2
 8005184:	e0c5      	b.n	8005312 <HAL_I2C_Mem_Write+0x1e2>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b01      	cmp	r3, #1
 800519a:	d007      	beq.n	80051ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0201 	orr.w	r2, r2, #1
 80051aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2221      	movs	r2, #33	@ 0x21
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2240      	movs	r2, #64	@ 0x40
 80051c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a3a      	ldr	r2, [r7, #32]
 80051d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80051dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4a4d      	ldr	r2, [pc, #308]	@ (8005320 <HAL_I2C_Mem_Write+0x1f0>)
 80051ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051ee:	88f8      	ldrh	r0, [r7, #6]
 80051f0:	893a      	ldrh	r2, [r7, #8]
 80051f2:	8979      	ldrh	r1, [r7, #10]
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	9301      	str	r3, [sp, #4]
 80051f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	4603      	mov	r3, r0
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f000 f9cc 	bl	800559c <I2C_RequestMemoryWrite>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d052      	beq.n	80052b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e081      	b.n	8005312 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f000 fb72 	bl	80058fc <I2C_WaitOnTXEFlagUntilTimeout>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00d      	beq.n	800523a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005222:	2b04      	cmp	r3, #4
 8005224:	d107      	bne.n	8005236 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005234:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e06b      	b.n	8005312 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523e:	781a      	ldrb	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005254:	3b01      	subs	r3, #1
 8005256:	b29a      	uxth	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005260:	b29b      	uxth	r3, r3
 8005262:	3b01      	subs	r3, #1
 8005264:	b29a      	uxth	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	f003 0304 	and.w	r3, r3, #4
 8005274:	2b04      	cmp	r3, #4
 8005276:	d11b      	bne.n	80052b0 <HAL_I2C_Mem_Write+0x180>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800527c:	2b00      	cmp	r3, #0
 800527e:	d017      	beq.n	80052b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005284:	781a      	ldrb	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005290:	1c5a      	adds	r2, r3, #1
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800529a:	3b01      	subs	r3, #1
 800529c:	b29a      	uxth	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	3b01      	subs	r3, #1
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1aa      	bne.n	800520e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 fb65 	bl	800598c <I2C_WaitOnBTFFlagUntilTimeout>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00d      	beq.n	80052e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052cc:	2b04      	cmp	r3, #4
 80052ce:	d107      	bne.n	80052e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e016      	b.n	8005312 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800530c:	2300      	movs	r3, #0
 800530e:	e000      	b.n	8005312 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005310:	2302      	movs	r3, #2
  }
}
 8005312:	4618      	mov	r0, r3
 8005314:	3718      	adds	r7, #24
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	00100002 	.word	0x00100002
 8005320:	ffff0000 	.word	0xffff0000

08005324 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b08a      	sub	sp, #40	@ 0x28
 8005328:	af02      	add	r7, sp, #8
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	607a      	str	r2, [r7, #4]
 800532e:	603b      	str	r3, [r7, #0]
 8005330:	460b      	mov	r3, r1
 8005332:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005334:	f7fe fa84 	bl	8003840 <HAL_GetTick>
 8005338:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800533a:	2300      	movs	r3, #0
 800533c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b20      	cmp	r3, #32
 8005348:	f040 8111 	bne.w	800556e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	2319      	movs	r3, #25
 8005352:	2201      	movs	r2, #1
 8005354:	4988      	ldr	r1, [pc, #544]	@ (8005578 <HAL_I2C_IsDeviceReady+0x254>)
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 f9b6 	bl	80056c8 <I2C_WaitOnFlagUntilTimeout>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005362:	2302      	movs	r3, #2
 8005364:	e104      	b.n	8005570 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800536c:	2b01      	cmp	r3, #1
 800536e:	d101      	bne.n	8005374 <HAL_I2C_IsDeviceReady+0x50>
 8005370:	2302      	movs	r3, #2
 8005372:	e0fd      	b.n	8005570 <HAL_I2C_IsDeviceReady+0x24c>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b01      	cmp	r3, #1
 8005388:	d007      	beq.n	800539a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f042 0201 	orr.w	r2, r2, #1
 8005398:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2224      	movs	r2, #36	@ 0x24
 80053ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4a70      	ldr	r2, [pc, #448]	@ (800557c <HAL_I2C_IsDeviceReady+0x258>)
 80053bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053cc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	9300      	str	r3, [sp, #0]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 f974 	bl	80056c8 <I2C_WaitOnFlagUntilTimeout>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00d      	beq.n	8005402 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053f4:	d103      	bne.n	80053fe <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053fc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e0b6      	b.n	8005570 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005402:	897b      	ldrh	r3, [r7, #10]
 8005404:	b2db      	uxtb	r3, r3
 8005406:	461a      	mov	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005410:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005412:	f7fe fa15 	bl	8003840 <HAL_GetTick>
 8005416:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b02      	cmp	r3, #2
 8005424:	bf0c      	ite	eq
 8005426:	2301      	moveq	r3, #1
 8005428:	2300      	movne	r3, #0
 800542a:	b2db      	uxtb	r3, r3
 800542c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005438:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800543c:	bf0c      	ite	eq
 800543e:	2301      	moveq	r3, #1
 8005440:	2300      	movne	r3, #0
 8005442:	b2db      	uxtb	r3, r3
 8005444:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005446:	e025      	b.n	8005494 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005448:	f7fe f9fa 	bl	8003840 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	429a      	cmp	r2, r3
 8005456:	d302      	bcc.n	800545e <HAL_I2C_IsDeviceReady+0x13a>
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d103      	bne.n	8005466 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	22a0      	movs	r2, #160	@ 0xa0
 8005462:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b02      	cmp	r3, #2
 8005472:	bf0c      	ite	eq
 8005474:	2301      	moveq	r3, #1
 8005476:	2300      	movne	r3, #0
 8005478:	b2db      	uxtb	r3, r3
 800547a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005486:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800548a:	bf0c      	ite	eq
 800548c:	2301      	moveq	r3, #1
 800548e:	2300      	movne	r3, #0
 8005490:	b2db      	uxtb	r3, r3
 8005492:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2ba0      	cmp	r3, #160	@ 0xa0
 800549e:	d005      	beq.n	80054ac <HAL_I2C_IsDeviceReady+0x188>
 80054a0:	7dfb      	ldrb	r3, [r7, #23]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d102      	bne.n	80054ac <HAL_I2C_IsDeviceReady+0x188>
 80054a6:	7dbb      	ldrb	r3, [r7, #22]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0cd      	beq.n	8005448 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d129      	bne.n	8005516 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054d0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054d2:	2300      	movs	r3, #0
 80054d4:	613b      	str	r3, [r7, #16]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	613b      	str	r3, [r7, #16]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	613b      	str	r3, [r7, #16]
 80054e6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	2319      	movs	r3, #25
 80054ee:	2201      	movs	r2, #1
 80054f0:	4921      	ldr	r1, [pc, #132]	@ (8005578 <HAL_I2C_IsDeviceReady+0x254>)
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f000 f8e8 	bl	80056c8 <I2C_WaitOnFlagUntilTimeout>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e036      	b.n	8005570 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2220      	movs	r2, #32
 8005506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	e02c      	b.n	8005570 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005524:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800552e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	2319      	movs	r3, #25
 8005536:	2201      	movs	r2, #1
 8005538:	490f      	ldr	r1, [pc, #60]	@ (8005578 <HAL_I2C_IsDeviceReady+0x254>)
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 f8c4 	bl	80056c8 <I2C_WaitOnFlagUntilTimeout>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e012      	b.n	8005570 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	3301      	adds	r3, #1
 800554e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	429a      	cmp	r2, r3
 8005556:	f4ff af32 	bcc.w	80053be <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2220      	movs	r2, #32
 800555e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e000      	b.n	8005570 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800556e:	2302      	movs	r3, #2
  }
}
 8005570:	4618      	mov	r0, r3
 8005572:	3720      	adds	r7, #32
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	00100002 	.word	0x00100002
 800557c:	ffff0000 	.word	0xffff0000

08005580 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800558e:	b2db      	uxtb	r3, r3
}
 8005590:	4618      	mov	r0, r3
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b088      	sub	sp, #32
 80055a0:	af02      	add	r7, sp, #8
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	4608      	mov	r0, r1
 80055a6:	4611      	mov	r1, r2
 80055a8:	461a      	mov	r2, r3
 80055aa:	4603      	mov	r3, r0
 80055ac:	817b      	strh	r3, [r7, #10]
 80055ae:	460b      	mov	r3, r1
 80055b0:	813b      	strh	r3, [r7, #8]
 80055b2:	4613      	mov	r3, r2
 80055b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f000 f878 	bl	80056c8 <I2C_WaitOnFlagUntilTimeout>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00d      	beq.n	80055fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055ec:	d103      	bne.n	80055f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e05f      	b.n	80056ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055fa:	897b      	ldrh	r3, [r7, #10]
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	461a      	mov	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005608:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800560a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560c:	6a3a      	ldr	r2, [r7, #32]
 800560e:	492d      	ldr	r1, [pc, #180]	@ (80056c4 <I2C_RequestMemoryWrite+0x128>)
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 f8d3 	bl	80057bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e04c      	b.n	80056ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005620:	2300      	movs	r3, #0
 8005622:	617b      	str	r3, [r7, #20]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	617b      	str	r3, [r7, #20]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	617b      	str	r3, [r7, #20]
 8005634:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005638:	6a39      	ldr	r1, [r7, #32]
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 f95e 	bl	80058fc <I2C_WaitOnTXEFlagUntilTimeout>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00d      	beq.n	8005662 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564a:	2b04      	cmp	r3, #4
 800564c:	d107      	bne.n	800565e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800565c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e02b      	b.n	80056ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005662:	88fb      	ldrh	r3, [r7, #6]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d105      	bne.n	8005674 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005668:	893b      	ldrh	r3, [r7, #8]
 800566a:	b2da      	uxtb	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	611a      	str	r2, [r3, #16]
 8005672:	e021      	b.n	80056b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005674:	893b      	ldrh	r3, [r7, #8]
 8005676:	0a1b      	lsrs	r3, r3, #8
 8005678:	b29b      	uxth	r3, r3
 800567a:	b2da      	uxtb	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005684:	6a39      	ldr	r1, [r7, #32]
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f000 f938 	bl	80058fc <I2C_WaitOnTXEFlagUntilTimeout>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00d      	beq.n	80056ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005696:	2b04      	cmp	r3, #4
 8005698:	d107      	bne.n	80056aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e005      	b.n	80056ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056ae:	893b      	ldrh	r3, [r7, #8]
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3718      	adds	r7, #24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	00010002 	.word	0x00010002

080056c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	603b      	str	r3, [r7, #0]
 80056d4:	4613      	mov	r3, r2
 80056d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056d8:	e048      	b.n	800576c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e0:	d044      	beq.n	800576c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056e2:	f7fe f8ad 	bl	8003840 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d302      	bcc.n	80056f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d139      	bne.n	800576c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	0c1b      	lsrs	r3, r3, #16
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d10d      	bne.n	800571e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	43da      	mvns	r2, r3
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	4013      	ands	r3, r2
 800570e:	b29b      	uxth	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	bf0c      	ite	eq
 8005714:	2301      	moveq	r3, #1
 8005716:	2300      	movne	r3, #0
 8005718:	b2db      	uxtb	r3, r3
 800571a:	461a      	mov	r2, r3
 800571c:	e00c      	b.n	8005738 <I2C_WaitOnFlagUntilTimeout+0x70>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	43da      	mvns	r2, r3
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	4013      	ands	r3, r2
 800572a:	b29b      	uxth	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	bf0c      	ite	eq
 8005730:	2301      	moveq	r3, #1
 8005732:	2300      	movne	r3, #0
 8005734:	b2db      	uxtb	r3, r3
 8005736:	461a      	mov	r2, r3
 8005738:	79fb      	ldrb	r3, [r7, #7]
 800573a:	429a      	cmp	r2, r3
 800573c:	d116      	bne.n	800576c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2220      	movs	r2, #32
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005758:	f043 0220 	orr.w	r2, r3, #32
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e023      	b.n	80057b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	0c1b      	lsrs	r3, r3, #16
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b01      	cmp	r3, #1
 8005774:	d10d      	bne.n	8005792 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	43da      	mvns	r2, r3
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	4013      	ands	r3, r2
 8005782:	b29b      	uxth	r3, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	bf0c      	ite	eq
 8005788:	2301      	moveq	r3, #1
 800578a:	2300      	movne	r3, #0
 800578c:	b2db      	uxtb	r3, r3
 800578e:	461a      	mov	r2, r3
 8005790:	e00c      	b.n	80057ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	43da      	mvns	r2, r3
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	4013      	ands	r3, r2
 800579e:	b29b      	uxth	r3, r3
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	bf0c      	ite	eq
 80057a4:	2301      	moveq	r3, #1
 80057a6:	2300      	movne	r3, #0
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	461a      	mov	r2, r3
 80057ac:	79fb      	ldrb	r3, [r7, #7]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d093      	beq.n	80056da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
 80057c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057ca:	e071      	b.n	80058b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057da:	d123      	bne.n	8005824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2220      	movs	r2, #32
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005810:	f043 0204 	orr.w	r2, r3, #4
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e067      	b.n	80058f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800582a:	d041      	beq.n	80058b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800582c:	f7fe f808 	bl	8003840 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	429a      	cmp	r2, r3
 800583a:	d302      	bcc.n	8005842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d136      	bne.n	80058b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	0c1b      	lsrs	r3, r3, #16
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b01      	cmp	r3, #1
 800584a:	d10c      	bne.n	8005866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	43da      	mvns	r2, r3
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	4013      	ands	r3, r2
 8005858:	b29b      	uxth	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	bf14      	ite	ne
 800585e:	2301      	movne	r3, #1
 8005860:	2300      	moveq	r3, #0
 8005862:	b2db      	uxtb	r3, r3
 8005864:	e00b      	b.n	800587e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	43da      	mvns	r2, r3
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	4013      	ands	r3, r2
 8005872:	b29b      	uxth	r3, r3
 8005874:	2b00      	cmp	r3, #0
 8005876:	bf14      	ite	ne
 8005878:	2301      	movne	r3, #1
 800587a:	2300      	moveq	r3, #0
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d016      	beq.n	80058b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589c:	f043 0220 	orr.w	r2, r3, #32
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e021      	b.n	80058f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	0c1b      	lsrs	r3, r3, #16
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d10c      	bne.n	80058d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	43da      	mvns	r2, r3
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	4013      	ands	r3, r2
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	bf14      	ite	ne
 80058cc:	2301      	movne	r3, #1
 80058ce:	2300      	moveq	r3, #0
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	e00b      	b.n	80058ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	43da      	mvns	r2, r3
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	4013      	ands	r3, r2
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	bf14      	ite	ne
 80058e6:	2301      	movne	r3, #1
 80058e8:	2300      	moveq	r3, #0
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f47f af6d 	bne.w	80057cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005908:	e034      	b.n	8005974 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 f886 	bl	8005a1c <I2C_IsAcknowledgeFailed>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e034      	b.n	8005984 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005920:	d028      	beq.n	8005974 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005922:	f7fd ff8d 	bl	8003840 <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	429a      	cmp	r2, r3
 8005930:	d302      	bcc.n	8005938 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d11d      	bne.n	8005974 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005942:	2b80      	cmp	r3, #128	@ 0x80
 8005944:	d016      	beq.n	8005974 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2220      	movs	r2, #32
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005960:	f043 0220 	orr.w	r2, r3, #32
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e007      	b.n	8005984 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800597e:	2b80      	cmp	r3, #128	@ 0x80
 8005980:	d1c3      	bne.n	800590a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005998:	e034      	b.n	8005a04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f000 f83e 	bl	8005a1c <I2C_IsAcknowledgeFailed>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e034      	b.n	8005a14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b0:	d028      	beq.n	8005a04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b2:	f7fd ff45 	bl	8003840 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d302      	bcc.n	80059c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d11d      	bne.n	8005a04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	f003 0304 	and.w	r3, r3, #4
 80059d2:	2b04      	cmp	r3, #4
 80059d4:	d016      	beq.n	8005a04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2220      	movs	r2, #32
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f0:	f043 0220 	orr.w	r2, r3, #32
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e007      	b.n	8005a14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	f003 0304 	and.w	r3, r3, #4
 8005a0e:	2b04      	cmp	r3, #4
 8005a10:	d1c3      	bne.n	800599a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a32:	d11b      	bne.n	8005a6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2220      	movs	r2, #32
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a58:	f043 0204 	orr.w	r2, r3, #4
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e000      	b.n	8005a6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
	...

08005a7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e267      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d075      	beq.n	8005b86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a9a:	4b88      	ldr	r3, [pc, #544]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 030c 	and.w	r3, r3, #12
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d00c      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005aa6:	4b85      	ldr	r3, [pc, #532]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005aae:	2b08      	cmp	r3, #8
 8005ab0:	d112      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ab2:	4b82      	ldr	r3, [pc, #520]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005aba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005abe:	d10b      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ac0:	4b7e      	ldr	r3, [pc, #504]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d05b      	beq.n	8005b84 <HAL_RCC_OscConfig+0x108>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d157      	bne.n	8005b84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e242      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ae0:	d106      	bne.n	8005af0 <HAL_RCC_OscConfig+0x74>
 8005ae2:	4b76      	ldr	r3, [pc, #472]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a75      	ldr	r2, [pc, #468]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005ae8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005aec:	6013      	str	r3, [r2, #0]
 8005aee:	e01d      	b.n	8005b2c <HAL_RCC_OscConfig+0xb0>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005af8:	d10c      	bne.n	8005b14 <HAL_RCC_OscConfig+0x98>
 8005afa:	4b70      	ldr	r3, [pc, #448]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a6f      	ldr	r2, [pc, #444]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005b00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b04:	6013      	str	r3, [r2, #0]
 8005b06:	4b6d      	ldr	r3, [pc, #436]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a6c      	ldr	r2, [pc, #432]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005b0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b10:	6013      	str	r3, [r2, #0]
 8005b12:	e00b      	b.n	8005b2c <HAL_RCC_OscConfig+0xb0>
 8005b14:	4b69      	ldr	r3, [pc, #420]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a68      	ldr	r2, [pc, #416]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005b1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	4b66      	ldr	r3, [pc, #408]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a65      	ldr	r2, [pc, #404]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d013      	beq.n	8005b5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b34:	f7fd fe84 	bl	8003840 <HAL_GetTick>
 8005b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b3a:	e008      	b.n	8005b4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b3c:	f7fd fe80 	bl	8003840 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	2b64      	cmp	r3, #100	@ 0x64
 8005b48:	d901      	bls.n	8005b4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e207      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b4e:	4b5b      	ldr	r3, [pc, #364]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d0f0      	beq.n	8005b3c <HAL_RCC_OscConfig+0xc0>
 8005b5a:	e014      	b.n	8005b86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b5c:	f7fd fe70 	bl	8003840 <HAL_GetTick>
 8005b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b62:	e008      	b.n	8005b76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b64:	f7fd fe6c 	bl	8003840 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b64      	cmp	r3, #100	@ 0x64
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e1f3      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b76:	4b51      	ldr	r3, [pc, #324]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1f0      	bne.n	8005b64 <HAL_RCC_OscConfig+0xe8>
 8005b82:	e000      	b.n	8005b86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d063      	beq.n	8005c5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b92:	4b4a      	ldr	r3, [pc, #296]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f003 030c 	and.w	r3, r3, #12
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00b      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b9e:	4b47      	ldr	r3, [pc, #284]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ba6:	2b08      	cmp	r3, #8
 8005ba8:	d11c      	bne.n	8005be4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005baa:	4b44      	ldr	r3, [pc, #272]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d116      	bne.n	8005be4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bb6:	4b41      	ldr	r3, [pc, #260]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d005      	beq.n	8005bce <HAL_RCC_OscConfig+0x152>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d001      	beq.n	8005bce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e1c7      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bce:	4b3b      	ldr	r3, [pc, #236]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	00db      	lsls	r3, r3, #3
 8005bdc:	4937      	ldr	r1, [pc, #220]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005be2:	e03a      	b.n	8005c5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d020      	beq.n	8005c2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bec:	4b34      	ldr	r3, [pc, #208]	@ (8005cc0 <HAL_RCC_OscConfig+0x244>)
 8005bee:	2201      	movs	r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf2:	f7fd fe25 	bl	8003840 <HAL_GetTick>
 8005bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bf8:	e008      	b.n	8005c0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bfa:	f7fd fe21 	bl	8003840 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d901      	bls.n	8005c0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e1a8      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c0c:	4b2b      	ldr	r3, [pc, #172]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0302 	and.w	r3, r3, #2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d0f0      	beq.n	8005bfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c18:	4b28      	ldr	r3, [pc, #160]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	00db      	lsls	r3, r3, #3
 8005c26:	4925      	ldr	r1, [pc, #148]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	600b      	str	r3, [r1, #0]
 8005c2c:	e015      	b.n	8005c5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c2e:	4b24      	ldr	r3, [pc, #144]	@ (8005cc0 <HAL_RCC_OscConfig+0x244>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c34:	f7fd fe04 	bl	8003840 <HAL_GetTick>
 8005c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c3a:	e008      	b.n	8005c4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c3c:	f7fd fe00 	bl	8003840 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e187      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1f0      	bne.n	8005c3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0308 	and.w	r3, r3, #8
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d036      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d016      	beq.n	8005c9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c6e:	4b15      	ldr	r3, [pc, #84]	@ (8005cc4 <HAL_RCC_OscConfig+0x248>)
 8005c70:	2201      	movs	r2, #1
 8005c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c74:	f7fd fde4 	bl	8003840 <HAL_GetTick>
 8005c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c7a:	e008      	b.n	8005c8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c7c:	f7fd fde0 	bl	8003840 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e167      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005c90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0f0      	beq.n	8005c7c <HAL_RCC_OscConfig+0x200>
 8005c9a:	e01b      	b.n	8005cd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c9c:	4b09      	ldr	r3, [pc, #36]	@ (8005cc4 <HAL_RCC_OscConfig+0x248>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ca2:	f7fd fdcd 	bl	8003840 <HAL_GetTick>
 8005ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ca8:	e00e      	b.n	8005cc8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005caa:	f7fd fdc9 	bl	8003840 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d907      	bls.n	8005cc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e150      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
 8005cbc:	40023800 	.word	0x40023800
 8005cc0:	42470000 	.word	0x42470000
 8005cc4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cc8:	4b88      	ldr	r3, [pc, #544]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005cca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ccc:	f003 0302 	and.w	r3, r3, #2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1ea      	bne.n	8005caa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0304 	and.w	r3, r3, #4
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 8097 	beq.w	8005e10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ce6:	4b81      	ldr	r3, [pc, #516]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10f      	bne.n	8005d12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	60bb      	str	r3, [r7, #8]
 8005cf6:	4b7d      	ldr	r3, [pc, #500]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cfa:	4a7c      	ldr	r2, [pc, #496]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d02:	4b7a      	ldr	r3, [pc, #488]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d0a:	60bb      	str	r3, [r7, #8]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d12:	4b77      	ldr	r3, [pc, #476]	@ (8005ef0 <HAL_RCC_OscConfig+0x474>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d118      	bne.n	8005d50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d1e:	4b74      	ldr	r3, [pc, #464]	@ (8005ef0 <HAL_RCC_OscConfig+0x474>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a73      	ldr	r2, [pc, #460]	@ (8005ef0 <HAL_RCC_OscConfig+0x474>)
 8005d24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d2a:	f7fd fd89 	bl	8003840 <HAL_GetTick>
 8005d2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d30:	e008      	b.n	8005d44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d32:	f7fd fd85 	bl	8003840 <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d901      	bls.n	8005d44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e10c      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d44:	4b6a      	ldr	r3, [pc, #424]	@ (8005ef0 <HAL_RCC_OscConfig+0x474>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d0f0      	beq.n	8005d32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d106      	bne.n	8005d66 <HAL_RCC_OscConfig+0x2ea>
 8005d58:	4b64      	ldr	r3, [pc, #400]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d5c:	4a63      	ldr	r2, [pc, #396]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005d5e:	f043 0301 	orr.w	r3, r3, #1
 8005d62:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d64:	e01c      	b.n	8005da0 <HAL_RCC_OscConfig+0x324>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	2b05      	cmp	r3, #5
 8005d6c:	d10c      	bne.n	8005d88 <HAL_RCC_OscConfig+0x30c>
 8005d6e:	4b5f      	ldr	r3, [pc, #380]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d72:	4a5e      	ldr	r2, [pc, #376]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005d74:	f043 0304 	orr.w	r3, r3, #4
 8005d78:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d7a:	4b5c      	ldr	r3, [pc, #368]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d7e:	4a5b      	ldr	r2, [pc, #364]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005d80:	f043 0301 	orr.w	r3, r3, #1
 8005d84:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d86:	e00b      	b.n	8005da0 <HAL_RCC_OscConfig+0x324>
 8005d88:	4b58      	ldr	r3, [pc, #352]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d8c:	4a57      	ldr	r2, [pc, #348]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005d8e:	f023 0301 	bic.w	r3, r3, #1
 8005d92:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d94:	4b55      	ldr	r3, [pc, #340]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d98:	4a54      	ldr	r2, [pc, #336]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005d9a:	f023 0304 	bic.w	r3, r3, #4
 8005d9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d015      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005da8:	f7fd fd4a 	bl	8003840 <HAL_GetTick>
 8005dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dae:	e00a      	b.n	8005dc6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005db0:	f7fd fd46 	bl	8003840 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d901      	bls.n	8005dc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e0cb      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dc6:	4b49      	ldr	r3, [pc, #292]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d0ee      	beq.n	8005db0 <HAL_RCC_OscConfig+0x334>
 8005dd2:	e014      	b.n	8005dfe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dd4:	f7fd fd34 	bl	8003840 <HAL_GetTick>
 8005dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dda:	e00a      	b.n	8005df2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ddc:	f7fd fd30 	bl	8003840 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e0b5      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005df2:	4b3e      	ldr	r3, [pc, #248]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1ee      	bne.n	8005ddc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005dfe:	7dfb      	ldrb	r3, [r7, #23]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d105      	bne.n	8005e10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e04:	4b39      	ldr	r3, [pc, #228]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e08:	4a38      	ldr	r2, [pc, #224]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005e0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 80a1 	beq.w	8005f5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e1a:	4b34      	ldr	r3, [pc, #208]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f003 030c 	and.w	r3, r3, #12
 8005e22:	2b08      	cmp	r3, #8
 8005e24:	d05c      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d141      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e2e:	4b31      	ldr	r3, [pc, #196]	@ (8005ef4 <HAL_RCC_OscConfig+0x478>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e34:	f7fd fd04 	bl	8003840 <HAL_GetTick>
 8005e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e3a:	e008      	b.n	8005e4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e3c:	f7fd fd00 	bl	8003840 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d901      	bls.n	8005e4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e087      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e4e:	4b27      	ldr	r3, [pc, #156]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1f0      	bne.n	8005e3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	69da      	ldr	r2, [r3, #28]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	431a      	orrs	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e68:	019b      	lsls	r3, r3, #6
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e70:	085b      	lsrs	r3, r3, #1
 8005e72:	3b01      	subs	r3, #1
 8005e74:	041b      	lsls	r3, r3, #16
 8005e76:	431a      	orrs	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e7c:	061b      	lsls	r3, r3, #24
 8005e7e:	491b      	ldr	r1, [pc, #108]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e84:	4b1b      	ldr	r3, [pc, #108]	@ (8005ef4 <HAL_RCC_OscConfig+0x478>)
 8005e86:	2201      	movs	r2, #1
 8005e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e8a:	f7fd fcd9 	bl	8003840 <HAL_GetTick>
 8005e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e90:	e008      	b.n	8005ea4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e92:	f7fd fcd5 	bl	8003840 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d901      	bls.n	8005ea4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e05c      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ea4:	4b11      	ldr	r3, [pc, #68]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d0f0      	beq.n	8005e92 <HAL_RCC_OscConfig+0x416>
 8005eb0:	e054      	b.n	8005f5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eb2:	4b10      	ldr	r3, [pc, #64]	@ (8005ef4 <HAL_RCC_OscConfig+0x478>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb8:	f7fd fcc2 	bl	8003840 <HAL_GetTick>
 8005ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ebe:	e008      	b.n	8005ed2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ec0:	f7fd fcbe 	bl	8003840 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e045      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ed2:	4b06      	ldr	r3, [pc, #24]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1f0      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x444>
 8005ede:	e03d      	b.n	8005f5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d107      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e038      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
 8005eec:	40023800 	.word	0x40023800
 8005ef0:	40007000 	.word	0x40007000
 8005ef4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8005f68 <HAL_RCC_OscConfig+0x4ec>)
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d028      	beq.n	8005f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d121      	bne.n	8005f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d11a      	bne.n	8005f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005f28:	4013      	ands	r3, r2
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005f2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d111      	bne.n	8005f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f3e:	085b      	lsrs	r3, r3, #1
 8005f40:	3b01      	subs	r3, #1
 8005f42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d107      	bne.n	8005f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d001      	beq.n	8005f5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e000      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	40023800 	.word	0x40023800

08005f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e0cc      	b.n	800611a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f80:	4b68      	ldr	r3, [pc, #416]	@ (8006124 <HAL_RCC_ClockConfig+0x1b8>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0307 	and.w	r3, r3, #7
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d90c      	bls.n	8005fa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f8e:	4b65      	ldr	r3, [pc, #404]	@ (8006124 <HAL_RCC_ClockConfig+0x1b8>)
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	b2d2      	uxtb	r2, r2
 8005f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f96:	4b63      	ldr	r3, [pc, #396]	@ (8006124 <HAL_RCC_ClockConfig+0x1b8>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0307 	and.w	r3, r3, #7
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d001      	beq.n	8005fa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e0b8      	b.n	800611a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d020      	beq.n	8005ff6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0304 	and.w	r3, r3, #4
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d005      	beq.n	8005fcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fc0:	4b59      	ldr	r3, [pc, #356]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	4a58      	ldr	r2, [pc, #352]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005fca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0308 	and.w	r3, r3, #8
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d005      	beq.n	8005fe4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fd8:	4b53      	ldr	r3, [pc, #332]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	4a52      	ldr	r2, [pc, #328]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 8005fde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005fe2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fe4:	4b50      	ldr	r3, [pc, #320]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	494d      	ldr	r1, [pc, #308]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d044      	beq.n	800608c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d107      	bne.n	800601a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800600a:	4b47      	ldr	r3, [pc, #284]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d119      	bne.n	800604a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e07f      	b.n	800611a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	2b02      	cmp	r3, #2
 8006020:	d003      	beq.n	800602a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006026:	2b03      	cmp	r3, #3
 8006028:	d107      	bne.n	800603a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800602a:	4b3f      	ldr	r3, [pc, #252]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d109      	bne.n	800604a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e06f      	b.n	800611a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800603a:	4b3b      	ldr	r3, [pc, #236]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e067      	b.n	800611a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800604a:	4b37      	ldr	r3, [pc, #220]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f023 0203 	bic.w	r2, r3, #3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	4934      	ldr	r1, [pc, #208]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 8006058:	4313      	orrs	r3, r2
 800605a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800605c:	f7fd fbf0 	bl	8003840 <HAL_GetTick>
 8006060:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006062:	e00a      	b.n	800607a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006064:	f7fd fbec 	bl	8003840 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006072:	4293      	cmp	r3, r2
 8006074:	d901      	bls.n	800607a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e04f      	b.n	800611a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800607a:	4b2b      	ldr	r3, [pc, #172]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f003 020c 	and.w	r2, r3, #12
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	429a      	cmp	r2, r3
 800608a:	d1eb      	bne.n	8006064 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800608c:	4b25      	ldr	r3, [pc, #148]	@ (8006124 <HAL_RCC_ClockConfig+0x1b8>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0307 	and.w	r3, r3, #7
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	429a      	cmp	r2, r3
 8006098:	d20c      	bcs.n	80060b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800609a:	4b22      	ldr	r3, [pc, #136]	@ (8006124 <HAL_RCC_ClockConfig+0x1b8>)
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	b2d2      	uxtb	r2, r2
 80060a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060a2:	4b20      	ldr	r3, [pc, #128]	@ (8006124 <HAL_RCC_ClockConfig+0x1b8>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0307 	and.w	r3, r3, #7
 80060aa:	683a      	ldr	r2, [r7, #0]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d001      	beq.n	80060b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e032      	b.n	800611a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0304 	and.w	r3, r3, #4
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d008      	beq.n	80060d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060c0:	4b19      	ldr	r3, [pc, #100]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	4916      	ldr	r1, [pc, #88]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0308 	and.w	r3, r3, #8
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d009      	beq.n	80060f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060de:	4b12      	ldr	r3, [pc, #72]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	00db      	lsls	r3, r3, #3
 80060ec:	490e      	ldr	r1, [pc, #56]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80060f2:	f000 f821 	bl	8006138 <HAL_RCC_GetSysClockFreq>
 80060f6:	4602      	mov	r2, r0
 80060f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	091b      	lsrs	r3, r3, #4
 80060fe:	f003 030f 	and.w	r3, r3, #15
 8006102:	490a      	ldr	r1, [pc, #40]	@ (800612c <HAL_RCC_ClockConfig+0x1c0>)
 8006104:	5ccb      	ldrb	r3, [r1, r3]
 8006106:	fa22 f303 	lsr.w	r3, r2, r3
 800610a:	4a09      	ldr	r2, [pc, #36]	@ (8006130 <HAL_RCC_ClockConfig+0x1c4>)
 800610c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800610e:	4b09      	ldr	r3, [pc, #36]	@ (8006134 <HAL_RCC_ClockConfig+0x1c8>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4618      	mov	r0, r3
 8006114:	f7fd fb50 	bl	80037b8 <HAL_InitTick>

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	40023c00 	.word	0x40023c00
 8006128:	40023800 	.word	0x40023800
 800612c:	08009b14 	.word	0x08009b14
 8006130:	200000ac 	.word	0x200000ac
 8006134:	200000b8 	.word	0x200000b8

08006138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800613c:	b090      	sub	sp, #64	@ 0x40
 800613e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006140:	2300      	movs	r3, #0
 8006142:	637b      	str	r3, [r7, #52]	@ 0x34
 8006144:	2300      	movs	r3, #0
 8006146:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006148:	2300      	movs	r3, #0
 800614a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006150:	4b59      	ldr	r3, [pc, #356]	@ (80062b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f003 030c 	and.w	r3, r3, #12
 8006158:	2b08      	cmp	r3, #8
 800615a:	d00d      	beq.n	8006178 <HAL_RCC_GetSysClockFreq+0x40>
 800615c:	2b08      	cmp	r3, #8
 800615e:	f200 80a1 	bhi.w	80062a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8006162:	2b00      	cmp	r3, #0
 8006164:	d002      	beq.n	800616c <HAL_RCC_GetSysClockFreq+0x34>
 8006166:	2b04      	cmp	r3, #4
 8006168:	d003      	beq.n	8006172 <HAL_RCC_GetSysClockFreq+0x3a>
 800616a:	e09b      	b.n	80062a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800616c:	4b53      	ldr	r3, [pc, #332]	@ (80062bc <HAL_RCC_GetSysClockFreq+0x184>)
 800616e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8006170:	e09b      	b.n	80062aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006172:	4b53      	ldr	r3, [pc, #332]	@ (80062c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006174:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006176:	e098      	b.n	80062aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006178:	4b4f      	ldr	r3, [pc, #316]	@ (80062b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006180:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006182:	4b4d      	ldr	r3, [pc, #308]	@ (80062b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d028      	beq.n	80061e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800618e:	4b4a      	ldr	r3, [pc, #296]	@ (80062b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	099b      	lsrs	r3, r3, #6
 8006194:	2200      	movs	r2, #0
 8006196:	623b      	str	r3, [r7, #32]
 8006198:	627a      	str	r2, [r7, #36]	@ 0x24
 800619a:	6a3b      	ldr	r3, [r7, #32]
 800619c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80061a0:	2100      	movs	r1, #0
 80061a2:	4b47      	ldr	r3, [pc, #284]	@ (80062c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80061a4:	fb03 f201 	mul.w	r2, r3, r1
 80061a8:	2300      	movs	r3, #0
 80061aa:	fb00 f303 	mul.w	r3, r0, r3
 80061ae:	4413      	add	r3, r2
 80061b0:	4a43      	ldr	r2, [pc, #268]	@ (80062c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80061b2:	fba0 1202 	umull	r1, r2, r0, r2
 80061b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061b8:	460a      	mov	r2, r1
 80061ba:	62ba      	str	r2, [r7, #40]	@ 0x28
 80061bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061be:	4413      	add	r3, r2
 80061c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061c4:	2200      	movs	r2, #0
 80061c6:	61bb      	str	r3, [r7, #24]
 80061c8:	61fa      	str	r2, [r7, #28]
 80061ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80061d2:	f7fa fd4b 	bl	8000c6c <__aeabi_uldivmod>
 80061d6:	4602      	mov	r2, r0
 80061d8:	460b      	mov	r3, r1
 80061da:	4613      	mov	r3, r2
 80061dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061de:	e053      	b.n	8006288 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061e0:	4b35      	ldr	r3, [pc, #212]	@ (80062b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	099b      	lsrs	r3, r3, #6
 80061e6:	2200      	movs	r2, #0
 80061e8:	613b      	str	r3, [r7, #16]
 80061ea:	617a      	str	r2, [r7, #20]
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80061f2:	f04f 0b00 	mov.w	fp, #0
 80061f6:	4652      	mov	r2, sl
 80061f8:	465b      	mov	r3, fp
 80061fa:	f04f 0000 	mov.w	r0, #0
 80061fe:	f04f 0100 	mov.w	r1, #0
 8006202:	0159      	lsls	r1, r3, #5
 8006204:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006208:	0150      	lsls	r0, r2, #5
 800620a:	4602      	mov	r2, r0
 800620c:	460b      	mov	r3, r1
 800620e:	ebb2 080a 	subs.w	r8, r2, sl
 8006212:	eb63 090b 	sbc.w	r9, r3, fp
 8006216:	f04f 0200 	mov.w	r2, #0
 800621a:	f04f 0300 	mov.w	r3, #0
 800621e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006222:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006226:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800622a:	ebb2 0408 	subs.w	r4, r2, r8
 800622e:	eb63 0509 	sbc.w	r5, r3, r9
 8006232:	f04f 0200 	mov.w	r2, #0
 8006236:	f04f 0300 	mov.w	r3, #0
 800623a:	00eb      	lsls	r3, r5, #3
 800623c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006240:	00e2      	lsls	r2, r4, #3
 8006242:	4614      	mov	r4, r2
 8006244:	461d      	mov	r5, r3
 8006246:	eb14 030a 	adds.w	r3, r4, sl
 800624a:	603b      	str	r3, [r7, #0]
 800624c:	eb45 030b 	adc.w	r3, r5, fp
 8006250:	607b      	str	r3, [r7, #4]
 8006252:	f04f 0200 	mov.w	r2, #0
 8006256:	f04f 0300 	mov.w	r3, #0
 800625a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800625e:	4629      	mov	r1, r5
 8006260:	028b      	lsls	r3, r1, #10
 8006262:	4621      	mov	r1, r4
 8006264:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006268:	4621      	mov	r1, r4
 800626a:	028a      	lsls	r2, r1, #10
 800626c:	4610      	mov	r0, r2
 800626e:	4619      	mov	r1, r3
 8006270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006272:	2200      	movs	r2, #0
 8006274:	60bb      	str	r3, [r7, #8]
 8006276:	60fa      	str	r2, [r7, #12]
 8006278:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800627c:	f7fa fcf6 	bl	8000c6c <__aeabi_uldivmod>
 8006280:	4602      	mov	r2, r0
 8006282:	460b      	mov	r3, r1
 8006284:	4613      	mov	r3, r2
 8006286:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006288:	4b0b      	ldr	r3, [pc, #44]	@ (80062b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	0c1b      	lsrs	r3, r3, #16
 800628e:	f003 0303 	and.w	r3, r3, #3
 8006292:	3301      	adds	r3, #1
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8006298:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800629a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629c:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80062a2:	e002      	b.n	80062aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062a4:	4b05      	ldr	r3, [pc, #20]	@ (80062bc <HAL_RCC_GetSysClockFreq+0x184>)
 80062a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80062a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3740      	adds	r7, #64	@ 0x40
 80062b0:	46bd      	mov	sp, r7
 80062b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062b6:	bf00      	nop
 80062b8:	40023800 	.word	0x40023800
 80062bc:	00f42400 	.word	0x00f42400
 80062c0:	017d7840 	.word	0x017d7840

080062c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062c4:	b480      	push	{r7}
 80062c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062c8:	4b03      	ldr	r3, [pc, #12]	@ (80062d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80062ca:	681b      	ldr	r3, [r3, #0]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	200000ac 	.word	0x200000ac

080062dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80062e0:	f7ff fff0 	bl	80062c4 <HAL_RCC_GetHCLKFreq>
 80062e4:	4602      	mov	r2, r0
 80062e6:	4b05      	ldr	r3, [pc, #20]	@ (80062fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	0a9b      	lsrs	r3, r3, #10
 80062ec:	f003 0307 	and.w	r3, r3, #7
 80062f0:	4903      	ldr	r1, [pc, #12]	@ (8006300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062f2:	5ccb      	ldrb	r3, [r1, r3]
 80062f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	40023800 	.word	0x40023800
 8006300:	08009b24 	.word	0x08009b24

08006304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006308:	f7ff ffdc 	bl	80062c4 <HAL_RCC_GetHCLKFreq>
 800630c:	4602      	mov	r2, r0
 800630e:	4b05      	ldr	r3, [pc, #20]	@ (8006324 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	0b5b      	lsrs	r3, r3, #13
 8006314:	f003 0307 	and.w	r3, r3, #7
 8006318:	4903      	ldr	r1, [pc, #12]	@ (8006328 <HAL_RCC_GetPCLK2Freq+0x24>)
 800631a:	5ccb      	ldrb	r3, [r1, r3]
 800631c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006320:	4618      	mov	r0, r3
 8006322:	bd80      	pop	{r7, pc}
 8006324:	40023800 	.word	0x40023800
 8006328:	08009b24 	.word	0x08009b24

0800632c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d101      	bne.n	800633e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e041      	b.n	80063c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d106      	bne.n	8006358 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f7fc f902 	bl	800255c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2202      	movs	r2, #2
 800635c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	3304      	adds	r3, #4
 8006368:	4619      	mov	r1, r3
 800636a:	4610      	mov	r0, r2
 800636c:	f000 fa70 	bl	8006850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
	...

080063cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d001      	beq.n	80063e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e044      	b.n	800646e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2202      	movs	r2, #2
 80063e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68da      	ldr	r2, [r3, #12]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f042 0201 	orr.w	r2, r2, #1
 80063fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a1e      	ldr	r2, [pc, #120]	@ (800647c <HAL_TIM_Base_Start_IT+0xb0>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d018      	beq.n	8006438 <HAL_TIM_Base_Start_IT+0x6c>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800640e:	d013      	beq.n	8006438 <HAL_TIM_Base_Start_IT+0x6c>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a1a      	ldr	r2, [pc, #104]	@ (8006480 <HAL_TIM_Base_Start_IT+0xb4>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d00e      	beq.n	8006438 <HAL_TIM_Base_Start_IT+0x6c>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a19      	ldr	r2, [pc, #100]	@ (8006484 <HAL_TIM_Base_Start_IT+0xb8>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d009      	beq.n	8006438 <HAL_TIM_Base_Start_IT+0x6c>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a17      	ldr	r2, [pc, #92]	@ (8006488 <HAL_TIM_Base_Start_IT+0xbc>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d004      	beq.n	8006438 <HAL_TIM_Base_Start_IT+0x6c>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a16      	ldr	r2, [pc, #88]	@ (800648c <HAL_TIM_Base_Start_IT+0xc0>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d111      	bne.n	800645c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f003 0307 	and.w	r3, r3, #7
 8006442:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2b06      	cmp	r3, #6
 8006448:	d010      	beq.n	800646c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f042 0201 	orr.w	r2, r2, #1
 8006458:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800645a:	e007      	b.n	800646c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f042 0201 	orr.w	r2, r2, #1
 800646a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	40010000 	.word	0x40010000
 8006480:	40000400 	.word	0x40000400
 8006484:	40000800 	.word	0x40000800
 8006488:	40000c00 	.word	0x40000c00
 800648c:	40014000 	.word	0x40014000

08006490 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d020      	beq.n	80064f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f003 0302 	and.w	r3, r3, #2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d01b      	beq.n	80064f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f06f 0202 	mvn.w	r2, #2
 80064c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2201      	movs	r2, #1
 80064ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	f003 0303 	and.w	r3, r3, #3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f999 	bl	8006812 <HAL_TIM_IC_CaptureCallback>
 80064e0:	e005      	b.n	80064ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f98b 	bl	80067fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f99c 	bl	8006826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	f003 0304 	and.w	r3, r3, #4
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d020      	beq.n	8006540 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f003 0304 	and.w	r3, r3, #4
 8006504:	2b00      	cmp	r3, #0
 8006506:	d01b      	beq.n	8006540 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f06f 0204 	mvn.w	r2, #4
 8006510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2202      	movs	r2, #2
 8006516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f973 	bl	8006812 <HAL_TIM_IC_CaptureCallback>
 800652c:	e005      	b.n	800653a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f965 	bl	80067fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 f976 	bl	8006826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	f003 0308 	and.w	r3, r3, #8
 8006546:	2b00      	cmp	r3, #0
 8006548:	d020      	beq.n	800658c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f003 0308 	and.w	r3, r3, #8
 8006550:	2b00      	cmp	r3, #0
 8006552:	d01b      	beq.n	800658c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f06f 0208 	mvn.w	r2, #8
 800655c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2204      	movs	r2, #4
 8006562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	69db      	ldr	r3, [r3, #28]
 800656a:	f003 0303 	and.w	r3, r3, #3
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f94d 	bl	8006812 <HAL_TIM_IC_CaptureCallback>
 8006578:	e005      	b.n	8006586 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f93f 	bl	80067fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 f950 	bl	8006826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	f003 0310 	and.w	r3, r3, #16
 8006592:	2b00      	cmp	r3, #0
 8006594:	d020      	beq.n	80065d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f003 0310 	and.w	r3, r3, #16
 800659c:	2b00      	cmp	r3, #0
 800659e:	d01b      	beq.n	80065d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f06f 0210 	mvn.w	r2, #16
 80065a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2208      	movs	r2, #8
 80065ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d003      	beq.n	80065c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f927 	bl	8006812 <HAL_TIM_IC_CaptureCallback>
 80065c4:	e005      	b.n	80065d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f919 	bl	80067fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f92a 	bl	8006826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00c      	beq.n	80065fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d007      	beq.n	80065fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f06f 0201 	mvn.w	r2, #1
 80065f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7fa fdce 	bl	8001198 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00c      	beq.n	8006620 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800660c:	2b00      	cmp	r3, #0
 800660e:	d007      	beq.n	8006620 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fab6 	bl	8006b8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00c      	beq.n	8006644 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006630:	2b00      	cmp	r3, #0
 8006632:	d007      	beq.n	8006644 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800663c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f8fb 	bl	800683a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	f003 0320 	and.w	r3, r3, #32
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00c      	beq.n	8006668 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f003 0320 	and.w	r3, r3, #32
 8006654:	2b00      	cmp	r3, #0
 8006656:	d007      	beq.n	8006668 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f06f 0220 	mvn.w	r2, #32
 8006660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fa88 	bl	8006b78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006668:	bf00      	nop
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006684:	2b01      	cmp	r3, #1
 8006686:	d101      	bne.n	800668c <HAL_TIM_ConfigClockSource+0x1c>
 8006688:	2302      	movs	r3, #2
 800668a:	e0b4      	b.n	80067f6 <HAL_TIM_ConfigClockSource+0x186>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2202      	movs	r2, #2
 8006698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80066aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066c4:	d03e      	beq.n	8006744 <HAL_TIM_ConfigClockSource+0xd4>
 80066c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066ca:	f200 8087 	bhi.w	80067dc <HAL_TIM_ConfigClockSource+0x16c>
 80066ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066d2:	f000 8086 	beq.w	80067e2 <HAL_TIM_ConfigClockSource+0x172>
 80066d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066da:	d87f      	bhi.n	80067dc <HAL_TIM_ConfigClockSource+0x16c>
 80066dc:	2b70      	cmp	r3, #112	@ 0x70
 80066de:	d01a      	beq.n	8006716 <HAL_TIM_ConfigClockSource+0xa6>
 80066e0:	2b70      	cmp	r3, #112	@ 0x70
 80066e2:	d87b      	bhi.n	80067dc <HAL_TIM_ConfigClockSource+0x16c>
 80066e4:	2b60      	cmp	r3, #96	@ 0x60
 80066e6:	d050      	beq.n	800678a <HAL_TIM_ConfigClockSource+0x11a>
 80066e8:	2b60      	cmp	r3, #96	@ 0x60
 80066ea:	d877      	bhi.n	80067dc <HAL_TIM_ConfigClockSource+0x16c>
 80066ec:	2b50      	cmp	r3, #80	@ 0x50
 80066ee:	d03c      	beq.n	800676a <HAL_TIM_ConfigClockSource+0xfa>
 80066f0:	2b50      	cmp	r3, #80	@ 0x50
 80066f2:	d873      	bhi.n	80067dc <HAL_TIM_ConfigClockSource+0x16c>
 80066f4:	2b40      	cmp	r3, #64	@ 0x40
 80066f6:	d058      	beq.n	80067aa <HAL_TIM_ConfigClockSource+0x13a>
 80066f8:	2b40      	cmp	r3, #64	@ 0x40
 80066fa:	d86f      	bhi.n	80067dc <HAL_TIM_ConfigClockSource+0x16c>
 80066fc:	2b30      	cmp	r3, #48	@ 0x30
 80066fe:	d064      	beq.n	80067ca <HAL_TIM_ConfigClockSource+0x15a>
 8006700:	2b30      	cmp	r3, #48	@ 0x30
 8006702:	d86b      	bhi.n	80067dc <HAL_TIM_ConfigClockSource+0x16c>
 8006704:	2b20      	cmp	r3, #32
 8006706:	d060      	beq.n	80067ca <HAL_TIM_ConfigClockSource+0x15a>
 8006708:	2b20      	cmp	r3, #32
 800670a:	d867      	bhi.n	80067dc <HAL_TIM_ConfigClockSource+0x16c>
 800670c:	2b00      	cmp	r3, #0
 800670e:	d05c      	beq.n	80067ca <HAL_TIM_ConfigClockSource+0x15a>
 8006710:	2b10      	cmp	r3, #16
 8006712:	d05a      	beq.n	80067ca <HAL_TIM_ConfigClockSource+0x15a>
 8006714:	e062      	b.n	80067dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006726:	f000 f999 	bl	8006a5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006738:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	609a      	str	r2, [r3, #8]
      break;
 8006742:	e04f      	b.n	80067e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006754:	f000 f982 	bl	8006a5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689a      	ldr	r2, [r3, #8]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006766:	609a      	str	r2, [r3, #8]
      break;
 8006768:	e03c      	b.n	80067e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006776:	461a      	mov	r2, r3
 8006778:	f000 f8f6 	bl	8006968 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2150      	movs	r1, #80	@ 0x50
 8006782:	4618      	mov	r0, r3
 8006784:	f000 f94f 	bl	8006a26 <TIM_ITRx_SetConfig>
      break;
 8006788:	e02c      	b.n	80067e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006796:	461a      	mov	r2, r3
 8006798:	f000 f915 	bl	80069c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2160      	movs	r1, #96	@ 0x60
 80067a2:	4618      	mov	r0, r3
 80067a4:	f000 f93f 	bl	8006a26 <TIM_ITRx_SetConfig>
      break;
 80067a8:	e01c      	b.n	80067e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067b6:	461a      	mov	r2, r3
 80067b8:	f000 f8d6 	bl	8006968 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2140      	movs	r1, #64	@ 0x40
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 f92f 	bl	8006a26 <TIM_ITRx_SetConfig>
      break;
 80067c8:	e00c      	b.n	80067e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4619      	mov	r1, r3
 80067d4:	4610      	mov	r0, r2
 80067d6:	f000 f926 	bl	8006a26 <TIM_ITRx_SetConfig>
      break;
 80067da:	e003      	b.n	80067e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	73fb      	strb	r3, [r7, #15]
      break;
 80067e0:	e000      	b.n	80067e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80067e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067fe:	b480      	push	{r7}
 8006800:	b083      	sub	sp, #12
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006806:	bf00      	nop
 8006808:	370c      	adds	r7, #12
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr

08006812 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006812:	b480      	push	{r7}
 8006814:	b083      	sub	sp, #12
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800681a:	bf00      	nop
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006826:	b480      	push	{r7}
 8006828:	b083      	sub	sp, #12
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800682e:	bf00      	nop
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800683a:	b480      	push	{r7}
 800683c:	b083      	sub	sp, #12
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006842:	bf00      	nop
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
	...

08006850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a3a      	ldr	r2, [pc, #232]	@ (800694c <TIM_Base_SetConfig+0xfc>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d00f      	beq.n	8006888 <TIM_Base_SetConfig+0x38>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800686e:	d00b      	beq.n	8006888 <TIM_Base_SetConfig+0x38>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a37      	ldr	r2, [pc, #220]	@ (8006950 <TIM_Base_SetConfig+0x100>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d007      	beq.n	8006888 <TIM_Base_SetConfig+0x38>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a36      	ldr	r2, [pc, #216]	@ (8006954 <TIM_Base_SetConfig+0x104>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d003      	beq.n	8006888 <TIM_Base_SetConfig+0x38>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a35      	ldr	r2, [pc, #212]	@ (8006958 <TIM_Base_SetConfig+0x108>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d108      	bne.n	800689a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800688e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	4313      	orrs	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a2b      	ldr	r2, [pc, #172]	@ (800694c <TIM_Base_SetConfig+0xfc>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d01b      	beq.n	80068da <TIM_Base_SetConfig+0x8a>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068a8:	d017      	beq.n	80068da <TIM_Base_SetConfig+0x8a>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a28      	ldr	r2, [pc, #160]	@ (8006950 <TIM_Base_SetConfig+0x100>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d013      	beq.n	80068da <TIM_Base_SetConfig+0x8a>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a27      	ldr	r2, [pc, #156]	@ (8006954 <TIM_Base_SetConfig+0x104>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d00f      	beq.n	80068da <TIM_Base_SetConfig+0x8a>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a26      	ldr	r2, [pc, #152]	@ (8006958 <TIM_Base_SetConfig+0x108>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d00b      	beq.n	80068da <TIM_Base_SetConfig+0x8a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a25      	ldr	r2, [pc, #148]	@ (800695c <TIM_Base_SetConfig+0x10c>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d007      	beq.n	80068da <TIM_Base_SetConfig+0x8a>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a24      	ldr	r2, [pc, #144]	@ (8006960 <TIM_Base_SetConfig+0x110>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d003      	beq.n	80068da <TIM_Base_SetConfig+0x8a>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a23      	ldr	r2, [pc, #140]	@ (8006964 <TIM_Base_SetConfig+0x114>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d108      	bne.n	80068ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	689a      	ldr	r2, [r3, #8]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a0e      	ldr	r2, [pc, #56]	@ (800694c <TIM_Base_SetConfig+0xfc>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d103      	bne.n	8006920 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	691a      	ldr	r2, [r3, #16]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	2b01      	cmp	r3, #1
 8006930:	d105      	bne.n	800693e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	f023 0201 	bic.w	r2, r3, #1
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	611a      	str	r2, [r3, #16]
  }
}
 800693e:	bf00      	nop
 8006940:	3714      	adds	r7, #20
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	40010000 	.word	0x40010000
 8006950:	40000400 	.word	0x40000400
 8006954:	40000800 	.word	0x40000800
 8006958:	40000c00 	.word	0x40000c00
 800695c:	40014000 	.word	0x40014000
 8006960:	40014400 	.word	0x40014400
 8006964:	40014800 	.word	0x40014800

08006968 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006968:	b480      	push	{r7}
 800696a:	b087      	sub	sp, #28
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	f023 0201 	bic.w	r2, r3, #1
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006992:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	011b      	lsls	r3, r3, #4
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	4313      	orrs	r3, r2
 800699c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f023 030a 	bic.w	r3, r3, #10
 80069a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	621a      	str	r2, [r3, #32]
}
 80069ba:	bf00      	nop
 80069bc:	371c      	adds	r7, #28
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b087      	sub	sp, #28
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	60f8      	str	r0, [r7, #12]
 80069ce:	60b9      	str	r1, [r7, #8]
 80069d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6a1b      	ldr	r3, [r3, #32]
 80069dc:	f023 0210 	bic.w	r2, r3, #16
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80069f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	031b      	lsls	r3, r3, #12
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006a02:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	011b      	lsls	r3, r3, #4
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	621a      	str	r2, [r3, #32]
}
 8006a1a:	bf00      	nop
 8006a1c:	371c      	adds	r7, #28
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr

08006a26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b085      	sub	sp, #20
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
 8006a2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a3e:	683a      	ldr	r2, [r7, #0]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	f043 0307 	orr.w	r3, r3, #7
 8006a48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	609a      	str	r2, [r3, #8]
}
 8006a50:	bf00      	nop
 8006a52:	3714      	adds	r7, #20
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b087      	sub	sp, #28
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
 8006a68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	021a      	lsls	r2, r3, #8
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	431a      	orrs	r2, r3
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	609a      	str	r2, [r3, #8]
}
 8006a90:	bf00      	nop
 8006a92:	371c      	adds	r7, #28
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d101      	bne.n	8006ab4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	e050      	b.n	8006b56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2202      	movs	r2, #2
 8006ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ada:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a1c      	ldr	r2, [pc, #112]	@ (8006b64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d018      	beq.n	8006b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b00:	d013      	beq.n	8006b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a18      	ldr	r2, [pc, #96]	@ (8006b68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d00e      	beq.n	8006b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a16      	ldr	r2, [pc, #88]	@ (8006b6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d009      	beq.n	8006b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a15      	ldr	r2, [pc, #84]	@ (8006b70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d004      	beq.n	8006b2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a13      	ldr	r2, [pc, #76]	@ (8006b74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d10c      	bne.n	8006b44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3714      	adds	r7, #20
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	40010000 	.word	0x40010000
 8006b68:	40000400 	.word	0x40000400
 8006b6c:	40000800 	.word	0x40000800
 8006b70:	40000c00 	.word	0x40000c00
 8006b74:	40014000 	.word	0x40014000

08006b78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d101      	bne.n	8006bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e042      	b.n	8006c38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d106      	bne.n	8006bcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f7fb fcee 	bl	80025a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2224      	movs	r2, #36	@ 0x24
 8006bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68da      	ldr	r2, [r3, #12]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006be2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fca7 	bl	8007538 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	691a      	ldr	r2, [r3, #16]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006bf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	695a      	ldr	r2, [r3, #20]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68da      	ldr	r2, [r3, #12]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2220      	movs	r2, #32
 8006c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3708      	adds	r7, #8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b20      	cmp	r3, #32
 8006c58:	d121      	bne.n	8006c9e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d002      	beq.n	8006c66 <HAL_UART_Transmit_IT+0x26>
 8006c60:	88fb      	ldrh	r3, [r7, #6]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e01a      	b.n	8006ca0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	88fa      	ldrh	r2, [r7, #6]
 8006c74:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	88fa      	ldrh	r2, [r7, #6]
 8006c7a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2221      	movs	r2, #33	@ 0x21
 8006c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68da      	ldr	r2, [r3, #12]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006c98:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	e000      	b.n	8006ca0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8006c9e:	2302      	movs	r3, #2
  }
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3714      	adds	r7, #20
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b0ba      	sub	sp, #232	@ 0xe8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ce2:	f003 030f 	and.w	r3, r3, #15
 8006ce6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006cea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10f      	bne.n	8006d12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cf6:	f003 0320 	and.w	r3, r3, #32
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d009      	beq.n	8006d12 <HAL_UART_IRQHandler+0x66>
 8006cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d02:	f003 0320 	and.w	r3, r3, #32
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d003      	beq.n	8006d12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fb55 	bl	80073ba <UART_Receive_IT>
      return;
 8006d10:	e25b      	b.n	80071ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006d12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f000 80de 	beq.w	8006ed8 <HAL_UART_IRQHandler+0x22c>
 8006d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d20:	f003 0301 	and.w	r3, r3, #1
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d106      	bne.n	8006d36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d2c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f000 80d1 	beq.w	8006ed8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d3a:	f003 0301 	and.w	r3, r3, #1
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00b      	beq.n	8006d5a <HAL_UART_IRQHandler+0xae>
 8006d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d005      	beq.n	8006d5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d52:	f043 0201 	orr.w	r2, r3, #1
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d5e:	f003 0304 	and.w	r3, r3, #4
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00b      	beq.n	8006d7e <HAL_UART_IRQHandler+0xd2>
 8006d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d005      	beq.n	8006d7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d76:	f043 0202 	orr.w	r2, r3, #2
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00b      	beq.n	8006da2 <HAL_UART_IRQHandler+0xf6>
 8006d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d005      	beq.n	8006da2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d9a:	f043 0204 	orr.w	r2, r3, #4
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006da6:	f003 0308 	and.w	r3, r3, #8
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d011      	beq.n	8006dd2 <HAL_UART_IRQHandler+0x126>
 8006dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006db2:	f003 0320 	and.w	r3, r3, #32
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d105      	bne.n	8006dc6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dbe:	f003 0301 	and.w	r3, r3, #1
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d005      	beq.n	8006dd2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dca:	f043 0208 	orr.w	r2, r3, #8
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 81f2 	beq.w	80071c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006de0:	f003 0320 	and.w	r3, r3, #32
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d008      	beq.n	8006dfa <HAL_UART_IRQHandler+0x14e>
 8006de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dec:	f003 0320 	and.w	r3, r3, #32
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d002      	beq.n	8006dfa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 fae0 	bl	80073ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	695b      	ldr	r3, [r3, #20]
 8006e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e04:	2b40      	cmp	r3, #64	@ 0x40
 8006e06:	bf0c      	ite	eq
 8006e08:	2301      	moveq	r3, #1
 8006e0a:	2300      	movne	r3, #0
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e16:	f003 0308 	and.w	r3, r3, #8
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d103      	bne.n	8006e26 <HAL_UART_IRQHandler+0x17a>
 8006e1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d04f      	beq.n	8006ec6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f9e8 	bl	80071fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e36:	2b40      	cmp	r3, #64	@ 0x40
 8006e38:	d141      	bne.n	8006ebe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	3314      	adds	r3, #20
 8006e40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e48:	e853 3f00 	ldrex	r3, [r3]
 8006e4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006e50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3314      	adds	r3, #20
 8006e62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006e66:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006e6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006e72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006e76:	e841 2300 	strex	r3, r2, [r1]
 8006e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006e7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1d9      	bne.n	8006e3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d013      	beq.n	8006eb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e92:	4a7e      	ldr	r2, [pc, #504]	@ (800708c <HAL_UART_IRQHandler+0x3e0>)
 8006e94:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7fd fbd8 	bl	8004650 <HAL_DMA_Abort_IT>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d016      	beq.n	8006ed4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb4:	e00e      	b.n	8006ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f98a 	bl	80071d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ebc:	e00a      	b.n	8006ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f986 	bl	80071d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ec4:	e006      	b.n	8006ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f982 	bl	80071d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006ed2:	e175      	b.n	80071c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ed4:	bf00      	nop
    return;
 8006ed6:	e173      	b.n	80071c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	f040 814f 	bne.w	8007180 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ee6:	f003 0310 	and.w	r3, r3, #16
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f000 8148 	beq.w	8007180 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ef4:	f003 0310 	and.w	r3, r3, #16
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f000 8141 	beq.w	8007180 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006efe:	2300      	movs	r3, #0
 8006f00:	60bb      	str	r3, [r7, #8]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	60bb      	str	r3, [r7, #8]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	60bb      	str	r3, [r7, #8]
 8006f12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f1e:	2b40      	cmp	r3, #64	@ 0x40
 8006f20:	f040 80b6 	bne.w	8007090 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f000 8145 	beq.w	80071c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f42:	429a      	cmp	r2, r3
 8006f44:	f080 813e 	bcs.w	80071c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f4e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f5a:	f000 8088 	beq.w	800706e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	330c      	adds	r3, #12
 8006f64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006f6c:	e853 3f00 	ldrex	r3, [r3]
 8006f70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006f74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006f78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	330c      	adds	r3, #12
 8006f86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006f8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006f8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f92:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006f96:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006f9a:	e841 2300 	strex	r3, r2, [r1]
 8006f9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006fa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1d9      	bne.n	8006f5e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	3314      	adds	r3, #20
 8006fb0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006fb4:	e853 3f00 	ldrex	r3, [r3]
 8006fb8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006fba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006fbc:	f023 0301 	bic.w	r3, r3, #1
 8006fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	3314      	adds	r3, #20
 8006fca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006fce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006fd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006fd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006fda:	e841 2300 	strex	r3, r2, [r1]
 8006fde:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006fe0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1e1      	bne.n	8006faa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3314      	adds	r3, #20
 8006fec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ff0:	e853 3f00 	ldrex	r3, [r3]
 8006ff4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006ff6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ff8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ffc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3314      	adds	r3, #20
 8007006:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800700a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800700c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007010:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007012:	e841 2300 	strex	r3, r2, [r1]
 8007016:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007018:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1e3      	bne.n	8006fe6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2220      	movs	r2, #32
 8007022:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	330c      	adds	r3, #12
 8007032:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007034:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007036:	e853 3f00 	ldrex	r3, [r3]
 800703a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800703c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800703e:	f023 0310 	bic.w	r3, r3, #16
 8007042:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	330c      	adds	r3, #12
 800704c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007050:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007052:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007054:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007056:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007058:	e841 2300 	strex	r3, r2, [r1]
 800705c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800705e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1e3      	bne.n	800702c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007068:	4618      	mov	r0, r3
 800706a:	f7fd fa81 	bl	8004570 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2202      	movs	r2, #2
 8007072:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800707c:	b29b      	uxth	r3, r3
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	b29b      	uxth	r3, r3
 8007082:	4619      	mov	r1, r3
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f8ad 	bl	80071e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800708a:	e09b      	b.n	80071c4 <HAL_UART_IRQHandler+0x518>
 800708c:	080072c3 	.word	0x080072c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007098:	b29b      	uxth	r3, r3
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f000 808e 	beq.w	80071c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80070ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 8089 	beq.w	80071c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	330c      	adds	r3, #12
 80070bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c0:	e853 3f00 	ldrex	r3, [r3]
 80070c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80070c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	330c      	adds	r3, #12
 80070d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80070da:	647a      	str	r2, [r7, #68]	@ 0x44
 80070dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80070e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070e2:	e841 2300 	strex	r3, r2, [r1]
 80070e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1e3      	bne.n	80070b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	3314      	adds	r3, #20
 80070f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f8:	e853 3f00 	ldrex	r3, [r3]
 80070fc:	623b      	str	r3, [r7, #32]
   return(result);
 80070fe:	6a3b      	ldr	r3, [r7, #32]
 8007100:	f023 0301 	bic.w	r3, r3, #1
 8007104:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	3314      	adds	r3, #20
 800710e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007112:	633a      	str	r2, [r7, #48]	@ 0x30
 8007114:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007116:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800711a:	e841 2300 	strex	r3, r2, [r1]
 800711e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1e3      	bne.n	80070ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2220      	movs	r2, #32
 800712a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	330c      	adds	r3, #12
 800713a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	e853 3f00 	ldrex	r3, [r3]
 8007142:	60fb      	str	r3, [r7, #12]
   return(result);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f023 0310 	bic.w	r3, r3, #16
 800714a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	330c      	adds	r3, #12
 8007154:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007158:	61fa      	str	r2, [r7, #28]
 800715a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715c:	69b9      	ldr	r1, [r7, #24]
 800715e:	69fa      	ldr	r2, [r7, #28]
 8007160:	e841 2300 	strex	r3, r2, [r1]
 8007164:	617b      	str	r3, [r7, #20]
   return(result);
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1e3      	bne.n	8007134 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2202      	movs	r2, #2
 8007170:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007172:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007176:	4619      	mov	r1, r3
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f833 	bl	80071e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800717e:	e023      	b.n	80071c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007184:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007188:	2b00      	cmp	r3, #0
 800718a:	d009      	beq.n	80071a0 <HAL_UART_IRQHandler+0x4f4>
 800718c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007194:	2b00      	cmp	r3, #0
 8007196:	d003      	beq.n	80071a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f8a6 	bl	80072ea <UART_Transmit_IT>
    return;
 800719e:	e014      	b.n	80071ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80071a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00e      	beq.n	80071ca <HAL_UART_IRQHandler+0x51e>
 80071ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d008      	beq.n	80071ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f8e6 	bl	800738a <UART_EndTransmit_IT>
    return;
 80071be:	e004      	b.n	80071ca <HAL_UART_IRQHandler+0x51e>
    return;
 80071c0:	bf00      	nop
 80071c2:	e002      	b.n	80071ca <HAL_UART_IRQHandler+0x51e>
      return;
 80071c4:	bf00      	nop
 80071c6:	e000      	b.n	80071ca <HAL_UART_IRQHandler+0x51e>
      return;
 80071c8:	bf00      	nop
  }
}
 80071ca:	37e8      	adds	r7, #232	@ 0xe8
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	460b      	mov	r3, r1
 80071ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b095      	sub	sp, #84	@ 0x54
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	330c      	adds	r3, #12
 800720a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800720e:	e853 3f00 	ldrex	r3, [r3]
 8007212:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007216:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800721a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	330c      	adds	r3, #12
 8007222:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007224:	643a      	str	r2, [r7, #64]	@ 0x40
 8007226:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007228:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800722a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800722c:	e841 2300 	strex	r3, r2, [r1]
 8007230:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1e5      	bne.n	8007204 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3314      	adds	r3, #20
 800723e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007240:	6a3b      	ldr	r3, [r7, #32]
 8007242:	e853 3f00 	ldrex	r3, [r3]
 8007246:	61fb      	str	r3, [r7, #28]
   return(result);
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	f023 0301 	bic.w	r3, r3, #1
 800724e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	3314      	adds	r3, #20
 8007256:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007258:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800725a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800725e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007260:	e841 2300 	strex	r3, r2, [r1]
 8007264:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1e5      	bne.n	8007238 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007270:	2b01      	cmp	r3, #1
 8007272:	d119      	bne.n	80072a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	330c      	adds	r3, #12
 800727a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	e853 3f00 	ldrex	r3, [r3]
 8007282:	60bb      	str	r3, [r7, #8]
   return(result);
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	f023 0310 	bic.w	r3, r3, #16
 800728a:	647b      	str	r3, [r7, #68]	@ 0x44
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	330c      	adds	r3, #12
 8007292:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007294:	61ba      	str	r2, [r7, #24]
 8007296:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007298:	6979      	ldr	r1, [r7, #20]
 800729a:	69ba      	ldr	r2, [r7, #24]
 800729c:	e841 2300 	strex	r3, r2, [r1]
 80072a0:	613b      	str	r3, [r7, #16]
   return(result);
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1e5      	bne.n	8007274 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2220      	movs	r2, #32
 80072ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80072b6:	bf00      	nop
 80072b8:	3754      	adds	r7, #84	@ 0x54
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b084      	sub	sp, #16
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2200      	movs	r2, #0
 80072da:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f7ff ff77 	bl	80071d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072e2:	bf00      	nop
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80072ea:	b480      	push	{r7}
 80072ec:	b085      	sub	sp, #20
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b21      	cmp	r3, #33	@ 0x21
 80072fc:	d13e      	bne.n	800737c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007306:	d114      	bne.n	8007332 <UART_Transmit_IT+0x48>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d110      	bne.n	8007332 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a1b      	ldr	r3, [r3, #32]
 8007314:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	881b      	ldrh	r3, [r3, #0]
 800731a:	461a      	mov	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007324:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	1c9a      	adds	r2, r3, #2
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	621a      	str	r2, [r3, #32]
 8007330:	e008      	b.n	8007344 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a1b      	ldr	r3, [r3, #32]
 8007336:	1c59      	adds	r1, r3, #1
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	6211      	str	r1, [r2, #32]
 800733c:	781a      	ldrb	r2, [r3, #0]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007348:	b29b      	uxth	r3, r3
 800734a:	3b01      	subs	r3, #1
 800734c:	b29b      	uxth	r3, r3
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	4619      	mov	r1, r3
 8007352:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007354:	2b00      	cmp	r3, #0
 8007356:	d10f      	bne.n	8007378 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68da      	ldr	r2, [r3, #12]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007366:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68da      	ldr	r2, [r3, #12]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007376:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007378:	2300      	movs	r3, #0
 800737a:	e000      	b.n	800737e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800737c:	2302      	movs	r3, #2
  }
}
 800737e:	4618      	mov	r0, r3
 8007380:	3714      	adds	r7, #20
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b082      	sub	sp, #8
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	68da      	ldr	r2, [r3, #12]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2220      	movs	r2, #32
 80073a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f7f9 fdea 	bl	8000f84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b08c      	sub	sp, #48	@ 0x30
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	2b22      	cmp	r3, #34	@ 0x22
 80073cc:	f040 80ae 	bne.w	800752c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073d8:	d117      	bne.n	800740a <UART_Receive_IT+0x50>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d113      	bne.n	800740a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80073e2:	2300      	movs	r3, #0
 80073e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007402:	1c9a      	adds	r2, r3, #2
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	629a      	str	r2, [r3, #40]	@ 0x28
 8007408:	e026      	b.n	8007458 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800740e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007410:	2300      	movs	r3, #0
 8007412:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800741c:	d007      	beq.n	800742e <UART_Receive_IT+0x74>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d10a      	bne.n	800743c <UART_Receive_IT+0x82>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d106      	bne.n	800743c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	b2da      	uxtb	r2, r3
 8007436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007438:	701a      	strb	r2, [r3, #0]
 800743a:	e008      	b.n	800744e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	b2db      	uxtb	r3, r3
 8007444:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007448:	b2da      	uxtb	r2, r3
 800744a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800744c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007452:	1c5a      	adds	r2, r3, #1
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800745c:	b29b      	uxth	r3, r3
 800745e:	3b01      	subs	r3, #1
 8007460:	b29b      	uxth	r3, r3
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	4619      	mov	r1, r3
 8007466:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007468:	2b00      	cmp	r3, #0
 800746a:	d15d      	bne.n	8007528 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68da      	ldr	r2, [r3, #12]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f022 0220 	bic.w	r2, r2, #32
 800747a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68da      	ldr	r2, [r3, #12]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800748a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	695a      	ldr	r2, [r3, #20]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f022 0201 	bic.w	r2, r2, #1
 800749a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2220      	movs	r2, #32
 80074a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d135      	bne.n	800751e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	330c      	adds	r3, #12
 80074be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	e853 3f00 	ldrex	r3, [r3]
 80074c6:	613b      	str	r3, [r7, #16]
   return(result);
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	f023 0310 	bic.w	r3, r3, #16
 80074ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	330c      	adds	r3, #12
 80074d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074d8:	623a      	str	r2, [r7, #32]
 80074da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074dc:	69f9      	ldr	r1, [r7, #28]
 80074de:	6a3a      	ldr	r2, [r7, #32]
 80074e0:	e841 2300 	strex	r3, r2, [r1]
 80074e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1e5      	bne.n	80074b8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0310 	and.w	r3, r3, #16
 80074f6:	2b10      	cmp	r3, #16
 80074f8:	d10a      	bne.n	8007510 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074fa:	2300      	movs	r3, #0
 80074fc:	60fb      	str	r3, [r7, #12]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	60fb      	str	r3, [r7, #12]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	60fb      	str	r3, [r7, #12]
 800750e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007514:	4619      	mov	r1, r3
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f7ff fe64 	bl	80071e4 <HAL_UARTEx_RxEventCallback>
 800751c:	e002      	b.n	8007524 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f7f9 fd4c 	bl	8000fbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007524:	2300      	movs	r3, #0
 8007526:	e002      	b.n	800752e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007528:	2300      	movs	r3, #0
 800752a:	e000      	b.n	800752e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800752c:	2302      	movs	r3, #2
  }
}
 800752e:	4618      	mov	r0, r3
 8007530:	3730      	adds	r7, #48	@ 0x30
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
	...

08007538 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800753c:	b0c0      	sub	sp, #256	@ 0x100
 800753e:	af00      	add	r7, sp, #0
 8007540:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007554:	68d9      	ldr	r1, [r3, #12]
 8007556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	ea40 0301 	orr.w	r3, r0, r1
 8007560:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007566:	689a      	ldr	r2, [r3, #8]
 8007568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	431a      	orrs	r2, r3
 8007570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	431a      	orrs	r2, r3
 8007578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	4313      	orrs	r3, r2
 8007580:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007590:	f021 010c 	bic.w	r1, r1, #12
 8007594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800759e:	430b      	orrs	r3, r1
 80075a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80075ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075b2:	6999      	ldr	r1, [r3, #24]
 80075b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	ea40 0301 	orr.w	r3, r0, r1
 80075be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80075c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	4b8f      	ldr	r3, [pc, #572]	@ (8007804 <UART_SetConfig+0x2cc>)
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d005      	beq.n	80075d8 <UART_SetConfig+0xa0>
 80075cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	4b8d      	ldr	r3, [pc, #564]	@ (8007808 <UART_SetConfig+0x2d0>)
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d104      	bne.n	80075e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80075d8:	f7fe fe94 	bl	8006304 <HAL_RCC_GetPCLK2Freq>
 80075dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80075e0:	e003      	b.n	80075ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80075e2:	f7fe fe7b 	bl	80062dc <HAL_RCC_GetPCLK1Freq>
 80075e6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075ee:	69db      	ldr	r3, [r3, #28]
 80075f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075f4:	f040 810c 	bne.w	8007810 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80075f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075fc:	2200      	movs	r2, #0
 80075fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007602:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007606:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800760a:	4622      	mov	r2, r4
 800760c:	462b      	mov	r3, r5
 800760e:	1891      	adds	r1, r2, r2
 8007610:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007612:	415b      	adcs	r3, r3
 8007614:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007616:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800761a:	4621      	mov	r1, r4
 800761c:	eb12 0801 	adds.w	r8, r2, r1
 8007620:	4629      	mov	r1, r5
 8007622:	eb43 0901 	adc.w	r9, r3, r1
 8007626:	f04f 0200 	mov.w	r2, #0
 800762a:	f04f 0300 	mov.w	r3, #0
 800762e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007632:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007636:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800763a:	4690      	mov	r8, r2
 800763c:	4699      	mov	r9, r3
 800763e:	4623      	mov	r3, r4
 8007640:	eb18 0303 	adds.w	r3, r8, r3
 8007644:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007648:	462b      	mov	r3, r5
 800764a:	eb49 0303 	adc.w	r3, r9, r3
 800764e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800765e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007662:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007666:	460b      	mov	r3, r1
 8007668:	18db      	adds	r3, r3, r3
 800766a:	653b      	str	r3, [r7, #80]	@ 0x50
 800766c:	4613      	mov	r3, r2
 800766e:	eb42 0303 	adc.w	r3, r2, r3
 8007672:	657b      	str	r3, [r7, #84]	@ 0x54
 8007674:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007678:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800767c:	f7f9 faf6 	bl	8000c6c <__aeabi_uldivmod>
 8007680:	4602      	mov	r2, r0
 8007682:	460b      	mov	r3, r1
 8007684:	4b61      	ldr	r3, [pc, #388]	@ (800780c <UART_SetConfig+0x2d4>)
 8007686:	fba3 2302 	umull	r2, r3, r3, r2
 800768a:	095b      	lsrs	r3, r3, #5
 800768c:	011c      	lsls	r4, r3, #4
 800768e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007692:	2200      	movs	r2, #0
 8007694:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007698:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800769c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80076a0:	4642      	mov	r2, r8
 80076a2:	464b      	mov	r3, r9
 80076a4:	1891      	adds	r1, r2, r2
 80076a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80076a8:	415b      	adcs	r3, r3
 80076aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80076b0:	4641      	mov	r1, r8
 80076b2:	eb12 0a01 	adds.w	sl, r2, r1
 80076b6:	4649      	mov	r1, r9
 80076b8:	eb43 0b01 	adc.w	fp, r3, r1
 80076bc:	f04f 0200 	mov.w	r2, #0
 80076c0:	f04f 0300 	mov.w	r3, #0
 80076c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80076c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80076cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076d0:	4692      	mov	sl, r2
 80076d2:	469b      	mov	fp, r3
 80076d4:	4643      	mov	r3, r8
 80076d6:	eb1a 0303 	adds.w	r3, sl, r3
 80076da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80076de:	464b      	mov	r3, r9
 80076e0:	eb4b 0303 	adc.w	r3, fp, r3
 80076e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80076e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80076f4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80076f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80076fc:	460b      	mov	r3, r1
 80076fe:	18db      	adds	r3, r3, r3
 8007700:	643b      	str	r3, [r7, #64]	@ 0x40
 8007702:	4613      	mov	r3, r2
 8007704:	eb42 0303 	adc.w	r3, r2, r3
 8007708:	647b      	str	r3, [r7, #68]	@ 0x44
 800770a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800770e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007712:	f7f9 faab 	bl	8000c6c <__aeabi_uldivmod>
 8007716:	4602      	mov	r2, r0
 8007718:	460b      	mov	r3, r1
 800771a:	4611      	mov	r1, r2
 800771c:	4b3b      	ldr	r3, [pc, #236]	@ (800780c <UART_SetConfig+0x2d4>)
 800771e:	fba3 2301 	umull	r2, r3, r3, r1
 8007722:	095b      	lsrs	r3, r3, #5
 8007724:	2264      	movs	r2, #100	@ 0x64
 8007726:	fb02 f303 	mul.w	r3, r2, r3
 800772a:	1acb      	subs	r3, r1, r3
 800772c:	00db      	lsls	r3, r3, #3
 800772e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007732:	4b36      	ldr	r3, [pc, #216]	@ (800780c <UART_SetConfig+0x2d4>)
 8007734:	fba3 2302 	umull	r2, r3, r3, r2
 8007738:	095b      	lsrs	r3, r3, #5
 800773a:	005b      	lsls	r3, r3, #1
 800773c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007740:	441c      	add	r4, r3
 8007742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007746:	2200      	movs	r2, #0
 8007748:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800774c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007750:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007754:	4642      	mov	r2, r8
 8007756:	464b      	mov	r3, r9
 8007758:	1891      	adds	r1, r2, r2
 800775a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800775c:	415b      	adcs	r3, r3
 800775e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007760:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007764:	4641      	mov	r1, r8
 8007766:	1851      	adds	r1, r2, r1
 8007768:	6339      	str	r1, [r7, #48]	@ 0x30
 800776a:	4649      	mov	r1, r9
 800776c:	414b      	adcs	r3, r1
 800776e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007770:	f04f 0200 	mov.w	r2, #0
 8007774:	f04f 0300 	mov.w	r3, #0
 8007778:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800777c:	4659      	mov	r1, fp
 800777e:	00cb      	lsls	r3, r1, #3
 8007780:	4651      	mov	r1, sl
 8007782:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007786:	4651      	mov	r1, sl
 8007788:	00ca      	lsls	r2, r1, #3
 800778a:	4610      	mov	r0, r2
 800778c:	4619      	mov	r1, r3
 800778e:	4603      	mov	r3, r0
 8007790:	4642      	mov	r2, r8
 8007792:	189b      	adds	r3, r3, r2
 8007794:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007798:	464b      	mov	r3, r9
 800779a:	460a      	mov	r2, r1
 800779c:	eb42 0303 	adc.w	r3, r2, r3
 80077a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80077a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80077b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80077b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80077b8:	460b      	mov	r3, r1
 80077ba:	18db      	adds	r3, r3, r3
 80077bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077be:	4613      	mov	r3, r2
 80077c0:	eb42 0303 	adc.w	r3, r2, r3
 80077c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80077ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80077ce:	f7f9 fa4d 	bl	8000c6c <__aeabi_uldivmod>
 80077d2:	4602      	mov	r2, r0
 80077d4:	460b      	mov	r3, r1
 80077d6:	4b0d      	ldr	r3, [pc, #52]	@ (800780c <UART_SetConfig+0x2d4>)
 80077d8:	fba3 1302 	umull	r1, r3, r3, r2
 80077dc:	095b      	lsrs	r3, r3, #5
 80077de:	2164      	movs	r1, #100	@ 0x64
 80077e0:	fb01 f303 	mul.w	r3, r1, r3
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	00db      	lsls	r3, r3, #3
 80077e8:	3332      	adds	r3, #50	@ 0x32
 80077ea:	4a08      	ldr	r2, [pc, #32]	@ (800780c <UART_SetConfig+0x2d4>)
 80077ec:	fba2 2303 	umull	r2, r3, r2, r3
 80077f0:	095b      	lsrs	r3, r3, #5
 80077f2:	f003 0207 	and.w	r2, r3, #7
 80077f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4422      	add	r2, r4
 80077fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007800:	e106      	b.n	8007a10 <UART_SetConfig+0x4d8>
 8007802:	bf00      	nop
 8007804:	40011000 	.word	0x40011000
 8007808:	40011400 	.word	0x40011400
 800780c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007810:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007814:	2200      	movs	r2, #0
 8007816:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800781a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800781e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007822:	4642      	mov	r2, r8
 8007824:	464b      	mov	r3, r9
 8007826:	1891      	adds	r1, r2, r2
 8007828:	6239      	str	r1, [r7, #32]
 800782a:	415b      	adcs	r3, r3
 800782c:	627b      	str	r3, [r7, #36]	@ 0x24
 800782e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007832:	4641      	mov	r1, r8
 8007834:	1854      	adds	r4, r2, r1
 8007836:	4649      	mov	r1, r9
 8007838:	eb43 0501 	adc.w	r5, r3, r1
 800783c:	f04f 0200 	mov.w	r2, #0
 8007840:	f04f 0300 	mov.w	r3, #0
 8007844:	00eb      	lsls	r3, r5, #3
 8007846:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800784a:	00e2      	lsls	r2, r4, #3
 800784c:	4614      	mov	r4, r2
 800784e:	461d      	mov	r5, r3
 8007850:	4643      	mov	r3, r8
 8007852:	18e3      	adds	r3, r4, r3
 8007854:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007858:	464b      	mov	r3, r9
 800785a:	eb45 0303 	adc.w	r3, r5, r3
 800785e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800786e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007872:	f04f 0200 	mov.w	r2, #0
 8007876:	f04f 0300 	mov.w	r3, #0
 800787a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800787e:	4629      	mov	r1, r5
 8007880:	008b      	lsls	r3, r1, #2
 8007882:	4621      	mov	r1, r4
 8007884:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007888:	4621      	mov	r1, r4
 800788a:	008a      	lsls	r2, r1, #2
 800788c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007890:	f7f9 f9ec 	bl	8000c6c <__aeabi_uldivmod>
 8007894:	4602      	mov	r2, r0
 8007896:	460b      	mov	r3, r1
 8007898:	4b60      	ldr	r3, [pc, #384]	@ (8007a1c <UART_SetConfig+0x4e4>)
 800789a:	fba3 2302 	umull	r2, r3, r3, r2
 800789e:	095b      	lsrs	r3, r3, #5
 80078a0:	011c      	lsls	r4, r3, #4
 80078a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078a6:	2200      	movs	r2, #0
 80078a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80078ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80078b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80078b4:	4642      	mov	r2, r8
 80078b6:	464b      	mov	r3, r9
 80078b8:	1891      	adds	r1, r2, r2
 80078ba:	61b9      	str	r1, [r7, #24]
 80078bc:	415b      	adcs	r3, r3
 80078be:	61fb      	str	r3, [r7, #28]
 80078c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80078c4:	4641      	mov	r1, r8
 80078c6:	1851      	adds	r1, r2, r1
 80078c8:	6139      	str	r1, [r7, #16]
 80078ca:	4649      	mov	r1, r9
 80078cc:	414b      	adcs	r3, r1
 80078ce:	617b      	str	r3, [r7, #20]
 80078d0:	f04f 0200 	mov.w	r2, #0
 80078d4:	f04f 0300 	mov.w	r3, #0
 80078d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80078dc:	4659      	mov	r1, fp
 80078de:	00cb      	lsls	r3, r1, #3
 80078e0:	4651      	mov	r1, sl
 80078e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078e6:	4651      	mov	r1, sl
 80078e8:	00ca      	lsls	r2, r1, #3
 80078ea:	4610      	mov	r0, r2
 80078ec:	4619      	mov	r1, r3
 80078ee:	4603      	mov	r3, r0
 80078f0:	4642      	mov	r2, r8
 80078f2:	189b      	adds	r3, r3, r2
 80078f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80078f8:	464b      	mov	r3, r9
 80078fa:	460a      	mov	r2, r1
 80078fc:	eb42 0303 	adc.w	r3, r2, r3
 8007900:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800790e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007910:	f04f 0200 	mov.w	r2, #0
 8007914:	f04f 0300 	mov.w	r3, #0
 8007918:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800791c:	4649      	mov	r1, r9
 800791e:	008b      	lsls	r3, r1, #2
 8007920:	4641      	mov	r1, r8
 8007922:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007926:	4641      	mov	r1, r8
 8007928:	008a      	lsls	r2, r1, #2
 800792a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800792e:	f7f9 f99d 	bl	8000c6c <__aeabi_uldivmod>
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	4611      	mov	r1, r2
 8007938:	4b38      	ldr	r3, [pc, #224]	@ (8007a1c <UART_SetConfig+0x4e4>)
 800793a:	fba3 2301 	umull	r2, r3, r3, r1
 800793e:	095b      	lsrs	r3, r3, #5
 8007940:	2264      	movs	r2, #100	@ 0x64
 8007942:	fb02 f303 	mul.w	r3, r2, r3
 8007946:	1acb      	subs	r3, r1, r3
 8007948:	011b      	lsls	r3, r3, #4
 800794a:	3332      	adds	r3, #50	@ 0x32
 800794c:	4a33      	ldr	r2, [pc, #204]	@ (8007a1c <UART_SetConfig+0x4e4>)
 800794e:	fba2 2303 	umull	r2, r3, r2, r3
 8007952:	095b      	lsrs	r3, r3, #5
 8007954:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007958:	441c      	add	r4, r3
 800795a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800795e:	2200      	movs	r2, #0
 8007960:	673b      	str	r3, [r7, #112]	@ 0x70
 8007962:	677a      	str	r2, [r7, #116]	@ 0x74
 8007964:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007968:	4642      	mov	r2, r8
 800796a:	464b      	mov	r3, r9
 800796c:	1891      	adds	r1, r2, r2
 800796e:	60b9      	str	r1, [r7, #8]
 8007970:	415b      	adcs	r3, r3
 8007972:	60fb      	str	r3, [r7, #12]
 8007974:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007978:	4641      	mov	r1, r8
 800797a:	1851      	adds	r1, r2, r1
 800797c:	6039      	str	r1, [r7, #0]
 800797e:	4649      	mov	r1, r9
 8007980:	414b      	adcs	r3, r1
 8007982:	607b      	str	r3, [r7, #4]
 8007984:	f04f 0200 	mov.w	r2, #0
 8007988:	f04f 0300 	mov.w	r3, #0
 800798c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007990:	4659      	mov	r1, fp
 8007992:	00cb      	lsls	r3, r1, #3
 8007994:	4651      	mov	r1, sl
 8007996:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800799a:	4651      	mov	r1, sl
 800799c:	00ca      	lsls	r2, r1, #3
 800799e:	4610      	mov	r0, r2
 80079a0:	4619      	mov	r1, r3
 80079a2:	4603      	mov	r3, r0
 80079a4:	4642      	mov	r2, r8
 80079a6:	189b      	adds	r3, r3, r2
 80079a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80079aa:	464b      	mov	r3, r9
 80079ac:	460a      	mov	r2, r1
 80079ae:	eb42 0303 	adc.w	r3, r2, r3
 80079b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80079b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80079be:	667a      	str	r2, [r7, #100]	@ 0x64
 80079c0:	f04f 0200 	mov.w	r2, #0
 80079c4:	f04f 0300 	mov.w	r3, #0
 80079c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80079cc:	4649      	mov	r1, r9
 80079ce:	008b      	lsls	r3, r1, #2
 80079d0:	4641      	mov	r1, r8
 80079d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079d6:	4641      	mov	r1, r8
 80079d8:	008a      	lsls	r2, r1, #2
 80079da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80079de:	f7f9 f945 	bl	8000c6c <__aeabi_uldivmod>
 80079e2:	4602      	mov	r2, r0
 80079e4:	460b      	mov	r3, r1
 80079e6:	4b0d      	ldr	r3, [pc, #52]	@ (8007a1c <UART_SetConfig+0x4e4>)
 80079e8:	fba3 1302 	umull	r1, r3, r3, r2
 80079ec:	095b      	lsrs	r3, r3, #5
 80079ee:	2164      	movs	r1, #100	@ 0x64
 80079f0:	fb01 f303 	mul.w	r3, r1, r3
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	011b      	lsls	r3, r3, #4
 80079f8:	3332      	adds	r3, #50	@ 0x32
 80079fa:	4a08      	ldr	r2, [pc, #32]	@ (8007a1c <UART_SetConfig+0x4e4>)
 80079fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007a00:	095b      	lsrs	r3, r3, #5
 8007a02:	f003 020f 	and.w	r2, r3, #15
 8007a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4422      	add	r2, r4
 8007a0e:	609a      	str	r2, [r3, #8]
}
 8007a10:	bf00      	nop
 8007a12:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007a16:	46bd      	mov	sp, r7
 8007a18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a1c:	51eb851f 	.word	0x51eb851f

08007a20 <siprintf>:
 8007a20:	b40e      	push	{r1, r2, r3}
 8007a22:	b500      	push	{lr}
 8007a24:	b09c      	sub	sp, #112	@ 0x70
 8007a26:	ab1d      	add	r3, sp, #116	@ 0x74
 8007a28:	9002      	str	r0, [sp, #8]
 8007a2a:	9006      	str	r0, [sp, #24]
 8007a2c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007a30:	4809      	ldr	r0, [pc, #36]	@ (8007a58 <siprintf+0x38>)
 8007a32:	9107      	str	r1, [sp, #28]
 8007a34:	9104      	str	r1, [sp, #16]
 8007a36:	4909      	ldr	r1, [pc, #36]	@ (8007a5c <siprintf+0x3c>)
 8007a38:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a3c:	9105      	str	r1, [sp, #20]
 8007a3e:	6800      	ldr	r0, [r0, #0]
 8007a40:	9301      	str	r3, [sp, #4]
 8007a42:	a902      	add	r1, sp, #8
 8007a44:	f000 f9c4 	bl	8007dd0 <_svfiprintf_r>
 8007a48:	9b02      	ldr	r3, [sp, #8]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	701a      	strb	r2, [r3, #0]
 8007a4e:	b01c      	add	sp, #112	@ 0x70
 8007a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a54:	b003      	add	sp, #12
 8007a56:	4770      	bx	lr
 8007a58:	200000c0 	.word	0x200000c0
 8007a5c:	ffff0208 	.word	0xffff0208

08007a60 <memmove>:
 8007a60:	4288      	cmp	r0, r1
 8007a62:	b510      	push	{r4, lr}
 8007a64:	eb01 0402 	add.w	r4, r1, r2
 8007a68:	d902      	bls.n	8007a70 <memmove+0x10>
 8007a6a:	4284      	cmp	r4, r0
 8007a6c:	4623      	mov	r3, r4
 8007a6e:	d807      	bhi.n	8007a80 <memmove+0x20>
 8007a70:	1e43      	subs	r3, r0, #1
 8007a72:	42a1      	cmp	r1, r4
 8007a74:	d008      	beq.n	8007a88 <memmove+0x28>
 8007a76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a7e:	e7f8      	b.n	8007a72 <memmove+0x12>
 8007a80:	4402      	add	r2, r0
 8007a82:	4601      	mov	r1, r0
 8007a84:	428a      	cmp	r2, r1
 8007a86:	d100      	bne.n	8007a8a <memmove+0x2a>
 8007a88:	bd10      	pop	{r4, pc}
 8007a8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a92:	e7f7      	b.n	8007a84 <memmove+0x24>

08007a94 <memset>:
 8007a94:	4402      	add	r2, r0
 8007a96:	4603      	mov	r3, r0
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d100      	bne.n	8007a9e <memset+0xa>
 8007a9c:	4770      	bx	lr
 8007a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8007aa2:	e7f9      	b.n	8007a98 <memset+0x4>

08007aa4 <__errno>:
 8007aa4:	4b01      	ldr	r3, [pc, #4]	@ (8007aac <__errno+0x8>)
 8007aa6:	6818      	ldr	r0, [r3, #0]
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	200000c0 	.word	0x200000c0

08007ab0 <__libc_init_array>:
 8007ab0:	b570      	push	{r4, r5, r6, lr}
 8007ab2:	4d0d      	ldr	r5, [pc, #52]	@ (8007ae8 <__libc_init_array+0x38>)
 8007ab4:	4c0d      	ldr	r4, [pc, #52]	@ (8007aec <__libc_init_array+0x3c>)
 8007ab6:	1b64      	subs	r4, r4, r5
 8007ab8:	10a4      	asrs	r4, r4, #2
 8007aba:	2600      	movs	r6, #0
 8007abc:	42a6      	cmp	r6, r4
 8007abe:	d109      	bne.n	8007ad4 <__libc_init_array+0x24>
 8007ac0:	4d0b      	ldr	r5, [pc, #44]	@ (8007af0 <__libc_init_array+0x40>)
 8007ac2:	4c0c      	ldr	r4, [pc, #48]	@ (8007af4 <__libc_init_array+0x44>)
 8007ac4:	f001 ff3c 	bl	8009940 <_init>
 8007ac8:	1b64      	subs	r4, r4, r5
 8007aca:	10a4      	asrs	r4, r4, #2
 8007acc:	2600      	movs	r6, #0
 8007ace:	42a6      	cmp	r6, r4
 8007ad0:	d105      	bne.n	8007ade <__libc_init_array+0x2e>
 8007ad2:	bd70      	pop	{r4, r5, r6, pc}
 8007ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ad8:	4798      	blx	r3
 8007ada:	3601      	adds	r6, #1
 8007adc:	e7ee      	b.n	8007abc <__libc_init_array+0xc>
 8007ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ae2:	4798      	blx	r3
 8007ae4:	3601      	adds	r6, #1
 8007ae6:	e7f2      	b.n	8007ace <__libc_init_array+0x1e>
 8007ae8:	0800b348 	.word	0x0800b348
 8007aec:	0800b348 	.word	0x0800b348
 8007af0:	0800b348 	.word	0x0800b348
 8007af4:	0800b34c 	.word	0x0800b34c

08007af8 <__retarget_lock_acquire_recursive>:
 8007af8:	4770      	bx	lr

08007afa <__retarget_lock_release_recursive>:
 8007afa:	4770      	bx	lr

08007afc <strcpy>:
 8007afc:	4603      	mov	r3, r0
 8007afe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b02:	f803 2b01 	strb.w	r2, [r3], #1
 8007b06:	2a00      	cmp	r2, #0
 8007b08:	d1f9      	bne.n	8007afe <strcpy+0x2>
 8007b0a:	4770      	bx	lr

08007b0c <memcpy>:
 8007b0c:	440a      	add	r2, r1
 8007b0e:	4291      	cmp	r1, r2
 8007b10:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b14:	d100      	bne.n	8007b18 <memcpy+0xc>
 8007b16:	4770      	bx	lr
 8007b18:	b510      	push	{r4, lr}
 8007b1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b22:	4291      	cmp	r1, r2
 8007b24:	d1f9      	bne.n	8007b1a <memcpy+0xe>
 8007b26:	bd10      	pop	{r4, pc}

08007b28 <_free_r>:
 8007b28:	b538      	push	{r3, r4, r5, lr}
 8007b2a:	4605      	mov	r5, r0
 8007b2c:	2900      	cmp	r1, #0
 8007b2e:	d041      	beq.n	8007bb4 <_free_r+0x8c>
 8007b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b34:	1f0c      	subs	r4, r1, #4
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	bfb8      	it	lt
 8007b3a:	18e4      	addlt	r4, r4, r3
 8007b3c:	f000 f8e0 	bl	8007d00 <__malloc_lock>
 8007b40:	4a1d      	ldr	r2, [pc, #116]	@ (8007bb8 <_free_r+0x90>)
 8007b42:	6813      	ldr	r3, [r2, #0]
 8007b44:	b933      	cbnz	r3, 8007b54 <_free_r+0x2c>
 8007b46:	6063      	str	r3, [r4, #4]
 8007b48:	6014      	str	r4, [r2, #0]
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b50:	f000 b8dc 	b.w	8007d0c <__malloc_unlock>
 8007b54:	42a3      	cmp	r3, r4
 8007b56:	d908      	bls.n	8007b6a <_free_r+0x42>
 8007b58:	6820      	ldr	r0, [r4, #0]
 8007b5a:	1821      	adds	r1, r4, r0
 8007b5c:	428b      	cmp	r3, r1
 8007b5e:	bf01      	itttt	eq
 8007b60:	6819      	ldreq	r1, [r3, #0]
 8007b62:	685b      	ldreq	r3, [r3, #4]
 8007b64:	1809      	addeq	r1, r1, r0
 8007b66:	6021      	streq	r1, [r4, #0]
 8007b68:	e7ed      	b.n	8007b46 <_free_r+0x1e>
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	b10b      	cbz	r3, 8007b74 <_free_r+0x4c>
 8007b70:	42a3      	cmp	r3, r4
 8007b72:	d9fa      	bls.n	8007b6a <_free_r+0x42>
 8007b74:	6811      	ldr	r1, [r2, #0]
 8007b76:	1850      	adds	r0, r2, r1
 8007b78:	42a0      	cmp	r0, r4
 8007b7a:	d10b      	bne.n	8007b94 <_free_r+0x6c>
 8007b7c:	6820      	ldr	r0, [r4, #0]
 8007b7e:	4401      	add	r1, r0
 8007b80:	1850      	adds	r0, r2, r1
 8007b82:	4283      	cmp	r3, r0
 8007b84:	6011      	str	r1, [r2, #0]
 8007b86:	d1e0      	bne.n	8007b4a <_free_r+0x22>
 8007b88:	6818      	ldr	r0, [r3, #0]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	6053      	str	r3, [r2, #4]
 8007b8e:	4408      	add	r0, r1
 8007b90:	6010      	str	r0, [r2, #0]
 8007b92:	e7da      	b.n	8007b4a <_free_r+0x22>
 8007b94:	d902      	bls.n	8007b9c <_free_r+0x74>
 8007b96:	230c      	movs	r3, #12
 8007b98:	602b      	str	r3, [r5, #0]
 8007b9a:	e7d6      	b.n	8007b4a <_free_r+0x22>
 8007b9c:	6820      	ldr	r0, [r4, #0]
 8007b9e:	1821      	adds	r1, r4, r0
 8007ba0:	428b      	cmp	r3, r1
 8007ba2:	bf04      	itt	eq
 8007ba4:	6819      	ldreq	r1, [r3, #0]
 8007ba6:	685b      	ldreq	r3, [r3, #4]
 8007ba8:	6063      	str	r3, [r4, #4]
 8007baa:	bf04      	itt	eq
 8007bac:	1809      	addeq	r1, r1, r0
 8007bae:	6021      	streq	r1, [r4, #0]
 8007bb0:	6054      	str	r4, [r2, #4]
 8007bb2:	e7ca      	b.n	8007b4a <_free_r+0x22>
 8007bb4:	bd38      	pop	{r3, r4, r5, pc}
 8007bb6:	bf00      	nop
 8007bb8:	20000820 	.word	0x20000820

08007bbc <sbrk_aligned>:
 8007bbc:	b570      	push	{r4, r5, r6, lr}
 8007bbe:	4e0f      	ldr	r6, [pc, #60]	@ (8007bfc <sbrk_aligned+0x40>)
 8007bc0:	460c      	mov	r4, r1
 8007bc2:	6831      	ldr	r1, [r6, #0]
 8007bc4:	4605      	mov	r5, r0
 8007bc6:	b911      	cbnz	r1, 8007bce <sbrk_aligned+0x12>
 8007bc8:	f000 fb8c 	bl	80082e4 <_sbrk_r>
 8007bcc:	6030      	str	r0, [r6, #0]
 8007bce:	4621      	mov	r1, r4
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	f000 fb87 	bl	80082e4 <_sbrk_r>
 8007bd6:	1c43      	adds	r3, r0, #1
 8007bd8:	d103      	bne.n	8007be2 <sbrk_aligned+0x26>
 8007bda:	f04f 34ff 	mov.w	r4, #4294967295
 8007bde:	4620      	mov	r0, r4
 8007be0:	bd70      	pop	{r4, r5, r6, pc}
 8007be2:	1cc4      	adds	r4, r0, #3
 8007be4:	f024 0403 	bic.w	r4, r4, #3
 8007be8:	42a0      	cmp	r0, r4
 8007bea:	d0f8      	beq.n	8007bde <sbrk_aligned+0x22>
 8007bec:	1a21      	subs	r1, r4, r0
 8007bee:	4628      	mov	r0, r5
 8007bf0:	f000 fb78 	bl	80082e4 <_sbrk_r>
 8007bf4:	3001      	adds	r0, #1
 8007bf6:	d1f2      	bne.n	8007bde <sbrk_aligned+0x22>
 8007bf8:	e7ef      	b.n	8007bda <sbrk_aligned+0x1e>
 8007bfa:	bf00      	nop
 8007bfc:	2000081c 	.word	0x2000081c

08007c00 <_malloc_r>:
 8007c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c04:	1ccd      	adds	r5, r1, #3
 8007c06:	f025 0503 	bic.w	r5, r5, #3
 8007c0a:	3508      	adds	r5, #8
 8007c0c:	2d0c      	cmp	r5, #12
 8007c0e:	bf38      	it	cc
 8007c10:	250c      	movcc	r5, #12
 8007c12:	2d00      	cmp	r5, #0
 8007c14:	4606      	mov	r6, r0
 8007c16:	db01      	blt.n	8007c1c <_malloc_r+0x1c>
 8007c18:	42a9      	cmp	r1, r5
 8007c1a:	d904      	bls.n	8007c26 <_malloc_r+0x26>
 8007c1c:	230c      	movs	r3, #12
 8007c1e:	6033      	str	r3, [r6, #0]
 8007c20:	2000      	movs	r0, #0
 8007c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007cfc <_malloc_r+0xfc>
 8007c2a:	f000 f869 	bl	8007d00 <__malloc_lock>
 8007c2e:	f8d8 3000 	ldr.w	r3, [r8]
 8007c32:	461c      	mov	r4, r3
 8007c34:	bb44      	cbnz	r4, 8007c88 <_malloc_r+0x88>
 8007c36:	4629      	mov	r1, r5
 8007c38:	4630      	mov	r0, r6
 8007c3a:	f7ff ffbf 	bl	8007bbc <sbrk_aligned>
 8007c3e:	1c43      	adds	r3, r0, #1
 8007c40:	4604      	mov	r4, r0
 8007c42:	d158      	bne.n	8007cf6 <_malloc_r+0xf6>
 8007c44:	f8d8 4000 	ldr.w	r4, [r8]
 8007c48:	4627      	mov	r7, r4
 8007c4a:	2f00      	cmp	r7, #0
 8007c4c:	d143      	bne.n	8007cd6 <_malloc_r+0xd6>
 8007c4e:	2c00      	cmp	r4, #0
 8007c50:	d04b      	beq.n	8007cea <_malloc_r+0xea>
 8007c52:	6823      	ldr	r3, [r4, #0]
 8007c54:	4639      	mov	r1, r7
 8007c56:	4630      	mov	r0, r6
 8007c58:	eb04 0903 	add.w	r9, r4, r3
 8007c5c:	f000 fb42 	bl	80082e4 <_sbrk_r>
 8007c60:	4581      	cmp	r9, r0
 8007c62:	d142      	bne.n	8007cea <_malloc_r+0xea>
 8007c64:	6821      	ldr	r1, [r4, #0]
 8007c66:	1a6d      	subs	r5, r5, r1
 8007c68:	4629      	mov	r1, r5
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	f7ff ffa6 	bl	8007bbc <sbrk_aligned>
 8007c70:	3001      	adds	r0, #1
 8007c72:	d03a      	beq.n	8007cea <_malloc_r+0xea>
 8007c74:	6823      	ldr	r3, [r4, #0]
 8007c76:	442b      	add	r3, r5
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	f8d8 3000 	ldr.w	r3, [r8]
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	bb62      	cbnz	r2, 8007cdc <_malloc_r+0xdc>
 8007c82:	f8c8 7000 	str.w	r7, [r8]
 8007c86:	e00f      	b.n	8007ca8 <_malloc_r+0xa8>
 8007c88:	6822      	ldr	r2, [r4, #0]
 8007c8a:	1b52      	subs	r2, r2, r5
 8007c8c:	d420      	bmi.n	8007cd0 <_malloc_r+0xd0>
 8007c8e:	2a0b      	cmp	r2, #11
 8007c90:	d917      	bls.n	8007cc2 <_malloc_r+0xc2>
 8007c92:	1961      	adds	r1, r4, r5
 8007c94:	42a3      	cmp	r3, r4
 8007c96:	6025      	str	r5, [r4, #0]
 8007c98:	bf18      	it	ne
 8007c9a:	6059      	strne	r1, [r3, #4]
 8007c9c:	6863      	ldr	r3, [r4, #4]
 8007c9e:	bf08      	it	eq
 8007ca0:	f8c8 1000 	streq.w	r1, [r8]
 8007ca4:	5162      	str	r2, [r4, r5]
 8007ca6:	604b      	str	r3, [r1, #4]
 8007ca8:	4630      	mov	r0, r6
 8007caa:	f000 f82f 	bl	8007d0c <__malloc_unlock>
 8007cae:	f104 000b 	add.w	r0, r4, #11
 8007cb2:	1d23      	adds	r3, r4, #4
 8007cb4:	f020 0007 	bic.w	r0, r0, #7
 8007cb8:	1ac2      	subs	r2, r0, r3
 8007cba:	bf1c      	itt	ne
 8007cbc:	1a1b      	subne	r3, r3, r0
 8007cbe:	50a3      	strne	r3, [r4, r2]
 8007cc0:	e7af      	b.n	8007c22 <_malloc_r+0x22>
 8007cc2:	6862      	ldr	r2, [r4, #4]
 8007cc4:	42a3      	cmp	r3, r4
 8007cc6:	bf0c      	ite	eq
 8007cc8:	f8c8 2000 	streq.w	r2, [r8]
 8007ccc:	605a      	strne	r2, [r3, #4]
 8007cce:	e7eb      	b.n	8007ca8 <_malloc_r+0xa8>
 8007cd0:	4623      	mov	r3, r4
 8007cd2:	6864      	ldr	r4, [r4, #4]
 8007cd4:	e7ae      	b.n	8007c34 <_malloc_r+0x34>
 8007cd6:	463c      	mov	r4, r7
 8007cd8:	687f      	ldr	r7, [r7, #4]
 8007cda:	e7b6      	b.n	8007c4a <_malloc_r+0x4a>
 8007cdc:	461a      	mov	r2, r3
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	42a3      	cmp	r3, r4
 8007ce2:	d1fb      	bne.n	8007cdc <_malloc_r+0xdc>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	6053      	str	r3, [r2, #4]
 8007ce8:	e7de      	b.n	8007ca8 <_malloc_r+0xa8>
 8007cea:	230c      	movs	r3, #12
 8007cec:	6033      	str	r3, [r6, #0]
 8007cee:	4630      	mov	r0, r6
 8007cf0:	f000 f80c 	bl	8007d0c <__malloc_unlock>
 8007cf4:	e794      	b.n	8007c20 <_malloc_r+0x20>
 8007cf6:	6005      	str	r5, [r0, #0]
 8007cf8:	e7d6      	b.n	8007ca8 <_malloc_r+0xa8>
 8007cfa:	bf00      	nop
 8007cfc:	20000820 	.word	0x20000820

08007d00 <__malloc_lock>:
 8007d00:	4801      	ldr	r0, [pc, #4]	@ (8007d08 <__malloc_lock+0x8>)
 8007d02:	f7ff bef9 	b.w	8007af8 <__retarget_lock_acquire_recursive>
 8007d06:	bf00      	nop
 8007d08:	20000818 	.word	0x20000818

08007d0c <__malloc_unlock>:
 8007d0c:	4801      	ldr	r0, [pc, #4]	@ (8007d14 <__malloc_unlock+0x8>)
 8007d0e:	f7ff bef4 	b.w	8007afa <__retarget_lock_release_recursive>
 8007d12:	bf00      	nop
 8007d14:	20000818 	.word	0x20000818

08007d18 <__ssputs_r>:
 8007d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d1c:	688e      	ldr	r6, [r1, #8]
 8007d1e:	461f      	mov	r7, r3
 8007d20:	42be      	cmp	r6, r7
 8007d22:	680b      	ldr	r3, [r1, #0]
 8007d24:	4682      	mov	sl, r0
 8007d26:	460c      	mov	r4, r1
 8007d28:	4690      	mov	r8, r2
 8007d2a:	d82d      	bhi.n	8007d88 <__ssputs_r+0x70>
 8007d2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007d34:	d026      	beq.n	8007d84 <__ssputs_r+0x6c>
 8007d36:	6965      	ldr	r5, [r4, #20]
 8007d38:	6909      	ldr	r1, [r1, #16]
 8007d3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d3e:	eba3 0901 	sub.w	r9, r3, r1
 8007d42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d46:	1c7b      	adds	r3, r7, #1
 8007d48:	444b      	add	r3, r9
 8007d4a:	106d      	asrs	r5, r5, #1
 8007d4c:	429d      	cmp	r5, r3
 8007d4e:	bf38      	it	cc
 8007d50:	461d      	movcc	r5, r3
 8007d52:	0553      	lsls	r3, r2, #21
 8007d54:	d527      	bpl.n	8007da6 <__ssputs_r+0x8e>
 8007d56:	4629      	mov	r1, r5
 8007d58:	f7ff ff52 	bl	8007c00 <_malloc_r>
 8007d5c:	4606      	mov	r6, r0
 8007d5e:	b360      	cbz	r0, 8007dba <__ssputs_r+0xa2>
 8007d60:	6921      	ldr	r1, [r4, #16]
 8007d62:	464a      	mov	r2, r9
 8007d64:	f7ff fed2 	bl	8007b0c <memcpy>
 8007d68:	89a3      	ldrh	r3, [r4, #12]
 8007d6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007d6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d72:	81a3      	strh	r3, [r4, #12]
 8007d74:	6126      	str	r6, [r4, #16]
 8007d76:	6165      	str	r5, [r4, #20]
 8007d78:	444e      	add	r6, r9
 8007d7a:	eba5 0509 	sub.w	r5, r5, r9
 8007d7e:	6026      	str	r6, [r4, #0]
 8007d80:	60a5      	str	r5, [r4, #8]
 8007d82:	463e      	mov	r6, r7
 8007d84:	42be      	cmp	r6, r7
 8007d86:	d900      	bls.n	8007d8a <__ssputs_r+0x72>
 8007d88:	463e      	mov	r6, r7
 8007d8a:	6820      	ldr	r0, [r4, #0]
 8007d8c:	4632      	mov	r2, r6
 8007d8e:	4641      	mov	r1, r8
 8007d90:	f7ff fe66 	bl	8007a60 <memmove>
 8007d94:	68a3      	ldr	r3, [r4, #8]
 8007d96:	1b9b      	subs	r3, r3, r6
 8007d98:	60a3      	str	r3, [r4, #8]
 8007d9a:	6823      	ldr	r3, [r4, #0]
 8007d9c:	4433      	add	r3, r6
 8007d9e:	6023      	str	r3, [r4, #0]
 8007da0:	2000      	movs	r0, #0
 8007da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007da6:	462a      	mov	r2, r5
 8007da8:	f000 faac 	bl	8008304 <_realloc_r>
 8007dac:	4606      	mov	r6, r0
 8007dae:	2800      	cmp	r0, #0
 8007db0:	d1e0      	bne.n	8007d74 <__ssputs_r+0x5c>
 8007db2:	6921      	ldr	r1, [r4, #16]
 8007db4:	4650      	mov	r0, sl
 8007db6:	f7ff feb7 	bl	8007b28 <_free_r>
 8007dba:	230c      	movs	r3, #12
 8007dbc:	f8ca 3000 	str.w	r3, [sl]
 8007dc0:	89a3      	ldrh	r3, [r4, #12]
 8007dc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007dc6:	81a3      	strh	r3, [r4, #12]
 8007dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dcc:	e7e9      	b.n	8007da2 <__ssputs_r+0x8a>
	...

08007dd0 <_svfiprintf_r>:
 8007dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd4:	4698      	mov	r8, r3
 8007dd6:	898b      	ldrh	r3, [r1, #12]
 8007dd8:	061b      	lsls	r3, r3, #24
 8007dda:	b09d      	sub	sp, #116	@ 0x74
 8007ddc:	4607      	mov	r7, r0
 8007dde:	460d      	mov	r5, r1
 8007de0:	4614      	mov	r4, r2
 8007de2:	d510      	bpl.n	8007e06 <_svfiprintf_r+0x36>
 8007de4:	690b      	ldr	r3, [r1, #16]
 8007de6:	b973      	cbnz	r3, 8007e06 <_svfiprintf_r+0x36>
 8007de8:	2140      	movs	r1, #64	@ 0x40
 8007dea:	f7ff ff09 	bl	8007c00 <_malloc_r>
 8007dee:	6028      	str	r0, [r5, #0]
 8007df0:	6128      	str	r0, [r5, #16]
 8007df2:	b930      	cbnz	r0, 8007e02 <_svfiprintf_r+0x32>
 8007df4:	230c      	movs	r3, #12
 8007df6:	603b      	str	r3, [r7, #0]
 8007df8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dfc:	b01d      	add	sp, #116	@ 0x74
 8007dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e02:	2340      	movs	r3, #64	@ 0x40
 8007e04:	616b      	str	r3, [r5, #20]
 8007e06:	2300      	movs	r3, #0
 8007e08:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e0a:	2320      	movs	r3, #32
 8007e0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e10:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e14:	2330      	movs	r3, #48	@ 0x30
 8007e16:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007fb4 <_svfiprintf_r+0x1e4>
 8007e1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e1e:	f04f 0901 	mov.w	r9, #1
 8007e22:	4623      	mov	r3, r4
 8007e24:	469a      	mov	sl, r3
 8007e26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e2a:	b10a      	cbz	r2, 8007e30 <_svfiprintf_r+0x60>
 8007e2c:	2a25      	cmp	r2, #37	@ 0x25
 8007e2e:	d1f9      	bne.n	8007e24 <_svfiprintf_r+0x54>
 8007e30:	ebba 0b04 	subs.w	fp, sl, r4
 8007e34:	d00b      	beq.n	8007e4e <_svfiprintf_r+0x7e>
 8007e36:	465b      	mov	r3, fp
 8007e38:	4622      	mov	r2, r4
 8007e3a:	4629      	mov	r1, r5
 8007e3c:	4638      	mov	r0, r7
 8007e3e:	f7ff ff6b 	bl	8007d18 <__ssputs_r>
 8007e42:	3001      	adds	r0, #1
 8007e44:	f000 80a7 	beq.w	8007f96 <_svfiprintf_r+0x1c6>
 8007e48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e4a:	445a      	add	r2, fp
 8007e4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e4e:	f89a 3000 	ldrb.w	r3, [sl]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f000 809f 	beq.w	8007f96 <_svfiprintf_r+0x1c6>
 8007e58:	2300      	movs	r3, #0
 8007e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e62:	f10a 0a01 	add.w	sl, sl, #1
 8007e66:	9304      	str	r3, [sp, #16]
 8007e68:	9307      	str	r3, [sp, #28]
 8007e6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e6e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e70:	4654      	mov	r4, sl
 8007e72:	2205      	movs	r2, #5
 8007e74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e78:	484e      	ldr	r0, [pc, #312]	@ (8007fb4 <_svfiprintf_r+0x1e4>)
 8007e7a:	f7f8 f9b9 	bl	80001f0 <memchr>
 8007e7e:	9a04      	ldr	r2, [sp, #16]
 8007e80:	b9d8      	cbnz	r0, 8007eba <_svfiprintf_r+0xea>
 8007e82:	06d0      	lsls	r0, r2, #27
 8007e84:	bf44      	itt	mi
 8007e86:	2320      	movmi	r3, #32
 8007e88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e8c:	0711      	lsls	r1, r2, #28
 8007e8e:	bf44      	itt	mi
 8007e90:	232b      	movmi	r3, #43	@ 0x2b
 8007e92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e96:	f89a 3000 	ldrb.w	r3, [sl]
 8007e9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e9c:	d015      	beq.n	8007eca <_svfiprintf_r+0xfa>
 8007e9e:	9a07      	ldr	r2, [sp, #28]
 8007ea0:	4654      	mov	r4, sl
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	f04f 0c0a 	mov.w	ip, #10
 8007ea8:	4621      	mov	r1, r4
 8007eaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007eae:	3b30      	subs	r3, #48	@ 0x30
 8007eb0:	2b09      	cmp	r3, #9
 8007eb2:	d94b      	bls.n	8007f4c <_svfiprintf_r+0x17c>
 8007eb4:	b1b0      	cbz	r0, 8007ee4 <_svfiprintf_r+0x114>
 8007eb6:	9207      	str	r2, [sp, #28]
 8007eb8:	e014      	b.n	8007ee4 <_svfiprintf_r+0x114>
 8007eba:	eba0 0308 	sub.w	r3, r0, r8
 8007ebe:	fa09 f303 	lsl.w	r3, r9, r3
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	9304      	str	r3, [sp, #16]
 8007ec6:	46a2      	mov	sl, r4
 8007ec8:	e7d2      	b.n	8007e70 <_svfiprintf_r+0xa0>
 8007eca:	9b03      	ldr	r3, [sp, #12]
 8007ecc:	1d19      	adds	r1, r3, #4
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	9103      	str	r1, [sp, #12]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	bfbb      	ittet	lt
 8007ed6:	425b      	neglt	r3, r3
 8007ed8:	f042 0202 	orrlt.w	r2, r2, #2
 8007edc:	9307      	strge	r3, [sp, #28]
 8007ede:	9307      	strlt	r3, [sp, #28]
 8007ee0:	bfb8      	it	lt
 8007ee2:	9204      	strlt	r2, [sp, #16]
 8007ee4:	7823      	ldrb	r3, [r4, #0]
 8007ee6:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ee8:	d10a      	bne.n	8007f00 <_svfiprintf_r+0x130>
 8007eea:	7863      	ldrb	r3, [r4, #1]
 8007eec:	2b2a      	cmp	r3, #42	@ 0x2a
 8007eee:	d132      	bne.n	8007f56 <_svfiprintf_r+0x186>
 8007ef0:	9b03      	ldr	r3, [sp, #12]
 8007ef2:	1d1a      	adds	r2, r3, #4
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	9203      	str	r2, [sp, #12]
 8007ef8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007efc:	3402      	adds	r4, #2
 8007efe:	9305      	str	r3, [sp, #20]
 8007f00:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007fc4 <_svfiprintf_r+0x1f4>
 8007f04:	7821      	ldrb	r1, [r4, #0]
 8007f06:	2203      	movs	r2, #3
 8007f08:	4650      	mov	r0, sl
 8007f0a:	f7f8 f971 	bl	80001f0 <memchr>
 8007f0e:	b138      	cbz	r0, 8007f20 <_svfiprintf_r+0x150>
 8007f10:	9b04      	ldr	r3, [sp, #16]
 8007f12:	eba0 000a 	sub.w	r0, r0, sl
 8007f16:	2240      	movs	r2, #64	@ 0x40
 8007f18:	4082      	lsls	r2, r0
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	3401      	adds	r4, #1
 8007f1e:	9304      	str	r3, [sp, #16]
 8007f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f24:	4824      	ldr	r0, [pc, #144]	@ (8007fb8 <_svfiprintf_r+0x1e8>)
 8007f26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f2a:	2206      	movs	r2, #6
 8007f2c:	f7f8 f960 	bl	80001f0 <memchr>
 8007f30:	2800      	cmp	r0, #0
 8007f32:	d036      	beq.n	8007fa2 <_svfiprintf_r+0x1d2>
 8007f34:	4b21      	ldr	r3, [pc, #132]	@ (8007fbc <_svfiprintf_r+0x1ec>)
 8007f36:	bb1b      	cbnz	r3, 8007f80 <_svfiprintf_r+0x1b0>
 8007f38:	9b03      	ldr	r3, [sp, #12]
 8007f3a:	3307      	adds	r3, #7
 8007f3c:	f023 0307 	bic.w	r3, r3, #7
 8007f40:	3308      	adds	r3, #8
 8007f42:	9303      	str	r3, [sp, #12]
 8007f44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f46:	4433      	add	r3, r6
 8007f48:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f4a:	e76a      	b.n	8007e22 <_svfiprintf_r+0x52>
 8007f4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f50:	460c      	mov	r4, r1
 8007f52:	2001      	movs	r0, #1
 8007f54:	e7a8      	b.n	8007ea8 <_svfiprintf_r+0xd8>
 8007f56:	2300      	movs	r3, #0
 8007f58:	3401      	adds	r4, #1
 8007f5a:	9305      	str	r3, [sp, #20]
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	f04f 0c0a 	mov.w	ip, #10
 8007f62:	4620      	mov	r0, r4
 8007f64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f68:	3a30      	subs	r2, #48	@ 0x30
 8007f6a:	2a09      	cmp	r2, #9
 8007f6c:	d903      	bls.n	8007f76 <_svfiprintf_r+0x1a6>
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d0c6      	beq.n	8007f00 <_svfiprintf_r+0x130>
 8007f72:	9105      	str	r1, [sp, #20]
 8007f74:	e7c4      	b.n	8007f00 <_svfiprintf_r+0x130>
 8007f76:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f7a:	4604      	mov	r4, r0
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e7f0      	b.n	8007f62 <_svfiprintf_r+0x192>
 8007f80:	ab03      	add	r3, sp, #12
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	462a      	mov	r2, r5
 8007f86:	4b0e      	ldr	r3, [pc, #56]	@ (8007fc0 <_svfiprintf_r+0x1f0>)
 8007f88:	a904      	add	r1, sp, #16
 8007f8a:	4638      	mov	r0, r7
 8007f8c:	f3af 8000 	nop.w
 8007f90:	1c42      	adds	r2, r0, #1
 8007f92:	4606      	mov	r6, r0
 8007f94:	d1d6      	bne.n	8007f44 <_svfiprintf_r+0x174>
 8007f96:	89ab      	ldrh	r3, [r5, #12]
 8007f98:	065b      	lsls	r3, r3, #25
 8007f9a:	f53f af2d 	bmi.w	8007df8 <_svfiprintf_r+0x28>
 8007f9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007fa0:	e72c      	b.n	8007dfc <_svfiprintf_r+0x2c>
 8007fa2:	ab03      	add	r3, sp, #12
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	462a      	mov	r2, r5
 8007fa8:	4b05      	ldr	r3, [pc, #20]	@ (8007fc0 <_svfiprintf_r+0x1f0>)
 8007faa:	a904      	add	r1, sp, #16
 8007fac:	4638      	mov	r0, r7
 8007fae:	f000 f879 	bl	80080a4 <_printf_i>
 8007fb2:	e7ed      	b.n	8007f90 <_svfiprintf_r+0x1c0>
 8007fb4:	0800b0c0 	.word	0x0800b0c0
 8007fb8:	0800b0ca 	.word	0x0800b0ca
 8007fbc:	00000000 	.word	0x00000000
 8007fc0:	08007d19 	.word	0x08007d19
 8007fc4:	0800b0c6 	.word	0x0800b0c6

08007fc8 <_printf_common>:
 8007fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fcc:	4616      	mov	r6, r2
 8007fce:	4698      	mov	r8, r3
 8007fd0:	688a      	ldr	r2, [r1, #8]
 8007fd2:	690b      	ldr	r3, [r1, #16]
 8007fd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	bfb8      	it	lt
 8007fdc:	4613      	movlt	r3, r2
 8007fde:	6033      	str	r3, [r6, #0]
 8007fe0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007fe4:	4607      	mov	r7, r0
 8007fe6:	460c      	mov	r4, r1
 8007fe8:	b10a      	cbz	r2, 8007fee <_printf_common+0x26>
 8007fea:	3301      	adds	r3, #1
 8007fec:	6033      	str	r3, [r6, #0]
 8007fee:	6823      	ldr	r3, [r4, #0]
 8007ff0:	0699      	lsls	r1, r3, #26
 8007ff2:	bf42      	ittt	mi
 8007ff4:	6833      	ldrmi	r3, [r6, #0]
 8007ff6:	3302      	addmi	r3, #2
 8007ff8:	6033      	strmi	r3, [r6, #0]
 8007ffa:	6825      	ldr	r5, [r4, #0]
 8007ffc:	f015 0506 	ands.w	r5, r5, #6
 8008000:	d106      	bne.n	8008010 <_printf_common+0x48>
 8008002:	f104 0a19 	add.w	sl, r4, #25
 8008006:	68e3      	ldr	r3, [r4, #12]
 8008008:	6832      	ldr	r2, [r6, #0]
 800800a:	1a9b      	subs	r3, r3, r2
 800800c:	42ab      	cmp	r3, r5
 800800e:	dc26      	bgt.n	800805e <_printf_common+0x96>
 8008010:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008014:	6822      	ldr	r2, [r4, #0]
 8008016:	3b00      	subs	r3, #0
 8008018:	bf18      	it	ne
 800801a:	2301      	movne	r3, #1
 800801c:	0692      	lsls	r2, r2, #26
 800801e:	d42b      	bmi.n	8008078 <_printf_common+0xb0>
 8008020:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008024:	4641      	mov	r1, r8
 8008026:	4638      	mov	r0, r7
 8008028:	47c8      	blx	r9
 800802a:	3001      	adds	r0, #1
 800802c:	d01e      	beq.n	800806c <_printf_common+0xa4>
 800802e:	6823      	ldr	r3, [r4, #0]
 8008030:	6922      	ldr	r2, [r4, #16]
 8008032:	f003 0306 	and.w	r3, r3, #6
 8008036:	2b04      	cmp	r3, #4
 8008038:	bf02      	ittt	eq
 800803a:	68e5      	ldreq	r5, [r4, #12]
 800803c:	6833      	ldreq	r3, [r6, #0]
 800803e:	1aed      	subeq	r5, r5, r3
 8008040:	68a3      	ldr	r3, [r4, #8]
 8008042:	bf0c      	ite	eq
 8008044:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008048:	2500      	movne	r5, #0
 800804a:	4293      	cmp	r3, r2
 800804c:	bfc4      	itt	gt
 800804e:	1a9b      	subgt	r3, r3, r2
 8008050:	18ed      	addgt	r5, r5, r3
 8008052:	2600      	movs	r6, #0
 8008054:	341a      	adds	r4, #26
 8008056:	42b5      	cmp	r5, r6
 8008058:	d11a      	bne.n	8008090 <_printf_common+0xc8>
 800805a:	2000      	movs	r0, #0
 800805c:	e008      	b.n	8008070 <_printf_common+0xa8>
 800805e:	2301      	movs	r3, #1
 8008060:	4652      	mov	r2, sl
 8008062:	4641      	mov	r1, r8
 8008064:	4638      	mov	r0, r7
 8008066:	47c8      	blx	r9
 8008068:	3001      	adds	r0, #1
 800806a:	d103      	bne.n	8008074 <_printf_common+0xac>
 800806c:	f04f 30ff 	mov.w	r0, #4294967295
 8008070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008074:	3501      	adds	r5, #1
 8008076:	e7c6      	b.n	8008006 <_printf_common+0x3e>
 8008078:	18e1      	adds	r1, r4, r3
 800807a:	1c5a      	adds	r2, r3, #1
 800807c:	2030      	movs	r0, #48	@ 0x30
 800807e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008082:	4422      	add	r2, r4
 8008084:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008088:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800808c:	3302      	adds	r3, #2
 800808e:	e7c7      	b.n	8008020 <_printf_common+0x58>
 8008090:	2301      	movs	r3, #1
 8008092:	4622      	mov	r2, r4
 8008094:	4641      	mov	r1, r8
 8008096:	4638      	mov	r0, r7
 8008098:	47c8      	blx	r9
 800809a:	3001      	adds	r0, #1
 800809c:	d0e6      	beq.n	800806c <_printf_common+0xa4>
 800809e:	3601      	adds	r6, #1
 80080a0:	e7d9      	b.n	8008056 <_printf_common+0x8e>
	...

080080a4 <_printf_i>:
 80080a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080a8:	7e0f      	ldrb	r7, [r1, #24]
 80080aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80080ac:	2f78      	cmp	r7, #120	@ 0x78
 80080ae:	4691      	mov	r9, r2
 80080b0:	4680      	mov	r8, r0
 80080b2:	460c      	mov	r4, r1
 80080b4:	469a      	mov	sl, r3
 80080b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80080ba:	d807      	bhi.n	80080cc <_printf_i+0x28>
 80080bc:	2f62      	cmp	r7, #98	@ 0x62
 80080be:	d80a      	bhi.n	80080d6 <_printf_i+0x32>
 80080c0:	2f00      	cmp	r7, #0
 80080c2:	f000 80d2 	beq.w	800826a <_printf_i+0x1c6>
 80080c6:	2f58      	cmp	r7, #88	@ 0x58
 80080c8:	f000 80b9 	beq.w	800823e <_printf_i+0x19a>
 80080cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80080d4:	e03a      	b.n	800814c <_printf_i+0xa8>
 80080d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80080da:	2b15      	cmp	r3, #21
 80080dc:	d8f6      	bhi.n	80080cc <_printf_i+0x28>
 80080de:	a101      	add	r1, pc, #4	@ (adr r1, 80080e4 <_printf_i+0x40>)
 80080e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080e4:	0800813d 	.word	0x0800813d
 80080e8:	08008151 	.word	0x08008151
 80080ec:	080080cd 	.word	0x080080cd
 80080f0:	080080cd 	.word	0x080080cd
 80080f4:	080080cd 	.word	0x080080cd
 80080f8:	080080cd 	.word	0x080080cd
 80080fc:	08008151 	.word	0x08008151
 8008100:	080080cd 	.word	0x080080cd
 8008104:	080080cd 	.word	0x080080cd
 8008108:	080080cd 	.word	0x080080cd
 800810c:	080080cd 	.word	0x080080cd
 8008110:	08008251 	.word	0x08008251
 8008114:	0800817b 	.word	0x0800817b
 8008118:	0800820b 	.word	0x0800820b
 800811c:	080080cd 	.word	0x080080cd
 8008120:	080080cd 	.word	0x080080cd
 8008124:	08008273 	.word	0x08008273
 8008128:	080080cd 	.word	0x080080cd
 800812c:	0800817b 	.word	0x0800817b
 8008130:	080080cd 	.word	0x080080cd
 8008134:	080080cd 	.word	0x080080cd
 8008138:	08008213 	.word	0x08008213
 800813c:	6833      	ldr	r3, [r6, #0]
 800813e:	1d1a      	adds	r2, r3, #4
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	6032      	str	r2, [r6, #0]
 8008144:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008148:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800814c:	2301      	movs	r3, #1
 800814e:	e09d      	b.n	800828c <_printf_i+0x1e8>
 8008150:	6833      	ldr	r3, [r6, #0]
 8008152:	6820      	ldr	r0, [r4, #0]
 8008154:	1d19      	adds	r1, r3, #4
 8008156:	6031      	str	r1, [r6, #0]
 8008158:	0606      	lsls	r6, r0, #24
 800815a:	d501      	bpl.n	8008160 <_printf_i+0xbc>
 800815c:	681d      	ldr	r5, [r3, #0]
 800815e:	e003      	b.n	8008168 <_printf_i+0xc4>
 8008160:	0645      	lsls	r5, r0, #25
 8008162:	d5fb      	bpl.n	800815c <_printf_i+0xb8>
 8008164:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008168:	2d00      	cmp	r5, #0
 800816a:	da03      	bge.n	8008174 <_printf_i+0xd0>
 800816c:	232d      	movs	r3, #45	@ 0x2d
 800816e:	426d      	negs	r5, r5
 8008170:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008174:	4859      	ldr	r0, [pc, #356]	@ (80082dc <_printf_i+0x238>)
 8008176:	230a      	movs	r3, #10
 8008178:	e011      	b.n	800819e <_printf_i+0xfa>
 800817a:	6821      	ldr	r1, [r4, #0]
 800817c:	6833      	ldr	r3, [r6, #0]
 800817e:	0608      	lsls	r0, r1, #24
 8008180:	f853 5b04 	ldr.w	r5, [r3], #4
 8008184:	d402      	bmi.n	800818c <_printf_i+0xe8>
 8008186:	0649      	lsls	r1, r1, #25
 8008188:	bf48      	it	mi
 800818a:	b2ad      	uxthmi	r5, r5
 800818c:	2f6f      	cmp	r7, #111	@ 0x6f
 800818e:	4853      	ldr	r0, [pc, #332]	@ (80082dc <_printf_i+0x238>)
 8008190:	6033      	str	r3, [r6, #0]
 8008192:	bf14      	ite	ne
 8008194:	230a      	movne	r3, #10
 8008196:	2308      	moveq	r3, #8
 8008198:	2100      	movs	r1, #0
 800819a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800819e:	6866      	ldr	r6, [r4, #4]
 80081a0:	60a6      	str	r6, [r4, #8]
 80081a2:	2e00      	cmp	r6, #0
 80081a4:	bfa2      	ittt	ge
 80081a6:	6821      	ldrge	r1, [r4, #0]
 80081a8:	f021 0104 	bicge.w	r1, r1, #4
 80081ac:	6021      	strge	r1, [r4, #0]
 80081ae:	b90d      	cbnz	r5, 80081b4 <_printf_i+0x110>
 80081b0:	2e00      	cmp	r6, #0
 80081b2:	d04b      	beq.n	800824c <_printf_i+0x1a8>
 80081b4:	4616      	mov	r6, r2
 80081b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80081ba:	fb03 5711 	mls	r7, r3, r1, r5
 80081be:	5dc7      	ldrb	r7, [r0, r7]
 80081c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80081c4:	462f      	mov	r7, r5
 80081c6:	42bb      	cmp	r3, r7
 80081c8:	460d      	mov	r5, r1
 80081ca:	d9f4      	bls.n	80081b6 <_printf_i+0x112>
 80081cc:	2b08      	cmp	r3, #8
 80081ce:	d10b      	bne.n	80081e8 <_printf_i+0x144>
 80081d0:	6823      	ldr	r3, [r4, #0]
 80081d2:	07df      	lsls	r7, r3, #31
 80081d4:	d508      	bpl.n	80081e8 <_printf_i+0x144>
 80081d6:	6923      	ldr	r3, [r4, #16]
 80081d8:	6861      	ldr	r1, [r4, #4]
 80081da:	4299      	cmp	r1, r3
 80081dc:	bfde      	ittt	le
 80081de:	2330      	movle	r3, #48	@ 0x30
 80081e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80081e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80081e8:	1b92      	subs	r2, r2, r6
 80081ea:	6122      	str	r2, [r4, #16]
 80081ec:	f8cd a000 	str.w	sl, [sp]
 80081f0:	464b      	mov	r3, r9
 80081f2:	aa03      	add	r2, sp, #12
 80081f4:	4621      	mov	r1, r4
 80081f6:	4640      	mov	r0, r8
 80081f8:	f7ff fee6 	bl	8007fc8 <_printf_common>
 80081fc:	3001      	adds	r0, #1
 80081fe:	d14a      	bne.n	8008296 <_printf_i+0x1f2>
 8008200:	f04f 30ff 	mov.w	r0, #4294967295
 8008204:	b004      	add	sp, #16
 8008206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	f043 0320 	orr.w	r3, r3, #32
 8008210:	6023      	str	r3, [r4, #0]
 8008212:	4833      	ldr	r0, [pc, #204]	@ (80082e0 <_printf_i+0x23c>)
 8008214:	2778      	movs	r7, #120	@ 0x78
 8008216:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800821a:	6823      	ldr	r3, [r4, #0]
 800821c:	6831      	ldr	r1, [r6, #0]
 800821e:	061f      	lsls	r7, r3, #24
 8008220:	f851 5b04 	ldr.w	r5, [r1], #4
 8008224:	d402      	bmi.n	800822c <_printf_i+0x188>
 8008226:	065f      	lsls	r7, r3, #25
 8008228:	bf48      	it	mi
 800822a:	b2ad      	uxthmi	r5, r5
 800822c:	6031      	str	r1, [r6, #0]
 800822e:	07d9      	lsls	r1, r3, #31
 8008230:	bf44      	itt	mi
 8008232:	f043 0320 	orrmi.w	r3, r3, #32
 8008236:	6023      	strmi	r3, [r4, #0]
 8008238:	b11d      	cbz	r5, 8008242 <_printf_i+0x19e>
 800823a:	2310      	movs	r3, #16
 800823c:	e7ac      	b.n	8008198 <_printf_i+0xf4>
 800823e:	4827      	ldr	r0, [pc, #156]	@ (80082dc <_printf_i+0x238>)
 8008240:	e7e9      	b.n	8008216 <_printf_i+0x172>
 8008242:	6823      	ldr	r3, [r4, #0]
 8008244:	f023 0320 	bic.w	r3, r3, #32
 8008248:	6023      	str	r3, [r4, #0]
 800824a:	e7f6      	b.n	800823a <_printf_i+0x196>
 800824c:	4616      	mov	r6, r2
 800824e:	e7bd      	b.n	80081cc <_printf_i+0x128>
 8008250:	6833      	ldr	r3, [r6, #0]
 8008252:	6825      	ldr	r5, [r4, #0]
 8008254:	6961      	ldr	r1, [r4, #20]
 8008256:	1d18      	adds	r0, r3, #4
 8008258:	6030      	str	r0, [r6, #0]
 800825a:	062e      	lsls	r6, r5, #24
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	d501      	bpl.n	8008264 <_printf_i+0x1c0>
 8008260:	6019      	str	r1, [r3, #0]
 8008262:	e002      	b.n	800826a <_printf_i+0x1c6>
 8008264:	0668      	lsls	r0, r5, #25
 8008266:	d5fb      	bpl.n	8008260 <_printf_i+0x1bc>
 8008268:	8019      	strh	r1, [r3, #0]
 800826a:	2300      	movs	r3, #0
 800826c:	6123      	str	r3, [r4, #16]
 800826e:	4616      	mov	r6, r2
 8008270:	e7bc      	b.n	80081ec <_printf_i+0x148>
 8008272:	6833      	ldr	r3, [r6, #0]
 8008274:	1d1a      	adds	r2, r3, #4
 8008276:	6032      	str	r2, [r6, #0]
 8008278:	681e      	ldr	r6, [r3, #0]
 800827a:	6862      	ldr	r2, [r4, #4]
 800827c:	2100      	movs	r1, #0
 800827e:	4630      	mov	r0, r6
 8008280:	f7f7 ffb6 	bl	80001f0 <memchr>
 8008284:	b108      	cbz	r0, 800828a <_printf_i+0x1e6>
 8008286:	1b80      	subs	r0, r0, r6
 8008288:	6060      	str	r0, [r4, #4]
 800828a:	6863      	ldr	r3, [r4, #4]
 800828c:	6123      	str	r3, [r4, #16]
 800828e:	2300      	movs	r3, #0
 8008290:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008294:	e7aa      	b.n	80081ec <_printf_i+0x148>
 8008296:	6923      	ldr	r3, [r4, #16]
 8008298:	4632      	mov	r2, r6
 800829a:	4649      	mov	r1, r9
 800829c:	4640      	mov	r0, r8
 800829e:	47d0      	blx	sl
 80082a0:	3001      	adds	r0, #1
 80082a2:	d0ad      	beq.n	8008200 <_printf_i+0x15c>
 80082a4:	6823      	ldr	r3, [r4, #0]
 80082a6:	079b      	lsls	r3, r3, #30
 80082a8:	d413      	bmi.n	80082d2 <_printf_i+0x22e>
 80082aa:	68e0      	ldr	r0, [r4, #12]
 80082ac:	9b03      	ldr	r3, [sp, #12]
 80082ae:	4298      	cmp	r0, r3
 80082b0:	bfb8      	it	lt
 80082b2:	4618      	movlt	r0, r3
 80082b4:	e7a6      	b.n	8008204 <_printf_i+0x160>
 80082b6:	2301      	movs	r3, #1
 80082b8:	4632      	mov	r2, r6
 80082ba:	4649      	mov	r1, r9
 80082bc:	4640      	mov	r0, r8
 80082be:	47d0      	blx	sl
 80082c0:	3001      	adds	r0, #1
 80082c2:	d09d      	beq.n	8008200 <_printf_i+0x15c>
 80082c4:	3501      	adds	r5, #1
 80082c6:	68e3      	ldr	r3, [r4, #12]
 80082c8:	9903      	ldr	r1, [sp, #12]
 80082ca:	1a5b      	subs	r3, r3, r1
 80082cc:	42ab      	cmp	r3, r5
 80082ce:	dcf2      	bgt.n	80082b6 <_printf_i+0x212>
 80082d0:	e7eb      	b.n	80082aa <_printf_i+0x206>
 80082d2:	2500      	movs	r5, #0
 80082d4:	f104 0619 	add.w	r6, r4, #25
 80082d8:	e7f5      	b.n	80082c6 <_printf_i+0x222>
 80082da:	bf00      	nop
 80082dc:	0800b0d1 	.word	0x0800b0d1
 80082e0:	0800b0e2 	.word	0x0800b0e2

080082e4 <_sbrk_r>:
 80082e4:	b538      	push	{r3, r4, r5, lr}
 80082e6:	4d06      	ldr	r5, [pc, #24]	@ (8008300 <_sbrk_r+0x1c>)
 80082e8:	2300      	movs	r3, #0
 80082ea:	4604      	mov	r4, r0
 80082ec:	4608      	mov	r0, r1
 80082ee:	602b      	str	r3, [r5, #0]
 80082f0:	f7fa fa5a 	bl	80027a8 <_sbrk>
 80082f4:	1c43      	adds	r3, r0, #1
 80082f6:	d102      	bne.n	80082fe <_sbrk_r+0x1a>
 80082f8:	682b      	ldr	r3, [r5, #0]
 80082fa:	b103      	cbz	r3, 80082fe <_sbrk_r+0x1a>
 80082fc:	6023      	str	r3, [r4, #0]
 80082fe:	bd38      	pop	{r3, r4, r5, pc}
 8008300:	20000814 	.word	0x20000814

08008304 <_realloc_r>:
 8008304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008308:	4680      	mov	r8, r0
 800830a:	4615      	mov	r5, r2
 800830c:	460c      	mov	r4, r1
 800830e:	b921      	cbnz	r1, 800831a <_realloc_r+0x16>
 8008310:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008314:	4611      	mov	r1, r2
 8008316:	f7ff bc73 	b.w	8007c00 <_malloc_r>
 800831a:	b92a      	cbnz	r2, 8008328 <_realloc_r+0x24>
 800831c:	f7ff fc04 	bl	8007b28 <_free_r>
 8008320:	2400      	movs	r4, #0
 8008322:	4620      	mov	r0, r4
 8008324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008328:	f000 f81a 	bl	8008360 <_malloc_usable_size_r>
 800832c:	4285      	cmp	r5, r0
 800832e:	4606      	mov	r6, r0
 8008330:	d802      	bhi.n	8008338 <_realloc_r+0x34>
 8008332:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008336:	d8f4      	bhi.n	8008322 <_realloc_r+0x1e>
 8008338:	4629      	mov	r1, r5
 800833a:	4640      	mov	r0, r8
 800833c:	f7ff fc60 	bl	8007c00 <_malloc_r>
 8008340:	4607      	mov	r7, r0
 8008342:	2800      	cmp	r0, #0
 8008344:	d0ec      	beq.n	8008320 <_realloc_r+0x1c>
 8008346:	42b5      	cmp	r5, r6
 8008348:	462a      	mov	r2, r5
 800834a:	4621      	mov	r1, r4
 800834c:	bf28      	it	cs
 800834e:	4632      	movcs	r2, r6
 8008350:	f7ff fbdc 	bl	8007b0c <memcpy>
 8008354:	4621      	mov	r1, r4
 8008356:	4640      	mov	r0, r8
 8008358:	f7ff fbe6 	bl	8007b28 <_free_r>
 800835c:	463c      	mov	r4, r7
 800835e:	e7e0      	b.n	8008322 <_realloc_r+0x1e>

08008360 <_malloc_usable_size_r>:
 8008360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008364:	1f18      	subs	r0, r3, #4
 8008366:	2b00      	cmp	r3, #0
 8008368:	bfbc      	itt	lt
 800836a:	580b      	ldrlt	r3, [r1, r0]
 800836c:	18c0      	addlt	r0, r0, r3
 800836e:	4770      	bx	lr

08008370 <atan2>:
 8008370:	f000 ba2e 	b.w	80087d0 <__ieee754_atan2>
 8008374:	0000      	movs	r0, r0
	...

08008378 <cos>:
 8008378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800837a:	ec53 2b10 	vmov	r2, r3, d0
 800837e:	4826      	ldr	r0, [pc, #152]	@ (8008418 <cos+0xa0>)
 8008380:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008384:	4281      	cmp	r1, r0
 8008386:	d806      	bhi.n	8008396 <cos+0x1e>
 8008388:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8008410 <cos+0x98>
 800838c:	b005      	add	sp, #20
 800838e:	f85d eb04 	ldr.w	lr, [sp], #4
 8008392:	f000 b899 	b.w	80084c8 <__kernel_cos>
 8008396:	4821      	ldr	r0, [pc, #132]	@ (800841c <cos+0xa4>)
 8008398:	4281      	cmp	r1, r0
 800839a:	d908      	bls.n	80083ae <cos+0x36>
 800839c:	4610      	mov	r0, r2
 800839e:	4619      	mov	r1, r3
 80083a0:	f7f7 ff7a 	bl	8000298 <__aeabi_dsub>
 80083a4:	ec41 0b10 	vmov	d0, r0, r1
 80083a8:	b005      	add	sp, #20
 80083aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80083ae:	4668      	mov	r0, sp
 80083b0:	f000 fad6 	bl	8008960 <__ieee754_rem_pio2>
 80083b4:	f000 0003 	and.w	r0, r0, #3
 80083b8:	2801      	cmp	r0, #1
 80083ba:	d00b      	beq.n	80083d4 <cos+0x5c>
 80083bc:	2802      	cmp	r0, #2
 80083be:	d015      	beq.n	80083ec <cos+0x74>
 80083c0:	b9d8      	cbnz	r0, 80083fa <cos+0x82>
 80083c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80083c6:	ed9d 0b00 	vldr	d0, [sp]
 80083ca:	f000 f87d 	bl	80084c8 <__kernel_cos>
 80083ce:	ec51 0b10 	vmov	r0, r1, d0
 80083d2:	e7e7      	b.n	80083a4 <cos+0x2c>
 80083d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80083d8:	ed9d 0b00 	vldr	d0, [sp]
 80083dc:	f000 f93c 	bl	8008658 <__kernel_sin>
 80083e0:	ec53 2b10 	vmov	r2, r3, d0
 80083e4:	4610      	mov	r0, r2
 80083e6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80083ea:	e7db      	b.n	80083a4 <cos+0x2c>
 80083ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80083f0:	ed9d 0b00 	vldr	d0, [sp]
 80083f4:	f000 f868 	bl	80084c8 <__kernel_cos>
 80083f8:	e7f2      	b.n	80083e0 <cos+0x68>
 80083fa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80083fe:	ed9d 0b00 	vldr	d0, [sp]
 8008402:	2001      	movs	r0, #1
 8008404:	f000 f928 	bl	8008658 <__kernel_sin>
 8008408:	e7e1      	b.n	80083ce <cos+0x56>
 800840a:	bf00      	nop
 800840c:	f3af 8000 	nop.w
	...
 8008418:	3fe921fb 	.word	0x3fe921fb
 800841c:	7fefffff 	.word	0x7fefffff

08008420 <sin>:
 8008420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008422:	ec53 2b10 	vmov	r2, r3, d0
 8008426:	4826      	ldr	r0, [pc, #152]	@ (80084c0 <sin+0xa0>)
 8008428:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800842c:	4281      	cmp	r1, r0
 800842e:	d807      	bhi.n	8008440 <sin+0x20>
 8008430:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80084b8 <sin+0x98>
 8008434:	2000      	movs	r0, #0
 8008436:	b005      	add	sp, #20
 8008438:	f85d eb04 	ldr.w	lr, [sp], #4
 800843c:	f000 b90c 	b.w	8008658 <__kernel_sin>
 8008440:	4820      	ldr	r0, [pc, #128]	@ (80084c4 <sin+0xa4>)
 8008442:	4281      	cmp	r1, r0
 8008444:	d908      	bls.n	8008458 <sin+0x38>
 8008446:	4610      	mov	r0, r2
 8008448:	4619      	mov	r1, r3
 800844a:	f7f7 ff25 	bl	8000298 <__aeabi_dsub>
 800844e:	ec41 0b10 	vmov	d0, r0, r1
 8008452:	b005      	add	sp, #20
 8008454:	f85d fb04 	ldr.w	pc, [sp], #4
 8008458:	4668      	mov	r0, sp
 800845a:	f000 fa81 	bl	8008960 <__ieee754_rem_pio2>
 800845e:	f000 0003 	and.w	r0, r0, #3
 8008462:	2801      	cmp	r0, #1
 8008464:	d00c      	beq.n	8008480 <sin+0x60>
 8008466:	2802      	cmp	r0, #2
 8008468:	d011      	beq.n	800848e <sin+0x6e>
 800846a:	b9e8      	cbnz	r0, 80084a8 <sin+0x88>
 800846c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008470:	ed9d 0b00 	vldr	d0, [sp]
 8008474:	2001      	movs	r0, #1
 8008476:	f000 f8ef 	bl	8008658 <__kernel_sin>
 800847a:	ec51 0b10 	vmov	r0, r1, d0
 800847e:	e7e6      	b.n	800844e <sin+0x2e>
 8008480:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008484:	ed9d 0b00 	vldr	d0, [sp]
 8008488:	f000 f81e 	bl	80084c8 <__kernel_cos>
 800848c:	e7f5      	b.n	800847a <sin+0x5a>
 800848e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008492:	ed9d 0b00 	vldr	d0, [sp]
 8008496:	2001      	movs	r0, #1
 8008498:	f000 f8de 	bl	8008658 <__kernel_sin>
 800849c:	ec53 2b10 	vmov	r2, r3, d0
 80084a0:	4610      	mov	r0, r2
 80084a2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80084a6:	e7d2      	b.n	800844e <sin+0x2e>
 80084a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80084ac:	ed9d 0b00 	vldr	d0, [sp]
 80084b0:	f000 f80a 	bl	80084c8 <__kernel_cos>
 80084b4:	e7f2      	b.n	800849c <sin+0x7c>
 80084b6:	bf00      	nop
	...
 80084c0:	3fe921fb 	.word	0x3fe921fb
 80084c4:	7fefffff 	.word	0x7fefffff

080084c8 <__kernel_cos>:
 80084c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084cc:	ec57 6b10 	vmov	r6, r7, d0
 80084d0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80084d4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80084d8:	ed8d 1b00 	vstr	d1, [sp]
 80084dc:	d206      	bcs.n	80084ec <__kernel_cos+0x24>
 80084de:	4630      	mov	r0, r6
 80084e0:	4639      	mov	r1, r7
 80084e2:	f7f8 fb2b 	bl	8000b3c <__aeabi_d2iz>
 80084e6:	2800      	cmp	r0, #0
 80084e8:	f000 8088 	beq.w	80085fc <__kernel_cos+0x134>
 80084ec:	4632      	mov	r2, r6
 80084ee:	463b      	mov	r3, r7
 80084f0:	4630      	mov	r0, r6
 80084f2:	4639      	mov	r1, r7
 80084f4:	f7f8 f888 	bl	8000608 <__aeabi_dmul>
 80084f8:	4b51      	ldr	r3, [pc, #324]	@ (8008640 <__kernel_cos+0x178>)
 80084fa:	2200      	movs	r2, #0
 80084fc:	4604      	mov	r4, r0
 80084fe:	460d      	mov	r5, r1
 8008500:	f7f8 f882 	bl	8000608 <__aeabi_dmul>
 8008504:	a340      	add	r3, pc, #256	@ (adr r3, 8008608 <__kernel_cos+0x140>)
 8008506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850a:	4682      	mov	sl, r0
 800850c:	468b      	mov	fp, r1
 800850e:	4620      	mov	r0, r4
 8008510:	4629      	mov	r1, r5
 8008512:	f7f8 f879 	bl	8000608 <__aeabi_dmul>
 8008516:	a33e      	add	r3, pc, #248	@ (adr r3, 8008610 <__kernel_cos+0x148>)
 8008518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851c:	f7f7 febe 	bl	800029c <__adddf3>
 8008520:	4622      	mov	r2, r4
 8008522:	462b      	mov	r3, r5
 8008524:	f7f8 f870 	bl	8000608 <__aeabi_dmul>
 8008528:	a33b      	add	r3, pc, #236	@ (adr r3, 8008618 <__kernel_cos+0x150>)
 800852a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852e:	f7f7 feb3 	bl	8000298 <__aeabi_dsub>
 8008532:	4622      	mov	r2, r4
 8008534:	462b      	mov	r3, r5
 8008536:	f7f8 f867 	bl	8000608 <__aeabi_dmul>
 800853a:	a339      	add	r3, pc, #228	@ (adr r3, 8008620 <__kernel_cos+0x158>)
 800853c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008540:	f7f7 feac 	bl	800029c <__adddf3>
 8008544:	4622      	mov	r2, r4
 8008546:	462b      	mov	r3, r5
 8008548:	f7f8 f85e 	bl	8000608 <__aeabi_dmul>
 800854c:	a336      	add	r3, pc, #216	@ (adr r3, 8008628 <__kernel_cos+0x160>)
 800854e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008552:	f7f7 fea1 	bl	8000298 <__aeabi_dsub>
 8008556:	4622      	mov	r2, r4
 8008558:	462b      	mov	r3, r5
 800855a:	f7f8 f855 	bl	8000608 <__aeabi_dmul>
 800855e:	a334      	add	r3, pc, #208	@ (adr r3, 8008630 <__kernel_cos+0x168>)
 8008560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008564:	f7f7 fe9a 	bl	800029c <__adddf3>
 8008568:	4622      	mov	r2, r4
 800856a:	462b      	mov	r3, r5
 800856c:	f7f8 f84c 	bl	8000608 <__aeabi_dmul>
 8008570:	4622      	mov	r2, r4
 8008572:	462b      	mov	r3, r5
 8008574:	f7f8 f848 	bl	8000608 <__aeabi_dmul>
 8008578:	e9dd 2300 	ldrd	r2, r3, [sp]
 800857c:	4604      	mov	r4, r0
 800857e:	460d      	mov	r5, r1
 8008580:	4630      	mov	r0, r6
 8008582:	4639      	mov	r1, r7
 8008584:	f7f8 f840 	bl	8000608 <__aeabi_dmul>
 8008588:	460b      	mov	r3, r1
 800858a:	4602      	mov	r2, r0
 800858c:	4629      	mov	r1, r5
 800858e:	4620      	mov	r0, r4
 8008590:	f7f7 fe82 	bl	8000298 <__aeabi_dsub>
 8008594:	4b2b      	ldr	r3, [pc, #172]	@ (8008644 <__kernel_cos+0x17c>)
 8008596:	4598      	cmp	r8, r3
 8008598:	4606      	mov	r6, r0
 800859a:	460f      	mov	r7, r1
 800859c:	d810      	bhi.n	80085c0 <__kernel_cos+0xf8>
 800859e:	4602      	mov	r2, r0
 80085a0:	460b      	mov	r3, r1
 80085a2:	4650      	mov	r0, sl
 80085a4:	4659      	mov	r1, fp
 80085a6:	f7f7 fe77 	bl	8000298 <__aeabi_dsub>
 80085aa:	460b      	mov	r3, r1
 80085ac:	4926      	ldr	r1, [pc, #152]	@ (8008648 <__kernel_cos+0x180>)
 80085ae:	4602      	mov	r2, r0
 80085b0:	2000      	movs	r0, #0
 80085b2:	f7f7 fe71 	bl	8000298 <__aeabi_dsub>
 80085b6:	ec41 0b10 	vmov	d0, r0, r1
 80085ba:	b003      	add	sp, #12
 80085bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c0:	4b22      	ldr	r3, [pc, #136]	@ (800864c <__kernel_cos+0x184>)
 80085c2:	4921      	ldr	r1, [pc, #132]	@ (8008648 <__kernel_cos+0x180>)
 80085c4:	4598      	cmp	r8, r3
 80085c6:	bf8c      	ite	hi
 80085c8:	4d21      	ldrhi	r5, [pc, #132]	@ (8008650 <__kernel_cos+0x188>)
 80085ca:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80085ce:	2400      	movs	r4, #0
 80085d0:	4622      	mov	r2, r4
 80085d2:	462b      	mov	r3, r5
 80085d4:	2000      	movs	r0, #0
 80085d6:	f7f7 fe5f 	bl	8000298 <__aeabi_dsub>
 80085da:	4622      	mov	r2, r4
 80085dc:	4680      	mov	r8, r0
 80085de:	4689      	mov	r9, r1
 80085e0:	462b      	mov	r3, r5
 80085e2:	4650      	mov	r0, sl
 80085e4:	4659      	mov	r1, fp
 80085e6:	f7f7 fe57 	bl	8000298 <__aeabi_dsub>
 80085ea:	4632      	mov	r2, r6
 80085ec:	463b      	mov	r3, r7
 80085ee:	f7f7 fe53 	bl	8000298 <__aeabi_dsub>
 80085f2:	4602      	mov	r2, r0
 80085f4:	460b      	mov	r3, r1
 80085f6:	4640      	mov	r0, r8
 80085f8:	4649      	mov	r1, r9
 80085fa:	e7da      	b.n	80085b2 <__kernel_cos+0xea>
 80085fc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8008638 <__kernel_cos+0x170>
 8008600:	e7db      	b.n	80085ba <__kernel_cos+0xf2>
 8008602:	bf00      	nop
 8008604:	f3af 8000 	nop.w
 8008608:	be8838d4 	.word	0xbe8838d4
 800860c:	bda8fae9 	.word	0xbda8fae9
 8008610:	bdb4b1c4 	.word	0xbdb4b1c4
 8008614:	3e21ee9e 	.word	0x3e21ee9e
 8008618:	809c52ad 	.word	0x809c52ad
 800861c:	3e927e4f 	.word	0x3e927e4f
 8008620:	19cb1590 	.word	0x19cb1590
 8008624:	3efa01a0 	.word	0x3efa01a0
 8008628:	16c15177 	.word	0x16c15177
 800862c:	3f56c16c 	.word	0x3f56c16c
 8008630:	5555554c 	.word	0x5555554c
 8008634:	3fa55555 	.word	0x3fa55555
 8008638:	00000000 	.word	0x00000000
 800863c:	3ff00000 	.word	0x3ff00000
 8008640:	3fe00000 	.word	0x3fe00000
 8008644:	3fd33332 	.word	0x3fd33332
 8008648:	3ff00000 	.word	0x3ff00000
 800864c:	3fe90000 	.word	0x3fe90000
 8008650:	3fd20000 	.word	0x3fd20000
 8008654:	00000000 	.word	0x00000000

08008658 <__kernel_sin>:
 8008658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865c:	ec55 4b10 	vmov	r4, r5, d0
 8008660:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008664:	b085      	sub	sp, #20
 8008666:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800866a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800866e:	4680      	mov	r8, r0
 8008670:	d205      	bcs.n	800867e <__kernel_sin+0x26>
 8008672:	4620      	mov	r0, r4
 8008674:	4629      	mov	r1, r5
 8008676:	f7f8 fa61 	bl	8000b3c <__aeabi_d2iz>
 800867a:	2800      	cmp	r0, #0
 800867c:	d052      	beq.n	8008724 <__kernel_sin+0xcc>
 800867e:	4622      	mov	r2, r4
 8008680:	462b      	mov	r3, r5
 8008682:	4620      	mov	r0, r4
 8008684:	4629      	mov	r1, r5
 8008686:	f7f7 ffbf 	bl	8000608 <__aeabi_dmul>
 800868a:	4682      	mov	sl, r0
 800868c:	468b      	mov	fp, r1
 800868e:	4602      	mov	r2, r0
 8008690:	460b      	mov	r3, r1
 8008692:	4620      	mov	r0, r4
 8008694:	4629      	mov	r1, r5
 8008696:	f7f7 ffb7 	bl	8000608 <__aeabi_dmul>
 800869a:	a342      	add	r3, pc, #264	@ (adr r3, 80087a4 <__kernel_sin+0x14c>)
 800869c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a0:	e9cd 0100 	strd	r0, r1, [sp]
 80086a4:	4650      	mov	r0, sl
 80086a6:	4659      	mov	r1, fp
 80086a8:	f7f7 ffae 	bl	8000608 <__aeabi_dmul>
 80086ac:	a33f      	add	r3, pc, #252	@ (adr r3, 80087ac <__kernel_sin+0x154>)
 80086ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b2:	f7f7 fdf1 	bl	8000298 <__aeabi_dsub>
 80086b6:	4652      	mov	r2, sl
 80086b8:	465b      	mov	r3, fp
 80086ba:	f7f7 ffa5 	bl	8000608 <__aeabi_dmul>
 80086be:	a33d      	add	r3, pc, #244	@ (adr r3, 80087b4 <__kernel_sin+0x15c>)
 80086c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c4:	f7f7 fdea 	bl	800029c <__adddf3>
 80086c8:	4652      	mov	r2, sl
 80086ca:	465b      	mov	r3, fp
 80086cc:	f7f7 ff9c 	bl	8000608 <__aeabi_dmul>
 80086d0:	a33a      	add	r3, pc, #232	@ (adr r3, 80087bc <__kernel_sin+0x164>)
 80086d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d6:	f7f7 fddf 	bl	8000298 <__aeabi_dsub>
 80086da:	4652      	mov	r2, sl
 80086dc:	465b      	mov	r3, fp
 80086de:	f7f7 ff93 	bl	8000608 <__aeabi_dmul>
 80086e2:	a338      	add	r3, pc, #224	@ (adr r3, 80087c4 <__kernel_sin+0x16c>)
 80086e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e8:	f7f7 fdd8 	bl	800029c <__adddf3>
 80086ec:	4606      	mov	r6, r0
 80086ee:	460f      	mov	r7, r1
 80086f0:	f1b8 0f00 	cmp.w	r8, #0
 80086f4:	d11b      	bne.n	800872e <__kernel_sin+0xd6>
 80086f6:	4602      	mov	r2, r0
 80086f8:	460b      	mov	r3, r1
 80086fa:	4650      	mov	r0, sl
 80086fc:	4659      	mov	r1, fp
 80086fe:	f7f7 ff83 	bl	8000608 <__aeabi_dmul>
 8008702:	a325      	add	r3, pc, #148	@ (adr r3, 8008798 <__kernel_sin+0x140>)
 8008704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008708:	f7f7 fdc6 	bl	8000298 <__aeabi_dsub>
 800870c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008710:	f7f7 ff7a 	bl	8000608 <__aeabi_dmul>
 8008714:	4602      	mov	r2, r0
 8008716:	460b      	mov	r3, r1
 8008718:	4620      	mov	r0, r4
 800871a:	4629      	mov	r1, r5
 800871c:	f7f7 fdbe 	bl	800029c <__adddf3>
 8008720:	4604      	mov	r4, r0
 8008722:	460d      	mov	r5, r1
 8008724:	ec45 4b10 	vmov	d0, r4, r5
 8008728:	b005      	add	sp, #20
 800872a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800872e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008732:	4b1b      	ldr	r3, [pc, #108]	@ (80087a0 <__kernel_sin+0x148>)
 8008734:	2200      	movs	r2, #0
 8008736:	f7f7 ff67 	bl	8000608 <__aeabi_dmul>
 800873a:	4632      	mov	r2, r6
 800873c:	4680      	mov	r8, r0
 800873e:	4689      	mov	r9, r1
 8008740:	463b      	mov	r3, r7
 8008742:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008746:	f7f7 ff5f 	bl	8000608 <__aeabi_dmul>
 800874a:	4602      	mov	r2, r0
 800874c:	460b      	mov	r3, r1
 800874e:	4640      	mov	r0, r8
 8008750:	4649      	mov	r1, r9
 8008752:	f7f7 fda1 	bl	8000298 <__aeabi_dsub>
 8008756:	4652      	mov	r2, sl
 8008758:	465b      	mov	r3, fp
 800875a:	f7f7 ff55 	bl	8000608 <__aeabi_dmul>
 800875e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008762:	f7f7 fd99 	bl	8000298 <__aeabi_dsub>
 8008766:	a30c      	add	r3, pc, #48	@ (adr r3, 8008798 <__kernel_sin+0x140>)
 8008768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876c:	4606      	mov	r6, r0
 800876e:	460f      	mov	r7, r1
 8008770:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008774:	f7f7 ff48 	bl	8000608 <__aeabi_dmul>
 8008778:	4602      	mov	r2, r0
 800877a:	460b      	mov	r3, r1
 800877c:	4630      	mov	r0, r6
 800877e:	4639      	mov	r1, r7
 8008780:	f7f7 fd8c 	bl	800029c <__adddf3>
 8008784:	4602      	mov	r2, r0
 8008786:	460b      	mov	r3, r1
 8008788:	4620      	mov	r0, r4
 800878a:	4629      	mov	r1, r5
 800878c:	f7f7 fd84 	bl	8000298 <__aeabi_dsub>
 8008790:	e7c6      	b.n	8008720 <__kernel_sin+0xc8>
 8008792:	bf00      	nop
 8008794:	f3af 8000 	nop.w
 8008798:	55555549 	.word	0x55555549
 800879c:	3fc55555 	.word	0x3fc55555
 80087a0:	3fe00000 	.word	0x3fe00000
 80087a4:	5acfd57c 	.word	0x5acfd57c
 80087a8:	3de5d93a 	.word	0x3de5d93a
 80087ac:	8a2b9ceb 	.word	0x8a2b9ceb
 80087b0:	3e5ae5e6 	.word	0x3e5ae5e6
 80087b4:	57b1fe7d 	.word	0x57b1fe7d
 80087b8:	3ec71de3 	.word	0x3ec71de3
 80087bc:	19c161d5 	.word	0x19c161d5
 80087c0:	3f2a01a0 	.word	0x3f2a01a0
 80087c4:	1110f8a6 	.word	0x1110f8a6
 80087c8:	3f811111 	.word	0x3f811111
 80087cc:	00000000 	.word	0x00000000

080087d0 <__ieee754_atan2>:
 80087d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087d4:	ec57 6b11 	vmov	r6, r7, d1
 80087d8:	4273      	negs	r3, r6
 80087da:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8008958 <__ieee754_atan2+0x188>
 80087de:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80087e2:	4333      	orrs	r3, r6
 80087e4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80087e8:	4543      	cmp	r3, r8
 80087ea:	ec51 0b10 	vmov	r0, r1, d0
 80087ee:	4635      	mov	r5, r6
 80087f0:	d809      	bhi.n	8008806 <__ieee754_atan2+0x36>
 80087f2:	4244      	negs	r4, r0
 80087f4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80087f8:	4304      	orrs	r4, r0
 80087fa:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80087fe:	4544      	cmp	r4, r8
 8008800:	468e      	mov	lr, r1
 8008802:	4681      	mov	r9, r0
 8008804:	d907      	bls.n	8008816 <__ieee754_atan2+0x46>
 8008806:	4632      	mov	r2, r6
 8008808:	463b      	mov	r3, r7
 800880a:	f7f7 fd47 	bl	800029c <__adddf3>
 800880e:	ec41 0b10 	vmov	d0, r0, r1
 8008812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008816:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800881a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800881e:	4334      	orrs	r4, r6
 8008820:	d103      	bne.n	800882a <__ieee754_atan2+0x5a>
 8008822:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008826:	f000 ba97 	b.w	8008d58 <atan>
 800882a:	17bc      	asrs	r4, r7, #30
 800882c:	f004 0402 	and.w	r4, r4, #2
 8008830:	ea53 0909 	orrs.w	r9, r3, r9
 8008834:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008838:	d107      	bne.n	800884a <__ieee754_atan2+0x7a>
 800883a:	2c02      	cmp	r4, #2
 800883c:	d05f      	beq.n	80088fe <__ieee754_atan2+0x12e>
 800883e:	2c03      	cmp	r4, #3
 8008840:	d1e5      	bne.n	800880e <__ieee754_atan2+0x3e>
 8008842:	a141      	add	r1, pc, #260	@ (adr r1, 8008948 <__ieee754_atan2+0x178>)
 8008844:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008848:	e7e1      	b.n	800880e <__ieee754_atan2+0x3e>
 800884a:	4315      	orrs	r5, r2
 800884c:	d106      	bne.n	800885c <__ieee754_atan2+0x8c>
 800884e:	f1be 0f00 	cmp.w	lr, #0
 8008852:	da5f      	bge.n	8008914 <__ieee754_atan2+0x144>
 8008854:	a13e      	add	r1, pc, #248	@ (adr r1, 8008950 <__ieee754_atan2+0x180>)
 8008856:	e9d1 0100 	ldrd	r0, r1, [r1]
 800885a:	e7d8      	b.n	800880e <__ieee754_atan2+0x3e>
 800885c:	4542      	cmp	r2, r8
 800885e:	d10f      	bne.n	8008880 <__ieee754_atan2+0xb0>
 8008860:	4293      	cmp	r3, r2
 8008862:	f104 34ff 	add.w	r4, r4, #4294967295
 8008866:	d107      	bne.n	8008878 <__ieee754_atan2+0xa8>
 8008868:	2c02      	cmp	r4, #2
 800886a:	d84c      	bhi.n	8008906 <__ieee754_atan2+0x136>
 800886c:	4b34      	ldr	r3, [pc, #208]	@ (8008940 <__ieee754_atan2+0x170>)
 800886e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008872:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008876:	e7ca      	b.n	800880e <__ieee754_atan2+0x3e>
 8008878:	2c02      	cmp	r4, #2
 800887a:	d848      	bhi.n	800890e <__ieee754_atan2+0x13e>
 800887c:	4b31      	ldr	r3, [pc, #196]	@ (8008944 <__ieee754_atan2+0x174>)
 800887e:	e7f6      	b.n	800886e <__ieee754_atan2+0x9e>
 8008880:	4543      	cmp	r3, r8
 8008882:	d0e4      	beq.n	800884e <__ieee754_atan2+0x7e>
 8008884:	1a9b      	subs	r3, r3, r2
 8008886:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800888a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800888e:	da1e      	bge.n	80088ce <__ieee754_atan2+0xfe>
 8008890:	2f00      	cmp	r7, #0
 8008892:	da01      	bge.n	8008898 <__ieee754_atan2+0xc8>
 8008894:	323c      	adds	r2, #60	@ 0x3c
 8008896:	db1e      	blt.n	80088d6 <__ieee754_atan2+0x106>
 8008898:	4632      	mov	r2, r6
 800889a:	463b      	mov	r3, r7
 800889c:	f7f7 ffde 	bl	800085c <__aeabi_ddiv>
 80088a0:	ec41 0b10 	vmov	d0, r0, r1
 80088a4:	f000 fbf0 	bl	8009088 <fabs>
 80088a8:	f000 fa56 	bl	8008d58 <atan>
 80088ac:	ec51 0b10 	vmov	r0, r1, d0
 80088b0:	2c01      	cmp	r4, #1
 80088b2:	d013      	beq.n	80088dc <__ieee754_atan2+0x10c>
 80088b4:	2c02      	cmp	r4, #2
 80088b6:	d015      	beq.n	80088e4 <__ieee754_atan2+0x114>
 80088b8:	2c00      	cmp	r4, #0
 80088ba:	d0a8      	beq.n	800880e <__ieee754_atan2+0x3e>
 80088bc:	a318      	add	r3, pc, #96	@ (adr r3, 8008920 <__ieee754_atan2+0x150>)
 80088be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c2:	f7f7 fce9 	bl	8000298 <__aeabi_dsub>
 80088c6:	a318      	add	r3, pc, #96	@ (adr r3, 8008928 <__ieee754_atan2+0x158>)
 80088c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088cc:	e014      	b.n	80088f8 <__ieee754_atan2+0x128>
 80088ce:	a118      	add	r1, pc, #96	@ (adr r1, 8008930 <__ieee754_atan2+0x160>)
 80088d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088d4:	e7ec      	b.n	80088b0 <__ieee754_atan2+0xe0>
 80088d6:	2000      	movs	r0, #0
 80088d8:	2100      	movs	r1, #0
 80088da:	e7e9      	b.n	80088b0 <__ieee754_atan2+0xe0>
 80088dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80088e0:	4619      	mov	r1, r3
 80088e2:	e794      	b.n	800880e <__ieee754_atan2+0x3e>
 80088e4:	a30e      	add	r3, pc, #56	@ (adr r3, 8008920 <__ieee754_atan2+0x150>)
 80088e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ea:	f7f7 fcd5 	bl	8000298 <__aeabi_dsub>
 80088ee:	4602      	mov	r2, r0
 80088f0:	460b      	mov	r3, r1
 80088f2:	a10d      	add	r1, pc, #52	@ (adr r1, 8008928 <__ieee754_atan2+0x158>)
 80088f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088f8:	f7f7 fcce 	bl	8000298 <__aeabi_dsub>
 80088fc:	e787      	b.n	800880e <__ieee754_atan2+0x3e>
 80088fe:	a10a      	add	r1, pc, #40	@ (adr r1, 8008928 <__ieee754_atan2+0x158>)
 8008900:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008904:	e783      	b.n	800880e <__ieee754_atan2+0x3e>
 8008906:	a10c      	add	r1, pc, #48	@ (adr r1, 8008938 <__ieee754_atan2+0x168>)
 8008908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800890c:	e77f      	b.n	800880e <__ieee754_atan2+0x3e>
 800890e:	2000      	movs	r0, #0
 8008910:	2100      	movs	r1, #0
 8008912:	e77c      	b.n	800880e <__ieee754_atan2+0x3e>
 8008914:	a106      	add	r1, pc, #24	@ (adr r1, 8008930 <__ieee754_atan2+0x160>)
 8008916:	e9d1 0100 	ldrd	r0, r1, [r1]
 800891a:	e778      	b.n	800880e <__ieee754_atan2+0x3e>
 800891c:	f3af 8000 	nop.w
 8008920:	33145c07 	.word	0x33145c07
 8008924:	3ca1a626 	.word	0x3ca1a626
 8008928:	54442d18 	.word	0x54442d18
 800892c:	400921fb 	.word	0x400921fb
 8008930:	54442d18 	.word	0x54442d18
 8008934:	3ff921fb 	.word	0x3ff921fb
 8008938:	54442d18 	.word	0x54442d18
 800893c:	3fe921fb 	.word	0x3fe921fb
 8008940:	0800b110 	.word	0x0800b110
 8008944:	0800b0f8 	.word	0x0800b0f8
 8008948:	54442d18 	.word	0x54442d18
 800894c:	c00921fb 	.word	0xc00921fb
 8008950:	54442d18 	.word	0x54442d18
 8008954:	bff921fb 	.word	0xbff921fb
 8008958:	7ff00000 	.word	0x7ff00000
 800895c:	00000000 	.word	0x00000000

08008960 <__ieee754_rem_pio2>:
 8008960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008964:	ec57 6b10 	vmov	r6, r7, d0
 8008968:	4bc5      	ldr	r3, [pc, #788]	@ (8008c80 <__ieee754_rem_pio2+0x320>)
 800896a:	b08d      	sub	sp, #52	@ 0x34
 800896c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008970:	4598      	cmp	r8, r3
 8008972:	4604      	mov	r4, r0
 8008974:	9704      	str	r7, [sp, #16]
 8008976:	d807      	bhi.n	8008988 <__ieee754_rem_pio2+0x28>
 8008978:	2200      	movs	r2, #0
 800897a:	2300      	movs	r3, #0
 800897c:	ed80 0b00 	vstr	d0, [r0]
 8008980:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008984:	2500      	movs	r5, #0
 8008986:	e028      	b.n	80089da <__ieee754_rem_pio2+0x7a>
 8008988:	4bbe      	ldr	r3, [pc, #760]	@ (8008c84 <__ieee754_rem_pio2+0x324>)
 800898a:	4598      	cmp	r8, r3
 800898c:	d878      	bhi.n	8008a80 <__ieee754_rem_pio2+0x120>
 800898e:	9b04      	ldr	r3, [sp, #16]
 8008990:	4dbd      	ldr	r5, [pc, #756]	@ (8008c88 <__ieee754_rem_pio2+0x328>)
 8008992:	2b00      	cmp	r3, #0
 8008994:	4630      	mov	r0, r6
 8008996:	a3ac      	add	r3, pc, #688	@ (adr r3, 8008c48 <__ieee754_rem_pio2+0x2e8>)
 8008998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899c:	4639      	mov	r1, r7
 800899e:	dd38      	ble.n	8008a12 <__ieee754_rem_pio2+0xb2>
 80089a0:	f7f7 fc7a 	bl	8000298 <__aeabi_dsub>
 80089a4:	45a8      	cmp	r8, r5
 80089a6:	4606      	mov	r6, r0
 80089a8:	460f      	mov	r7, r1
 80089aa:	d01a      	beq.n	80089e2 <__ieee754_rem_pio2+0x82>
 80089ac:	a3a8      	add	r3, pc, #672	@ (adr r3, 8008c50 <__ieee754_rem_pio2+0x2f0>)
 80089ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b2:	f7f7 fc71 	bl	8000298 <__aeabi_dsub>
 80089b6:	4602      	mov	r2, r0
 80089b8:	460b      	mov	r3, r1
 80089ba:	4680      	mov	r8, r0
 80089bc:	4689      	mov	r9, r1
 80089be:	4630      	mov	r0, r6
 80089c0:	4639      	mov	r1, r7
 80089c2:	f7f7 fc69 	bl	8000298 <__aeabi_dsub>
 80089c6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8008c50 <__ieee754_rem_pio2+0x2f0>)
 80089c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089cc:	f7f7 fc64 	bl	8000298 <__aeabi_dsub>
 80089d0:	e9c4 8900 	strd	r8, r9, [r4]
 80089d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80089d8:	2501      	movs	r5, #1
 80089da:	4628      	mov	r0, r5
 80089dc:	b00d      	add	sp, #52	@ 0x34
 80089de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e2:	a39d      	add	r3, pc, #628	@ (adr r3, 8008c58 <__ieee754_rem_pio2+0x2f8>)
 80089e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e8:	f7f7 fc56 	bl	8000298 <__aeabi_dsub>
 80089ec:	a39c      	add	r3, pc, #624	@ (adr r3, 8008c60 <__ieee754_rem_pio2+0x300>)
 80089ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f2:	4606      	mov	r6, r0
 80089f4:	460f      	mov	r7, r1
 80089f6:	f7f7 fc4f 	bl	8000298 <__aeabi_dsub>
 80089fa:	4602      	mov	r2, r0
 80089fc:	460b      	mov	r3, r1
 80089fe:	4680      	mov	r8, r0
 8008a00:	4689      	mov	r9, r1
 8008a02:	4630      	mov	r0, r6
 8008a04:	4639      	mov	r1, r7
 8008a06:	f7f7 fc47 	bl	8000298 <__aeabi_dsub>
 8008a0a:	a395      	add	r3, pc, #596	@ (adr r3, 8008c60 <__ieee754_rem_pio2+0x300>)
 8008a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a10:	e7dc      	b.n	80089cc <__ieee754_rem_pio2+0x6c>
 8008a12:	f7f7 fc43 	bl	800029c <__adddf3>
 8008a16:	45a8      	cmp	r8, r5
 8008a18:	4606      	mov	r6, r0
 8008a1a:	460f      	mov	r7, r1
 8008a1c:	d018      	beq.n	8008a50 <__ieee754_rem_pio2+0xf0>
 8008a1e:	a38c      	add	r3, pc, #560	@ (adr r3, 8008c50 <__ieee754_rem_pio2+0x2f0>)
 8008a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a24:	f7f7 fc3a 	bl	800029c <__adddf3>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	4680      	mov	r8, r0
 8008a2e:	4689      	mov	r9, r1
 8008a30:	4630      	mov	r0, r6
 8008a32:	4639      	mov	r1, r7
 8008a34:	f7f7 fc30 	bl	8000298 <__aeabi_dsub>
 8008a38:	a385      	add	r3, pc, #532	@ (adr r3, 8008c50 <__ieee754_rem_pio2+0x2f0>)
 8008a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3e:	f7f7 fc2d 	bl	800029c <__adddf3>
 8008a42:	f04f 35ff 	mov.w	r5, #4294967295
 8008a46:	e9c4 8900 	strd	r8, r9, [r4]
 8008a4a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008a4e:	e7c4      	b.n	80089da <__ieee754_rem_pio2+0x7a>
 8008a50:	a381      	add	r3, pc, #516	@ (adr r3, 8008c58 <__ieee754_rem_pio2+0x2f8>)
 8008a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a56:	f7f7 fc21 	bl	800029c <__adddf3>
 8008a5a:	a381      	add	r3, pc, #516	@ (adr r3, 8008c60 <__ieee754_rem_pio2+0x300>)
 8008a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a60:	4606      	mov	r6, r0
 8008a62:	460f      	mov	r7, r1
 8008a64:	f7f7 fc1a 	bl	800029c <__adddf3>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	4680      	mov	r8, r0
 8008a6e:	4689      	mov	r9, r1
 8008a70:	4630      	mov	r0, r6
 8008a72:	4639      	mov	r1, r7
 8008a74:	f7f7 fc10 	bl	8000298 <__aeabi_dsub>
 8008a78:	a379      	add	r3, pc, #484	@ (adr r3, 8008c60 <__ieee754_rem_pio2+0x300>)
 8008a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7e:	e7de      	b.n	8008a3e <__ieee754_rem_pio2+0xde>
 8008a80:	4b82      	ldr	r3, [pc, #520]	@ (8008c8c <__ieee754_rem_pio2+0x32c>)
 8008a82:	4598      	cmp	r8, r3
 8008a84:	f200 80d1 	bhi.w	8008c2a <__ieee754_rem_pio2+0x2ca>
 8008a88:	f000 fafe 	bl	8009088 <fabs>
 8008a8c:	ec57 6b10 	vmov	r6, r7, d0
 8008a90:	a375      	add	r3, pc, #468	@ (adr r3, 8008c68 <__ieee754_rem_pio2+0x308>)
 8008a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a96:	4630      	mov	r0, r6
 8008a98:	4639      	mov	r1, r7
 8008a9a:	f7f7 fdb5 	bl	8000608 <__aeabi_dmul>
 8008a9e:	4b7c      	ldr	r3, [pc, #496]	@ (8008c90 <__ieee754_rem_pio2+0x330>)
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f7f7 fbfb 	bl	800029c <__adddf3>
 8008aa6:	f7f8 f849 	bl	8000b3c <__aeabi_d2iz>
 8008aaa:	4605      	mov	r5, r0
 8008aac:	f7f7 fd42 	bl	8000534 <__aeabi_i2d>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ab8:	a363      	add	r3, pc, #396	@ (adr r3, 8008c48 <__ieee754_rem_pio2+0x2e8>)
 8008aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abe:	f7f7 fda3 	bl	8000608 <__aeabi_dmul>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	4639      	mov	r1, r7
 8008aca:	f7f7 fbe5 	bl	8000298 <__aeabi_dsub>
 8008ace:	a360      	add	r3, pc, #384	@ (adr r3, 8008c50 <__ieee754_rem_pio2+0x2f0>)
 8008ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad4:	4682      	mov	sl, r0
 8008ad6:	468b      	mov	fp, r1
 8008ad8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008adc:	f7f7 fd94 	bl	8000608 <__aeabi_dmul>
 8008ae0:	2d1f      	cmp	r5, #31
 8008ae2:	4606      	mov	r6, r0
 8008ae4:	460f      	mov	r7, r1
 8008ae6:	dc0c      	bgt.n	8008b02 <__ieee754_rem_pio2+0x1a2>
 8008ae8:	4b6a      	ldr	r3, [pc, #424]	@ (8008c94 <__ieee754_rem_pio2+0x334>)
 8008aea:	1e6a      	subs	r2, r5, #1
 8008aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008af0:	4543      	cmp	r3, r8
 8008af2:	d006      	beq.n	8008b02 <__ieee754_rem_pio2+0x1a2>
 8008af4:	4632      	mov	r2, r6
 8008af6:	463b      	mov	r3, r7
 8008af8:	4650      	mov	r0, sl
 8008afa:	4659      	mov	r1, fp
 8008afc:	f7f7 fbcc 	bl	8000298 <__aeabi_dsub>
 8008b00:	e00e      	b.n	8008b20 <__ieee754_rem_pio2+0x1c0>
 8008b02:	463b      	mov	r3, r7
 8008b04:	4632      	mov	r2, r6
 8008b06:	4650      	mov	r0, sl
 8008b08:	4659      	mov	r1, fp
 8008b0a:	f7f7 fbc5 	bl	8000298 <__aeabi_dsub>
 8008b0e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008b12:	9305      	str	r3, [sp, #20]
 8008b14:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008b18:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8008b1c:	2b10      	cmp	r3, #16
 8008b1e:	dc02      	bgt.n	8008b26 <__ieee754_rem_pio2+0x1c6>
 8008b20:	e9c4 0100 	strd	r0, r1, [r4]
 8008b24:	e039      	b.n	8008b9a <__ieee754_rem_pio2+0x23a>
 8008b26:	a34c      	add	r3, pc, #304	@ (adr r3, 8008c58 <__ieee754_rem_pio2+0x2f8>)
 8008b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b30:	f7f7 fd6a 	bl	8000608 <__aeabi_dmul>
 8008b34:	4606      	mov	r6, r0
 8008b36:	460f      	mov	r7, r1
 8008b38:	4602      	mov	r2, r0
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	4650      	mov	r0, sl
 8008b3e:	4659      	mov	r1, fp
 8008b40:	f7f7 fbaa 	bl	8000298 <__aeabi_dsub>
 8008b44:	4602      	mov	r2, r0
 8008b46:	460b      	mov	r3, r1
 8008b48:	4680      	mov	r8, r0
 8008b4a:	4689      	mov	r9, r1
 8008b4c:	4650      	mov	r0, sl
 8008b4e:	4659      	mov	r1, fp
 8008b50:	f7f7 fba2 	bl	8000298 <__aeabi_dsub>
 8008b54:	4632      	mov	r2, r6
 8008b56:	463b      	mov	r3, r7
 8008b58:	f7f7 fb9e 	bl	8000298 <__aeabi_dsub>
 8008b5c:	a340      	add	r3, pc, #256	@ (adr r3, 8008c60 <__ieee754_rem_pio2+0x300>)
 8008b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b62:	4606      	mov	r6, r0
 8008b64:	460f      	mov	r7, r1
 8008b66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b6a:	f7f7 fd4d 	bl	8000608 <__aeabi_dmul>
 8008b6e:	4632      	mov	r2, r6
 8008b70:	463b      	mov	r3, r7
 8008b72:	f7f7 fb91 	bl	8000298 <__aeabi_dsub>
 8008b76:	4602      	mov	r2, r0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	4606      	mov	r6, r0
 8008b7c:	460f      	mov	r7, r1
 8008b7e:	4640      	mov	r0, r8
 8008b80:	4649      	mov	r1, r9
 8008b82:	f7f7 fb89 	bl	8000298 <__aeabi_dsub>
 8008b86:	9a05      	ldr	r2, [sp, #20]
 8008b88:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008b8c:	1ad3      	subs	r3, r2, r3
 8008b8e:	2b31      	cmp	r3, #49	@ 0x31
 8008b90:	dc20      	bgt.n	8008bd4 <__ieee754_rem_pio2+0x274>
 8008b92:	e9c4 0100 	strd	r0, r1, [r4]
 8008b96:	46c2      	mov	sl, r8
 8008b98:	46cb      	mov	fp, r9
 8008b9a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008b9e:	4650      	mov	r0, sl
 8008ba0:	4642      	mov	r2, r8
 8008ba2:	464b      	mov	r3, r9
 8008ba4:	4659      	mov	r1, fp
 8008ba6:	f7f7 fb77 	bl	8000298 <__aeabi_dsub>
 8008baa:	463b      	mov	r3, r7
 8008bac:	4632      	mov	r2, r6
 8008bae:	f7f7 fb73 	bl	8000298 <__aeabi_dsub>
 8008bb2:	9b04      	ldr	r3, [sp, #16]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008bba:	f6bf af0e 	bge.w	80089da <__ieee754_rem_pio2+0x7a>
 8008bbe:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8008bc2:	6063      	str	r3, [r4, #4]
 8008bc4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008bc8:	f8c4 8000 	str.w	r8, [r4]
 8008bcc:	60a0      	str	r0, [r4, #8]
 8008bce:	60e3      	str	r3, [r4, #12]
 8008bd0:	426d      	negs	r5, r5
 8008bd2:	e702      	b.n	80089da <__ieee754_rem_pio2+0x7a>
 8008bd4:	a326      	add	r3, pc, #152	@ (adr r3, 8008c70 <__ieee754_rem_pio2+0x310>)
 8008bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bde:	f7f7 fd13 	bl	8000608 <__aeabi_dmul>
 8008be2:	4606      	mov	r6, r0
 8008be4:	460f      	mov	r7, r1
 8008be6:	4602      	mov	r2, r0
 8008be8:	460b      	mov	r3, r1
 8008bea:	4640      	mov	r0, r8
 8008bec:	4649      	mov	r1, r9
 8008bee:	f7f7 fb53 	bl	8000298 <__aeabi_dsub>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	4682      	mov	sl, r0
 8008bf8:	468b      	mov	fp, r1
 8008bfa:	4640      	mov	r0, r8
 8008bfc:	4649      	mov	r1, r9
 8008bfe:	f7f7 fb4b 	bl	8000298 <__aeabi_dsub>
 8008c02:	4632      	mov	r2, r6
 8008c04:	463b      	mov	r3, r7
 8008c06:	f7f7 fb47 	bl	8000298 <__aeabi_dsub>
 8008c0a:	a31b      	add	r3, pc, #108	@ (adr r3, 8008c78 <__ieee754_rem_pio2+0x318>)
 8008c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c10:	4606      	mov	r6, r0
 8008c12:	460f      	mov	r7, r1
 8008c14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c18:	f7f7 fcf6 	bl	8000608 <__aeabi_dmul>
 8008c1c:	4632      	mov	r2, r6
 8008c1e:	463b      	mov	r3, r7
 8008c20:	f7f7 fb3a 	bl	8000298 <__aeabi_dsub>
 8008c24:	4606      	mov	r6, r0
 8008c26:	460f      	mov	r7, r1
 8008c28:	e764      	b.n	8008af4 <__ieee754_rem_pio2+0x194>
 8008c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8008c98 <__ieee754_rem_pio2+0x338>)
 8008c2c:	4598      	cmp	r8, r3
 8008c2e:	d935      	bls.n	8008c9c <__ieee754_rem_pio2+0x33c>
 8008c30:	4632      	mov	r2, r6
 8008c32:	463b      	mov	r3, r7
 8008c34:	4630      	mov	r0, r6
 8008c36:	4639      	mov	r1, r7
 8008c38:	f7f7 fb2e 	bl	8000298 <__aeabi_dsub>
 8008c3c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008c40:	e9c4 0100 	strd	r0, r1, [r4]
 8008c44:	e69e      	b.n	8008984 <__ieee754_rem_pio2+0x24>
 8008c46:	bf00      	nop
 8008c48:	54400000 	.word	0x54400000
 8008c4c:	3ff921fb 	.word	0x3ff921fb
 8008c50:	1a626331 	.word	0x1a626331
 8008c54:	3dd0b461 	.word	0x3dd0b461
 8008c58:	1a600000 	.word	0x1a600000
 8008c5c:	3dd0b461 	.word	0x3dd0b461
 8008c60:	2e037073 	.word	0x2e037073
 8008c64:	3ba3198a 	.word	0x3ba3198a
 8008c68:	6dc9c883 	.word	0x6dc9c883
 8008c6c:	3fe45f30 	.word	0x3fe45f30
 8008c70:	2e000000 	.word	0x2e000000
 8008c74:	3ba3198a 	.word	0x3ba3198a
 8008c78:	252049c1 	.word	0x252049c1
 8008c7c:	397b839a 	.word	0x397b839a
 8008c80:	3fe921fb 	.word	0x3fe921fb
 8008c84:	4002d97b 	.word	0x4002d97b
 8008c88:	3ff921fb 	.word	0x3ff921fb
 8008c8c:	413921fb 	.word	0x413921fb
 8008c90:	3fe00000 	.word	0x3fe00000
 8008c94:	0800b128 	.word	0x0800b128
 8008c98:	7fefffff 	.word	0x7fefffff
 8008c9c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008ca0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8008ca4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8008ca8:	4630      	mov	r0, r6
 8008caa:	460f      	mov	r7, r1
 8008cac:	f7f7 ff46 	bl	8000b3c <__aeabi_d2iz>
 8008cb0:	f7f7 fc40 	bl	8000534 <__aeabi_i2d>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	4630      	mov	r0, r6
 8008cba:	4639      	mov	r1, r7
 8008cbc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008cc0:	f7f7 faea 	bl	8000298 <__aeabi_dsub>
 8008cc4:	4b22      	ldr	r3, [pc, #136]	@ (8008d50 <__ieee754_rem_pio2+0x3f0>)
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f7f7 fc9e 	bl	8000608 <__aeabi_dmul>
 8008ccc:	460f      	mov	r7, r1
 8008cce:	4606      	mov	r6, r0
 8008cd0:	f7f7 ff34 	bl	8000b3c <__aeabi_d2iz>
 8008cd4:	f7f7 fc2e 	bl	8000534 <__aeabi_i2d>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	460b      	mov	r3, r1
 8008cdc:	4630      	mov	r0, r6
 8008cde:	4639      	mov	r1, r7
 8008ce0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008ce4:	f7f7 fad8 	bl	8000298 <__aeabi_dsub>
 8008ce8:	4b19      	ldr	r3, [pc, #100]	@ (8008d50 <__ieee754_rem_pio2+0x3f0>)
 8008cea:	2200      	movs	r2, #0
 8008cec:	f7f7 fc8c 	bl	8000608 <__aeabi_dmul>
 8008cf0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8008cf4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8008cf8:	f04f 0803 	mov.w	r8, #3
 8008cfc:	2600      	movs	r6, #0
 8008cfe:	2700      	movs	r7, #0
 8008d00:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8008d04:	4632      	mov	r2, r6
 8008d06:	463b      	mov	r3, r7
 8008d08:	46c2      	mov	sl, r8
 8008d0a:	f108 38ff 	add.w	r8, r8, #4294967295
 8008d0e:	f7f7 fee3 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d12:	2800      	cmp	r0, #0
 8008d14:	d1f4      	bne.n	8008d00 <__ieee754_rem_pio2+0x3a0>
 8008d16:	4b0f      	ldr	r3, [pc, #60]	@ (8008d54 <__ieee754_rem_pio2+0x3f4>)
 8008d18:	9301      	str	r3, [sp, #4]
 8008d1a:	2302      	movs	r3, #2
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	462a      	mov	r2, r5
 8008d20:	4653      	mov	r3, sl
 8008d22:	4621      	mov	r1, r4
 8008d24:	a806      	add	r0, sp, #24
 8008d26:	f000 f9b7 	bl	8009098 <__kernel_rem_pio2>
 8008d2a:	9b04      	ldr	r3, [sp, #16]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	4605      	mov	r5, r0
 8008d30:	f6bf ae53 	bge.w	80089da <__ieee754_rem_pio2+0x7a>
 8008d34:	e9d4 2100 	ldrd	r2, r1, [r4]
 8008d38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008d3c:	e9c4 2300 	strd	r2, r3, [r4]
 8008d40:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8008d44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008d48:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008d4c:	e740      	b.n	8008bd0 <__ieee754_rem_pio2+0x270>
 8008d4e:	bf00      	nop
 8008d50:	41700000 	.word	0x41700000
 8008d54:	0800b1a8 	.word	0x0800b1a8

08008d58 <atan>:
 8008d58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d5c:	ec55 4b10 	vmov	r4, r5, d0
 8008d60:	4bbf      	ldr	r3, [pc, #764]	@ (8009060 <atan+0x308>)
 8008d62:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8008d66:	429e      	cmp	r6, r3
 8008d68:	46ab      	mov	fp, r5
 8008d6a:	d918      	bls.n	8008d9e <atan+0x46>
 8008d6c:	4bbd      	ldr	r3, [pc, #756]	@ (8009064 <atan+0x30c>)
 8008d6e:	429e      	cmp	r6, r3
 8008d70:	d801      	bhi.n	8008d76 <atan+0x1e>
 8008d72:	d109      	bne.n	8008d88 <atan+0x30>
 8008d74:	b144      	cbz	r4, 8008d88 <atan+0x30>
 8008d76:	4622      	mov	r2, r4
 8008d78:	462b      	mov	r3, r5
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	4629      	mov	r1, r5
 8008d7e:	f7f7 fa8d 	bl	800029c <__adddf3>
 8008d82:	4604      	mov	r4, r0
 8008d84:	460d      	mov	r5, r1
 8008d86:	e006      	b.n	8008d96 <atan+0x3e>
 8008d88:	f1bb 0f00 	cmp.w	fp, #0
 8008d8c:	f340 812b 	ble.w	8008fe6 <atan+0x28e>
 8008d90:	a597      	add	r5, pc, #604	@ (adr r5, 8008ff0 <atan+0x298>)
 8008d92:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008d96:	ec45 4b10 	vmov	d0, r4, r5
 8008d9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d9e:	4bb2      	ldr	r3, [pc, #712]	@ (8009068 <atan+0x310>)
 8008da0:	429e      	cmp	r6, r3
 8008da2:	d813      	bhi.n	8008dcc <atan+0x74>
 8008da4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8008da8:	429e      	cmp	r6, r3
 8008daa:	d80c      	bhi.n	8008dc6 <atan+0x6e>
 8008dac:	a392      	add	r3, pc, #584	@ (adr r3, 8008ff8 <atan+0x2a0>)
 8008dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db2:	4620      	mov	r0, r4
 8008db4:	4629      	mov	r1, r5
 8008db6:	f7f7 fa71 	bl	800029c <__adddf3>
 8008dba:	4bac      	ldr	r3, [pc, #688]	@ (800906c <atan+0x314>)
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f7f7 feb3 	bl	8000b28 <__aeabi_dcmpgt>
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	d1e7      	bne.n	8008d96 <atan+0x3e>
 8008dc6:	f04f 3aff 	mov.w	sl, #4294967295
 8008dca:	e029      	b.n	8008e20 <atan+0xc8>
 8008dcc:	f000 f95c 	bl	8009088 <fabs>
 8008dd0:	4ba7      	ldr	r3, [pc, #668]	@ (8009070 <atan+0x318>)
 8008dd2:	429e      	cmp	r6, r3
 8008dd4:	ec55 4b10 	vmov	r4, r5, d0
 8008dd8:	f200 80bc 	bhi.w	8008f54 <atan+0x1fc>
 8008ddc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8008de0:	429e      	cmp	r6, r3
 8008de2:	f200 809e 	bhi.w	8008f22 <atan+0x1ca>
 8008de6:	4622      	mov	r2, r4
 8008de8:	462b      	mov	r3, r5
 8008dea:	4620      	mov	r0, r4
 8008dec:	4629      	mov	r1, r5
 8008dee:	f7f7 fa55 	bl	800029c <__adddf3>
 8008df2:	4b9e      	ldr	r3, [pc, #632]	@ (800906c <atan+0x314>)
 8008df4:	2200      	movs	r2, #0
 8008df6:	f7f7 fa4f 	bl	8000298 <__aeabi_dsub>
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	4606      	mov	r6, r0
 8008dfe:	460f      	mov	r7, r1
 8008e00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008e04:	4620      	mov	r0, r4
 8008e06:	4629      	mov	r1, r5
 8008e08:	f7f7 fa48 	bl	800029c <__adddf3>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	460b      	mov	r3, r1
 8008e10:	4630      	mov	r0, r6
 8008e12:	4639      	mov	r1, r7
 8008e14:	f7f7 fd22 	bl	800085c <__aeabi_ddiv>
 8008e18:	f04f 0a00 	mov.w	sl, #0
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	460d      	mov	r5, r1
 8008e20:	4622      	mov	r2, r4
 8008e22:	462b      	mov	r3, r5
 8008e24:	4620      	mov	r0, r4
 8008e26:	4629      	mov	r1, r5
 8008e28:	f7f7 fbee 	bl	8000608 <__aeabi_dmul>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	460b      	mov	r3, r1
 8008e30:	4680      	mov	r8, r0
 8008e32:	4689      	mov	r9, r1
 8008e34:	f7f7 fbe8 	bl	8000608 <__aeabi_dmul>
 8008e38:	a371      	add	r3, pc, #452	@ (adr r3, 8009000 <atan+0x2a8>)
 8008e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3e:	4606      	mov	r6, r0
 8008e40:	460f      	mov	r7, r1
 8008e42:	f7f7 fbe1 	bl	8000608 <__aeabi_dmul>
 8008e46:	a370      	add	r3, pc, #448	@ (adr r3, 8009008 <atan+0x2b0>)
 8008e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4c:	f7f7 fa26 	bl	800029c <__adddf3>
 8008e50:	4632      	mov	r2, r6
 8008e52:	463b      	mov	r3, r7
 8008e54:	f7f7 fbd8 	bl	8000608 <__aeabi_dmul>
 8008e58:	a36d      	add	r3, pc, #436	@ (adr r3, 8009010 <atan+0x2b8>)
 8008e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5e:	f7f7 fa1d 	bl	800029c <__adddf3>
 8008e62:	4632      	mov	r2, r6
 8008e64:	463b      	mov	r3, r7
 8008e66:	f7f7 fbcf 	bl	8000608 <__aeabi_dmul>
 8008e6a:	a36b      	add	r3, pc, #428	@ (adr r3, 8009018 <atan+0x2c0>)
 8008e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e70:	f7f7 fa14 	bl	800029c <__adddf3>
 8008e74:	4632      	mov	r2, r6
 8008e76:	463b      	mov	r3, r7
 8008e78:	f7f7 fbc6 	bl	8000608 <__aeabi_dmul>
 8008e7c:	a368      	add	r3, pc, #416	@ (adr r3, 8009020 <atan+0x2c8>)
 8008e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e82:	f7f7 fa0b 	bl	800029c <__adddf3>
 8008e86:	4632      	mov	r2, r6
 8008e88:	463b      	mov	r3, r7
 8008e8a:	f7f7 fbbd 	bl	8000608 <__aeabi_dmul>
 8008e8e:	a366      	add	r3, pc, #408	@ (adr r3, 8009028 <atan+0x2d0>)
 8008e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e94:	f7f7 fa02 	bl	800029c <__adddf3>
 8008e98:	4642      	mov	r2, r8
 8008e9a:	464b      	mov	r3, r9
 8008e9c:	f7f7 fbb4 	bl	8000608 <__aeabi_dmul>
 8008ea0:	a363      	add	r3, pc, #396	@ (adr r3, 8009030 <atan+0x2d8>)
 8008ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea6:	4680      	mov	r8, r0
 8008ea8:	4689      	mov	r9, r1
 8008eaa:	4630      	mov	r0, r6
 8008eac:	4639      	mov	r1, r7
 8008eae:	f7f7 fbab 	bl	8000608 <__aeabi_dmul>
 8008eb2:	a361      	add	r3, pc, #388	@ (adr r3, 8009038 <atan+0x2e0>)
 8008eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb8:	f7f7 f9ee 	bl	8000298 <__aeabi_dsub>
 8008ebc:	4632      	mov	r2, r6
 8008ebe:	463b      	mov	r3, r7
 8008ec0:	f7f7 fba2 	bl	8000608 <__aeabi_dmul>
 8008ec4:	a35e      	add	r3, pc, #376	@ (adr r3, 8009040 <atan+0x2e8>)
 8008ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eca:	f7f7 f9e5 	bl	8000298 <__aeabi_dsub>
 8008ece:	4632      	mov	r2, r6
 8008ed0:	463b      	mov	r3, r7
 8008ed2:	f7f7 fb99 	bl	8000608 <__aeabi_dmul>
 8008ed6:	a35c      	add	r3, pc, #368	@ (adr r3, 8009048 <atan+0x2f0>)
 8008ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008edc:	f7f7 f9dc 	bl	8000298 <__aeabi_dsub>
 8008ee0:	4632      	mov	r2, r6
 8008ee2:	463b      	mov	r3, r7
 8008ee4:	f7f7 fb90 	bl	8000608 <__aeabi_dmul>
 8008ee8:	a359      	add	r3, pc, #356	@ (adr r3, 8009050 <atan+0x2f8>)
 8008eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eee:	f7f7 f9d3 	bl	8000298 <__aeabi_dsub>
 8008ef2:	4632      	mov	r2, r6
 8008ef4:	463b      	mov	r3, r7
 8008ef6:	f7f7 fb87 	bl	8000608 <__aeabi_dmul>
 8008efa:	4602      	mov	r2, r0
 8008efc:	460b      	mov	r3, r1
 8008efe:	4640      	mov	r0, r8
 8008f00:	4649      	mov	r1, r9
 8008f02:	f7f7 f9cb 	bl	800029c <__adddf3>
 8008f06:	4622      	mov	r2, r4
 8008f08:	462b      	mov	r3, r5
 8008f0a:	f7f7 fb7d 	bl	8000608 <__aeabi_dmul>
 8008f0e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008f12:	4602      	mov	r2, r0
 8008f14:	460b      	mov	r3, r1
 8008f16:	d148      	bne.n	8008faa <atan+0x252>
 8008f18:	4620      	mov	r0, r4
 8008f1a:	4629      	mov	r1, r5
 8008f1c:	f7f7 f9bc 	bl	8000298 <__aeabi_dsub>
 8008f20:	e72f      	b.n	8008d82 <atan+0x2a>
 8008f22:	4b52      	ldr	r3, [pc, #328]	@ (800906c <atan+0x314>)
 8008f24:	2200      	movs	r2, #0
 8008f26:	4620      	mov	r0, r4
 8008f28:	4629      	mov	r1, r5
 8008f2a:	f7f7 f9b5 	bl	8000298 <__aeabi_dsub>
 8008f2e:	4b4f      	ldr	r3, [pc, #316]	@ (800906c <atan+0x314>)
 8008f30:	4606      	mov	r6, r0
 8008f32:	460f      	mov	r7, r1
 8008f34:	2200      	movs	r2, #0
 8008f36:	4620      	mov	r0, r4
 8008f38:	4629      	mov	r1, r5
 8008f3a:	f7f7 f9af 	bl	800029c <__adddf3>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	460b      	mov	r3, r1
 8008f42:	4630      	mov	r0, r6
 8008f44:	4639      	mov	r1, r7
 8008f46:	f7f7 fc89 	bl	800085c <__aeabi_ddiv>
 8008f4a:	f04f 0a01 	mov.w	sl, #1
 8008f4e:	4604      	mov	r4, r0
 8008f50:	460d      	mov	r5, r1
 8008f52:	e765      	b.n	8008e20 <atan+0xc8>
 8008f54:	4b47      	ldr	r3, [pc, #284]	@ (8009074 <atan+0x31c>)
 8008f56:	429e      	cmp	r6, r3
 8008f58:	d21c      	bcs.n	8008f94 <atan+0x23c>
 8008f5a:	4b47      	ldr	r3, [pc, #284]	@ (8009078 <atan+0x320>)
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	4620      	mov	r0, r4
 8008f60:	4629      	mov	r1, r5
 8008f62:	f7f7 f999 	bl	8000298 <__aeabi_dsub>
 8008f66:	4b44      	ldr	r3, [pc, #272]	@ (8009078 <atan+0x320>)
 8008f68:	4606      	mov	r6, r0
 8008f6a:	460f      	mov	r7, r1
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	4620      	mov	r0, r4
 8008f70:	4629      	mov	r1, r5
 8008f72:	f7f7 fb49 	bl	8000608 <__aeabi_dmul>
 8008f76:	4b3d      	ldr	r3, [pc, #244]	@ (800906c <atan+0x314>)
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f7f7 f98f 	bl	800029c <__adddf3>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	460b      	mov	r3, r1
 8008f82:	4630      	mov	r0, r6
 8008f84:	4639      	mov	r1, r7
 8008f86:	f7f7 fc69 	bl	800085c <__aeabi_ddiv>
 8008f8a:	f04f 0a02 	mov.w	sl, #2
 8008f8e:	4604      	mov	r4, r0
 8008f90:	460d      	mov	r5, r1
 8008f92:	e745      	b.n	8008e20 <atan+0xc8>
 8008f94:	4622      	mov	r2, r4
 8008f96:	462b      	mov	r3, r5
 8008f98:	4938      	ldr	r1, [pc, #224]	@ (800907c <atan+0x324>)
 8008f9a:	2000      	movs	r0, #0
 8008f9c:	f7f7 fc5e 	bl	800085c <__aeabi_ddiv>
 8008fa0:	f04f 0a03 	mov.w	sl, #3
 8008fa4:	4604      	mov	r4, r0
 8008fa6:	460d      	mov	r5, r1
 8008fa8:	e73a      	b.n	8008e20 <atan+0xc8>
 8008faa:	4b35      	ldr	r3, [pc, #212]	@ (8009080 <atan+0x328>)
 8008fac:	4e35      	ldr	r6, [pc, #212]	@ (8009084 <atan+0x32c>)
 8008fae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb6:	f7f7 f96f 	bl	8000298 <__aeabi_dsub>
 8008fba:	4622      	mov	r2, r4
 8008fbc:	462b      	mov	r3, r5
 8008fbe:	f7f7 f96b 	bl	8000298 <__aeabi_dsub>
 8008fc2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	460b      	mov	r3, r1
 8008fca:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008fce:	f7f7 f963 	bl	8000298 <__aeabi_dsub>
 8008fd2:	f1bb 0f00 	cmp.w	fp, #0
 8008fd6:	4604      	mov	r4, r0
 8008fd8:	460d      	mov	r5, r1
 8008fda:	f6bf aedc 	bge.w	8008d96 <atan+0x3e>
 8008fde:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008fe2:	461d      	mov	r5, r3
 8008fe4:	e6d7      	b.n	8008d96 <atan+0x3e>
 8008fe6:	a51c      	add	r5, pc, #112	@ (adr r5, 8009058 <atan+0x300>)
 8008fe8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008fec:	e6d3      	b.n	8008d96 <atan+0x3e>
 8008fee:	bf00      	nop
 8008ff0:	54442d18 	.word	0x54442d18
 8008ff4:	3ff921fb 	.word	0x3ff921fb
 8008ff8:	8800759c 	.word	0x8800759c
 8008ffc:	7e37e43c 	.word	0x7e37e43c
 8009000:	e322da11 	.word	0xe322da11
 8009004:	3f90ad3a 	.word	0x3f90ad3a
 8009008:	24760deb 	.word	0x24760deb
 800900c:	3fa97b4b 	.word	0x3fa97b4b
 8009010:	a0d03d51 	.word	0xa0d03d51
 8009014:	3fb10d66 	.word	0x3fb10d66
 8009018:	c54c206e 	.word	0xc54c206e
 800901c:	3fb745cd 	.word	0x3fb745cd
 8009020:	920083ff 	.word	0x920083ff
 8009024:	3fc24924 	.word	0x3fc24924
 8009028:	5555550d 	.word	0x5555550d
 800902c:	3fd55555 	.word	0x3fd55555
 8009030:	2c6a6c2f 	.word	0x2c6a6c2f
 8009034:	bfa2b444 	.word	0xbfa2b444
 8009038:	52defd9a 	.word	0x52defd9a
 800903c:	3fadde2d 	.word	0x3fadde2d
 8009040:	af749a6d 	.word	0xaf749a6d
 8009044:	3fb3b0f2 	.word	0x3fb3b0f2
 8009048:	fe231671 	.word	0xfe231671
 800904c:	3fbc71c6 	.word	0x3fbc71c6
 8009050:	9998ebc4 	.word	0x9998ebc4
 8009054:	3fc99999 	.word	0x3fc99999
 8009058:	54442d18 	.word	0x54442d18
 800905c:	bff921fb 	.word	0xbff921fb
 8009060:	440fffff 	.word	0x440fffff
 8009064:	7ff00000 	.word	0x7ff00000
 8009068:	3fdbffff 	.word	0x3fdbffff
 800906c:	3ff00000 	.word	0x3ff00000
 8009070:	3ff2ffff 	.word	0x3ff2ffff
 8009074:	40038000 	.word	0x40038000
 8009078:	3ff80000 	.word	0x3ff80000
 800907c:	bff00000 	.word	0xbff00000
 8009080:	0800b2b0 	.word	0x0800b2b0
 8009084:	0800b2d0 	.word	0x0800b2d0

08009088 <fabs>:
 8009088:	ec51 0b10 	vmov	r0, r1, d0
 800908c:	4602      	mov	r2, r0
 800908e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009092:	ec43 2b10 	vmov	d0, r2, r3
 8009096:	4770      	bx	lr

08009098 <__kernel_rem_pio2>:
 8009098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800909c:	ed2d 8b02 	vpush	{d8}
 80090a0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80090a4:	f112 0f14 	cmn.w	r2, #20
 80090a8:	9306      	str	r3, [sp, #24]
 80090aa:	9104      	str	r1, [sp, #16]
 80090ac:	4bbe      	ldr	r3, [pc, #760]	@ (80093a8 <__kernel_rem_pio2+0x310>)
 80090ae:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80090b0:	9008      	str	r0, [sp, #32]
 80090b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80090b6:	9300      	str	r3, [sp, #0]
 80090b8:	9b06      	ldr	r3, [sp, #24]
 80090ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80090be:	bfa8      	it	ge
 80090c0:	1ed4      	subge	r4, r2, #3
 80090c2:	9305      	str	r3, [sp, #20]
 80090c4:	bfb2      	itee	lt
 80090c6:	2400      	movlt	r4, #0
 80090c8:	2318      	movge	r3, #24
 80090ca:	fb94 f4f3 	sdivge	r4, r4, r3
 80090ce:	f06f 0317 	mvn.w	r3, #23
 80090d2:	fb04 3303 	mla	r3, r4, r3, r3
 80090d6:	eb03 0b02 	add.w	fp, r3, r2
 80090da:	9b00      	ldr	r3, [sp, #0]
 80090dc:	9a05      	ldr	r2, [sp, #20]
 80090de:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8009398 <__kernel_rem_pio2+0x300>
 80090e2:	eb03 0802 	add.w	r8, r3, r2
 80090e6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80090e8:	1aa7      	subs	r7, r4, r2
 80090ea:	ae20      	add	r6, sp, #128	@ 0x80
 80090ec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80090f0:	2500      	movs	r5, #0
 80090f2:	4545      	cmp	r5, r8
 80090f4:	dd13      	ble.n	800911e <__kernel_rem_pio2+0x86>
 80090f6:	9b06      	ldr	r3, [sp, #24]
 80090f8:	aa20      	add	r2, sp, #128	@ 0x80
 80090fa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80090fe:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8009102:	f04f 0800 	mov.w	r8, #0
 8009106:	9b00      	ldr	r3, [sp, #0]
 8009108:	4598      	cmp	r8, r3
 800910a:	dc31      	bgt.n	8009170 <__kernel_rem_pio2+0xd8>
 800910c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8009398 <__kernel_rem_pio2+0x300>
 8009110:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009114:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009118:	462f      	mov	r7, r5
 800911a:	2600      	movs	r6, #0
 800911c:	e01b      	b.n	8009156 <__kernel_rem_pio2+0xbe>
 800911e:	42ef      	cmn	r7, r5
 8009120:	d407      	bmi.n	8009132 <__kernel_rem_pio2+0x9a>
 8009122:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009126:	f7f7 fa05 	bl	8000534 <__aeabi_i2d>
 800912a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800912e:	3501      	adds	r5, #1
 8009130:	e7df      	b.n	80090f2 <__kernel_rem_pio2+0x5a>
 8009132:	ec51 0b18 	vmov	r0, r1, d8
 8009136:	e7f8      	b.n	800912a <__kernel_rem_pio2+0x92>
 8009138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800913c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009140:	f7f7 fa62 	bl	8000608 <__aeabi_dmul>
 8009144:	4602      	mov	r2, r0
 8009146:	460b      	mov	r3, r1
 8009148:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800914c:	f7f7 f8a6 	bl	800029c <__adddf3>
 8009150:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009154:	3601      	adds	r6, #1
 8009156:	9b05      	ldr	r3, [sp, #20]
 8009158:	429e      	cmp	r6, r3
 800915a:	f1a7 0708 	sub.w	r7, r7, #8
 800915e:	ddeb      	ble.n	8009138 <__kernel_rem_pio2+0xa0>
 8009160:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009164:	f108 0801 	add.w	r8, r8, #1
 8009168:	ecaa 7b02 	vstmia	sl!, {d7}
 800916c:	3508      	adds	r5, #8
 800916e:	e7ca      	b.n	8009106 <__kernel_rem_pio2+0x6e>
 8009170:	9b00      	ldr	r3, [sp, #0]
 8009172:	f8dd 8000 	ldr.w	r8, [sp]
 8009176:	aa0c      	add	r2, sp, #48	@ 0x30
 8009178:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800917c:	930a      	str	r3, [sp, #40]	@ 0x28
 800917e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009180:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009184:	9309      	str	r3, [sp, #36]	@ 0x24
 8009186:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800918a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800918c:	ab98      	add	r3, sp, #608	@ 0x260
 800918e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009192:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8009196:	ed8d 7b02 	vstr	d7, [sp, #8]
 800919a:	ac0c      	add	r4, sp, #48	@ 0x30
 800919c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800919e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80091a2:	46a1      	mov	r9, r4
 80091a4:	46c2      	mov	sl, r8
 80091a6:	f1ba 0f00 	cmp.w	sl, #0
 80091aa:	f1a5 0508 	sub.w	r5, r5, #8
 80091ae:	dc77      	bgt.n	80092a0 <__kernel_rem_pio2+0x208>
 80091b0:	4658      	mov	r0, fp
 80091b2:	ed9d 0b02 	vldr	d0, [sp, #8]
 80091b6:	f000 fac7 	bl	8009748 <scalbn>
 80091ba:	ec57 6b10 	vmov	r6, r7, d0
 80091be:	2200      	movs	r2, #0
 80091c0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80091c4:	4630      	mov	r0, r6
 80091c6:	4639      	mov	r1, r7
 80091c8:	f7f7 fa1e 	bl	8000608 <__aeabi_dmul>
 80091cc:	ec41 0b10 	vmov	d0, r0, r1
 80091d0:	f000 fb3a 	bl	8009848 <floor>
 80091d4:	4b75      	ldr	r3, [pc, #468]	@ (80093ac <__kernel_rem_pio2+0x314>)
 80091d6:	ec51 0b10 	vmov	r0, r1, d0
 80091da:	2200      	movs	r2, #0
 80091dc:	f7f7 fa14 	bl	8000608 <__aeabi_dmul>
 80091e0:	4602      	mov	r2, r0
 80091e2:	460b      	mov	r3, r1
 80091e4:	4630      	mov	r0, r6
 80091e6:	4639      	mov	r1, r7
 80091e8:	f7f7 f856 	bl	8000298 <__aeabi_dsub>
 80091ec:	460f      	mov	r7, r1
 80091ee:	4606      	mov	r6, r0
 80091f0:	f7f7 fca4 	bl	8000b3c <__aeabi_d2iz>
 80091f4:	9002      	str	r0, [sp, #8]
 80091f6:	f7f7 f99d 	bl	8000534 <__aeabi_i2d>
 80091fa:	4602      	mov	r2, r0
 80091fc:	460b      	mov	r3, r1
 80091fe:	4630      	mov	r0, r6
 8009200:	4639      	mov	r1, r7
 8009202:	f7f7 f849 	bl	8000298 <__aeabi_dsub>
 8009206:	f1bb 0f00 	cmp.w	fp, #0
 800920a:	4606      	mov	r6, r0
 800920c:	460f      	mov	r7, r1
 800920e:	dd6c      	ble.n	80092ea <__kernel_rem_pio2+0x252>
 8009210:	f108 31ff 	add.w	r1, r8, #4294967295
 8009214:	ab0c      	add	r3, sp, #48	@ 0x30
 8009216:	9d02      	ldr	r5, [sp, #8]
 8009218:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800921c:	f1cb 0018 	rsb	r0, fp, #24
 8009220:	fa43 f200 	asr.w	r2, r3, r0
 8009224:	4415      	add	r5, r2
 8009226:	4082      	lsls	r2, r0
 8009228:	1a9b      	subs	r3, r3, r2
 800922a:	aa0c      	add	r2, sp, #48	@ 0x30
 800922c:	9502      	str	r5, [sp, #8]
 800922e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009232:	f1cb 0217 	rsb	r2, fp, #23
 8009236:	fa43 f902 	asr.w	r9, r3, r2
 800923a:	f1b9 0f00 	cmp.w	r9, #0
 800923e:	dd64      	ble.n	800930a <__kernel_rem_pio2+0x272>
 8009240:	9b02      	ldr	r3, [sp, #8]
 8009242:	2200      	movs	r2, #0
 8009244:	3301      	adds	r3, #1
 8009246:	9302      	str	r3, [sp, #8]
 8009248:	4615      	mov	r5, r2
 800924a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800924e:	4590      	cmp	r8, r2
 8009250:	f300 80b8 	bgt.w	80093c4 <__kernel_rem_pio2+0x32c>
 8009254:	f1bb 0f00 	cmp.w	fp, #0
 8009258:	dd07      	ble.n	800926a <__kernel_rem_pio2+0x1d2>
 800925a:	f1bb 0f01 	cmp.w	fp, #1
 800925e:	f000 80bf 	beq.w	80093e0 <__kernel_rem_pio2+0x348>
 8009262:	f1bb 0f02 	cmp.w	fp, #2
 8009266:	f000 80c6 	beq.w	80093f6 <__kernel_rem_pio2+0x35e>
 800926a:	f1b9 0f02 	cmp.w	r9, #2
 800926e:	d14c      	bne.n	800930a <__kernel_rem_pio2+0x272>
 8009270:	4632      	mov	r2, r6
 8009272:	463b      	mov	r3, r7
 8009274:	494e      	ldr	r1, [pc, #312]	@ (80093b0 <__kernel_rem_pio2+0x318>)
 8009276:	2000      	movs	r0, #0
 8009278:	f7f7 f80e 	bl	8000298 <__aeabi_dsub>
 800927c:	4606      	mov	r6, r0
 800927e:	460f      	mov	r7, r1
 8009280:	2d00      	cmp	r5, #0
 8009282:	d042      	beq.n	800930a <__kernel_rem_pio2+0x272>
 8009284:	4658      	mov	r0, fp
 8009286:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80093a0 <__kernel_rem_pio2+0x308>
 800928a:	f000 fa5d 	bl	8009748 <scalbn>
 800928e:	4630      	mov	r0, r6
 8009290:	4639      	mov	r1, r7
 8009292:	ec53 2b10 	vmov	r2, r3, d0
 8009296:	f7f6 ffff 	bl	8000298 <__aeabi_dsub>
 800929a:	4606      	mov	r6, r0
 800929c:	460f      	mov	r7, r1
 800929e:	e034      	b.n	800930a <__kernel_rem_pio2+0x272>
 80092a0:	4b44      	ldr	r3, [pc, #272]	@ (80093b4 <__kernel_rem_pio2+0x31c>)
 80092a2:	2200      	movs	r2, #0
 80092a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092a8:	f7f7 f9ae 	bl	8000608 <__aeabi_dmul>
 80092ac:	f7f7 fc46 	bl	8000b3c <__aeabi_d2iz>
 80092b0:	f7f7 f940 	bl	8000534 <__aeabi_i2d>
 80092b4:	4b40      	ldr	r3, [pc, #256]	@ (80093b8 <__kernel_rem_pio2+0x320>)
 80092b6:	2200      	movs	r2, #0
 80092b8:	4606      	mov	r6, r0
 80092ba:	460f      	mov	r7, r1
 80092bc:	f7f7 f9a4 	bl	8000608 <__aeabi_dmul>
 80092c0:	4602      	mov	r2, r0
 80092c2:	460b      	mov	r3, r1
 80092c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092c8:	f7f6 ffe6 	bl	8000298 <__aeabi_dsub>
 80092cc:	f7f7 fc36 	bl	8000b3c <__aeabi_d2iz>
 80092d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80092d4:	f849 0b04 	str.w	r0, [r9], #4
 80092d8:	4639      	mov	r1, r7
 80092da:	4630      	mov	r0, r6
 80092dc:	f7f6 ffde 	bl	800029c <__adddf3>
 80092e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80092e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092e8:	e75d      	b.n	80091a6 <__kernel_rem_pio2+0x10e>
 80092ea:	d107      	bne.n	80092fc <__kernel_rem_pio2+0x264>
 80092ec:	f108 33ff 	add.w	r3, r8, #4294967295
 80092f0:	aa0c      	add	r2, sp, #48	@ 0x30
 80092f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092f6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80092fa:	e79e      	b.n	800923a <__kernel_rem_pio2+0x1a2>
 80092fc:	4b2f      	ldr	r3, [pc, #188]	@ (80093bc <__kernel_rem_pio2+0x324>)
 80092fe:	2200      	movs	r2, #0
 8009300:	f7f7 fc08 	bl	8000b14 <__aeabi_dcmpge>
 8009304:	2800      	cmp	r0, #0
 8009306:	d143      	bne.n	8009390 <__kernel_rem_pio2+0x2f8>
 8009308:	4681      	mov	r9, r0
 800930a:	2200      	movs	r2, #0
 800930c:	2300      	movs	r3, #0
 800930e:	4630      	mov	r0, r6
 8009310:	4639      	mov	r1, r7
 8009312:	f7f7 fbe1 	bl	8000ad8 <__aeabi_dcmpeq>
 8009316:	2800      	cmp	r0, #0
 8009318:	f000 80bf 	beq.w	800949a <__kernel_rem_pio2+0x402>
 800931c:	f108 33ff 	add.w	r3, r8, #4294967295
 8009320:	2200      	movs	r2, #0
 8009322:	9900      	ldr	r1, [sp, #0]
 8009324:	428b      	cmp	r3, r1
 8009326:	da6e      	bge.n	8009406 <__kernel_rem_pio2+0x36e>
 8009328:	2a00      	cmp	r2, #0
 800932a:	f000 8089 	beq.w	8009440 <__kernel_rem_pio2+0x3a8>
 800932e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009332:	ab0c      	add	r3, sp, #48	@ 0x30
 8009334:	f1ab 0b18 	sub.w	fp, fp, #24
 8009338:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d0f6      	beq.n	800932e <__kernel_rem_pio2+0x296>
 8009340:	4658      	mov	r0, fp
 8009342:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80093a0 <__kernel_rem_pio2+0x308>
 8009346:	f000 f9ff 	bl	8009748 <scalbn>
 800934a:	f108 0301 	add.w	r3, r8, #1
 800934e:	00da      	lsls	r2, r3, #3
 8009350:	9205      	str	r2, [sp, #20]
 8009352:	ec55 4b10 	vmov	r4, r5, d0
 8009356:	aa70      	add	r2, sp, #448	@ 0x1c0
 8009358:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80093b4 <__kernel_rem_pio2+0x31c>
 800935c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8009360:	4646      	mov	r6, r8
 8009362:	f04f 0a00 	mov.w	sl, #0
 8009366:	2e00      	cmp	r6, #0
 8009368:	f280 80cf 	bge.w	800950a <__kernel_rem_pio2+0x472>
 800936c:	4644      	mov	r4, r8
 800936e:	2c00      	cmp	r4, #0
 8009370:	f2c0 80fd 	blt.w	800956e <__kernel_rem_pio2+0x4d6>
 8009374:	4b12      	ldr	r3, [pc, #72]	@ (80093c0 <__kernel_rem_pio2+0x328>)
 8009376:	461f      	mov	r7, r3
 8009378:	ab70      	add	r3, sp, #448	@ 0x1c0
 800937a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800937e:	9306      	str	r3, [sp, #24]
 8009380:	f04f 0a00 	mov.w	sl, #0
 8009384:	f04f 0b00 	mov.w	fp, #0
 8009388:	2600      	movs	r6, #0
 800938a:	eba8 0504 	sub.w	r5, r8, r4
 800938e:	e0e2      	b.n	8009556 <__kernel_rem_pio2+0x4be>
 8009390:	f04f 0902 	mov.w	r9, #2
 8009394:	e754      	b.n	8009240 <__kernel_rem_pio2+0x1a8>
 8009396:	bf00      	nop
	...
 80093a4:	3ff00000 	.word	0x3ff00000
 80093a8:	0800b330 	.word	0x0800b330
 80093ac:	40200000 	.word	0x40200000
 80093b0:	3ff00000 	.word	0x3ff00000
 80093b4:	3e700000 	.word	0x3e700000
 80093b8:	41700000 	.word	0x41700000
 80093bc:	3fe00000 	.word	0x3fe00000
 80093c0:	0800b2f0 	.word	0x0800b2f0
 80093c4:	f854 3b04 	ldr.w	r3, [r4], #4
 80093c8:	b945      	cbnz	r5, 80093dc <__kernel_rem_pio2+0x344>
 80093ca:	b123      	cbz	r3, 80093d6 <__kernel_rem_pio2+0x33e>
 80093cc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80093d0:	f844 3c04 	str.w	r3, [r4, #-4]
 80093d4:	2301      	movs	r3, #1
 80093d6:	3201      	adds	r2, #1
 80093d8:	461d      	mov	r5, r3
 80093da:	e738      	b.n	800924e <__kernel_rem_pio2+0x1b6>
 80093dc:	1acb      	subs	r3, r1, r3
 80093de:	e7f7      	b.n	80093d0 <__kernel_rem_pio2+0x338>
 80093e0:	f108 32ff 	add.w	r2, r8, #4294967295
 80093e4:	ab0c      	add	r3, sp, #48	@ 0x30
 80093e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ea:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80093ee:	a90c      	add	r1, sp, #48	@ 0x30
 80093f0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80093f4:	e739      	b.n	800926a <__kernel_rem_pio2+0x1d2>
 80093f6:	f108 32ff 	add.w	r2, r8, #4294967295
 80093fa:	ab0c      	add	r3, sp, #48	@ 0x30
 80093fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009400:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009404:	e7f3      	b.n	80093ee <__kernel_rem_pio2+0x356>
 8009406:	a90c      	add	r1, sp, #48	@ 0x30
 8009408:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800940c:	3b01      	subs	r3, #1
 800940e:	430a      	orrs	r2, r1
 8009410:	e787      	b.n	8009322 <__kernel_rem_pio2+0x28a>
 8009412:	3401      	adds	r4, #1
 8009414:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009418:	2a00      	cmp	r2, #0
 800941a:	d0fa      	beq.n	8009412 <__kernel_rem_pio2+0x37a>
 800941c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800941e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009422:	eb0d 0503 	add.w	r5, sp, r3
 8009426:	9b06      	ldr	r3, [sp, #24]
 8009428:	aa20      	add	r2, sp, #128	@ 0x80
 800942a:	4443      	add	r3, r8
 800942c:	f108 0701 	add.w	r7, r8, #1
 8009430:	3d98      	subs	r5, #152	@ 0x98
 8009432:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8009436:	4444      	add	r4, r8
 8009438:	42bc      	cmp	r4, r7
 800943a:	da04      	bge.n	8009446 <__kernel_rem_pio2+0x3ae>
 800943c:	46a0      	mov	r8, r4
 800943e:	e6a2      	b.n	8009186 <__kernel_rem_pio2+0xee>
 8009440:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009442:	2401      	movs	r4, #1
 8009444:	e7e6      	b.n	8009414 <__kernel_rem_pio2+0x37c>
 8009446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009448:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800944c:	f7f7 f872 	bl	8000534 <__aeabi_i2d>
 8009450:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8009718 <__kernel_rem_pio2+0x680>
 8009454:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009458:	ed8d 7b02 	vstr	d7, [sp, #8]
 800945c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009460:	46b2      	mov	sl, r6
 8009462:	f04f 0800 	mov.w	r8, #0
 8009466:	9b05      	ldr	r3, [sp, #20]
 8009468:	4598      	cmp	r8, r3
 800946a:	dd05      	ble.n	8009478 <__kernel_rem_pio2+0x3e0>
 800946c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009470:	3701      	adds	r7, #1
 8009472:	eca5 7b02 	vstmia	r5!, {d7}
 8009476:	e7df      	b.n	8009438 <__kernel_rem_pio2+0x3a0>
 8009478:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800947c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009480:	f7f7 f8c2 	bl	8000608 <__aeabi_dmul>
 8009484:	4602      	mov	r2, r0
 8009486:	460b      	mov	r3, r1
 8009488:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800948c:	f7f6 ff06 	bl	800029c <__adddf3>
 8009490:	f108 0801 	add.w	r8, r8, #1
 8009494:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009498:	e7e5      	b.n	8009466 <__kernel_rem_pio2+0x3ce>
 800949a:	f1cb 0000 	rsb	r0, fp, #0
 800949e:	ec47 6b10 	vmov	d0, r6, r7
 80094a2:	f000 f951 	bl	8009748 <scalbn>
 80094a6:	ec55 4b10 	vmov	r4, r5, d0
 80094aa:	4b9d      	ldr	r3, [pc, #628]	@ (8009720 <__kernel_rem_pio2+0x688>)
 80094ac:	2200      	movs	r2, #0
 80094ae:	4620      	mov	r0, r4
 80094b0:	4629      	mov	r1, r5
 80094b2:	f7f7 fb2f 	bl	8000b14 <__aeabi_dcmpge>
 80094b6:	b300      	cbz	r0, 80094fa <__kernel_rem_pio2+0x462>
 80094b8:	4b9a      	ldr	r3, [pc, #616]	@ (8009724 <__kernel_rem_pio2+0x68c>)
 80094ba:	2200      	movs	r2, #0
 80094bc:	4620      	mov	r0, r4
 80094be:	4629      	mov	r1, r5
 80094c0:	f7f7 f8a2 	bl	8000608 <__aeabi_dmul>
 80094c4:	f7f7 fb3a 	bl	8000b3c <__aeabi_d2iz>
 80094c8:	4606      	mov	r6, r0
 80094ca:	f7f7 f833 	bl	8000534 <__aeabi_i2d>
 80094ce:	4b94      	ldr	r3, [pc, #592]	@ (8009720 <__kernel_rem_pio2+0x688>)
 80094d0:	2200      	movs	r2, #0
 80094d2:	f7f7 f899 	bl	8000608 <__aeabi_dmul>
 80094d6:	460b      	mov	r3, r1
 80094d8:	4602      	mov	r2, r0
 80094da:	4629      	mov	r1, r5
 80094dc:	4620      	mov	r0, r4
 80094de:	f7f6 fedb 	bl	8000298 <__aeabi_dsub>
 80094e2:	f7f7 fb2b 	bl	8000b3c <__aeabi_d2iz>
 80094e6:	ab0c      	add	r3, sp, #48	@ 0x30
 80094e8:	f10b 0b18 	add.w	fp, fp, #24
 80094ec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80094f0:	f108 0801 	add.w	r8, r8, #1
 80094f4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80094f8:	e722      	b.n	8009340 <__kernel_rem_pio2+0x2a8>
 80094fa:	4620      	mov	r0, r4
 80094fc:	4629      	mov	r1, r5
 80094fe:	f7f7 fb1d 	bl	8000b3c <__aeabi_d2iz>
 8009502:	ab0c      	add	r3, sp, #48	@ 0x30
 8009504:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009508:	e71a      	b.n	8009340 <__kernel_rem_pio2+0x2a8>
 800950a:	ab0c      	add	r3, sp, #48	@ 0x30
 800950c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009510:	f7f7 f810 	bl	8000534 <__aeabi_i2d>
 8009514:	4622      	mov	r2, r4
 8009516:	462b      	mov	r3, r5
 8009518:	f7f7 f876 	bl	8000608 <__aeabi_dmul>
 800951c:	4652      	mov	r2, sl
 800951e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8009522:	465b      	mov	r3, fp
 8009524:	4620      	mov	r0, r4
 8009526:	4629      	mov	r1, r5
 8009528:	f7f7 f86e 	bl	8000608 <__aeabi_dmul>
 800952c:	3e01      	subs	r6, #1
 800952e:	4604      	mov	r4, r0
 8009530:	460d      	mov	r5, r1
 8009532:	e718      	b.n	8009366 <__kernel_rem_pio2+0x2ce>
 8009534:	9906      	ldr	r1, [sp, #24]
 8009536:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800953a:	9106      	str	r1, [sp, #24]
 800953c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8009540:	f7f7 f862 	bl	8000608 <__aeabi_dmul>
 8009544:	4602      	mov	r2, r0
 8009546:	460b      	mov	r3, r1
 8009548:	4650      	mov	r0, sl
 800954a:	4659      	mov	r1, fp
 800954c:	f7f6 fea6 	bl	800029c <__adddf3>
 8009550:	3601      	adds	r6, #1
 8009552:	4682      	mov	sl, r0
 8009554:	468b      	mov	fp, r1
 8009556:	9b00      	ldr	r3, [sp, #0]
 8009558:	429e      	cmp	r6, r3
 800955a:	dc01      	bgt.n	8009560 <__kernel_rem_pio2+0x4c8>
 800955c:	42b5      	cmp	r5, r6
 800955e:	dae9      	bge.n	8009534 <__kernel_rem_pio2+0x49c>
 8009560:	ab48      	add	r3, sp, #288	@ 0x120
 8009562:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009566:	e9c5 ab00 	strd	sl, fp, [r5]
 800956a:	3c01      	subs	r4, #1
 800956c:	e6ff      	b.n	800936e <__kernel_rem_pio2+0x2d6>
 800956e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009570:	2b02      	cmp	r3, #2
 8009572:	dc0b      	bgt.n	800958c <__kernel_rem_pio2+0x4f4>
 8009574:	2b00      	cmp	r3, #0
 8009576:	dc39      	bgt.n	80095ec <__kernel_rem_pio2+0x554>
 8009578:	d05d      	beq.n	8009636 <__kernel_rem_pio2+0x59e>
 800957a:	9b02      	ldr	r3, [sp, #8]
 800957c:	f003 0007 	and.w	r0, r3, #7
 8009580:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8009584:	ecbd 8b02 	vpop	{d8}
 8009588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800958c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800958e:	2b03      	cmp	r3, #3
 8009590:	d1f3      	bne.n	800957a <__kernel_rem_pio2+0x4e2>
 8009592:	9b05      	ldr	r3, [sp, #20]
 8009594:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009598:	eb0d 0403 	add.w	r4, sp, r3
 800959c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80095a0:	4625      	mov	r5, r4
 80095a2:	46c2      	mov	sl, r8
 80095a4:	f1ba 0f00 	cmp.w	sl, #0
 80095a8:	f1a5 0508 	sub.w	r5, r5, #8
 80095ac:	dc6b      	bgt.n	8009686 <__kernel_rem_pio2+0x5ee>
 80095ae:	4645      	mov	r5, r8
 80095b0:	2d01      	cmp	r5, #1
 80095b2:	f1a4 0408 	sub.w	r4, r4, #8
 80095b6:	f300 8087 	bgt.w	80096c8 <__kernel_rem_pio2+0x630>
 80095ba:	9c05      	ldr	r4, [sp, #20]
 80095bc:	ab48      	add	r3, sp, #288	@ 0x120
 80095be:	441c      	add	r4, r3
 80095c0:	2000      	movs	r0, #0
 80095c2:	2100      	movs	r1, #0
 80095c4:	f1b8 0f01 	cmp.w	r8, #1
 80095c8:	f300 809c 	bgt.w	8009704 <__kernel_rem_pio2+0x66c>
 80095cc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80095d0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80095d4:	f1b9 0f00 	cmp.w	r9, #0
 80095d8:	f040 80a6 	bne.w	8009728 <__kernel_rem_pio2+0x690>
 80095dc:	9b04      	ldr	r3, [sp, #16]
 80095de:	e9c3 7800 	strd	r7, r8, [r3]
 80095e2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80095e6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80095ea:	e7c6      	b.n	800957a <__kernel_rem_pio2+0x4e2>
 80095ec:	9d05      	ldr	r5, [sp, #20]
 80095ee:	ab48      	add	r3, sp, #288	@ 0x120
 80095f0:	441d      	add	r5, r3
 80095f2:	4644      	mov	r4, r8
 80095f4:	2000      	movs	r0, #0
 80095f6:	2100      	movs	r1, #0
 80095f8:	2c00      	cmp	r4, #0
 80095fa:	da35      	bge.n	8009668 <__kernel_rem_pio2+0x5d0>
 80095fc:	f1b9 0f00 	cmp.w	r9, #0
 8009600:	d038      	beq.n	8009674 <__kernel_rem_pio2+0x5dc>
 8009602:	4602      	mov	r2, r0
 8009604:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009608:	9c04      	ldr	r4, [sp, #16]
 800960a:	e9c4 2300 	strd	r2, r3, [r4]
 800960e:	4602      	mov	r2, r0
 8009610:	460b      	mov	r3, r1
 8009612:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8009616:	f7f6 fe3f 	bl	8000298 <__aeabi_dsub>
 800961a:	ad4a      	add	r5, sp, #296	@ 0x128
 800961c:	2401      	movs	r4, #1
 800961e:	45a0      	cmp	r8, r4
 8009620:	da2b      	bge.n	800967a <__kernel_rem_pio2+0x5e2>
 8009622:	f1b9 0f00 	cmp.w	r9, #0
 8009626:	d002      	beq.n	800962e <__kernel_rem_pio2+0x596>
 8009628:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800962c:	4619      	mov	r1, r3
 800962e:	9b04      	ldr	r3, [sp, #16]
 8009630:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009634:	e7a1      	b.n	800957a <__kernel_rem_pio2+0x4e2>
 8009636:	9c05      	ldr	r4, [sp, #20]
 8009638:	ab48      	add	r3, sp, #288	@ 0x120
 800963a:	441c      	add	r4, r3
 800963c:	2000      	movs	r0, #0
 800963e:	2100      	movs	r1, #0
 8009640:	f1b8 0f00 	cmp.w	r8, #0
 8009644:	da09      	bge.n	800965a <__kernel_rem_pio2+0x5c2>
 8009646:	f1b9 0f00 	cmp.w	r9, #0
 800964a:	d002      	beq.n	8009652 <__kernel_rem_pio2+0x5ba>
 800964c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009650:	4619      	mov	r1, r3
 8009652:	9b04      	ldr	r3, [sp, #16]
 8009654:	e9c3 0100 	strd	r0, r1, [r3]
 8009658:	e78f      	b.n	800957a <__kernel_rem_pio2+0x4e2>
 800965a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800965e:	f7f6 fe1d 	bl	800029c <__adddf3>
 8009662:	f108 38ff 	add.w	r8, r8, #4294967295
 8009666:	e7eb      	b.n	8009640 <__kernel_rem_pio2+0x5a8>
 8009668:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800966c:	f7f6 fe16 	bl	800029c <__adddf3>
 8009670:	3c01      	subs	r4, #1
 8009672:	e7c1      	b.n	80095f8 <__kernel_rem_pio2+0x560>
 8009674:	4602      	mov	r2, r0
 8009676:	460b      	mov	r3, r1
 8009678:	e7c6      	b.n	8009608 <__kernel_rem_pio2+0x570>
 800967a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800967e:	f7f6 fe0d 	bl	800029c <__adddf3>
 8009682:	3401      	adds	r4, #1
 8009684:	e7cb      	b.n	800961e <__kernel_rem_pio2+0x586>
 8009686:	ed95 7b00 	vldr	d7, [r5]
 800968a:	ed8d 7b00 	vstr	d7, [sp]
 800968e:	ed95 7b02 	vldr	d7, [r5, #8]
 8009692:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009696:	ec53 2b17 	vmov	r2, r3, d7
 800969a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800969e:	f7f6 fdfd 	bl	800029c <__adddf3>
 80096a2:	4602      	mov	r2, r0
 80096a4:	460b      	mov	r3, r1
 80096a6:	4606      	mov	r6, r0
 80096a8:	460f      	mov	r7, r1
 80096aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096ae:	f7f6 fdf3 	bl	8000298 <__aeabi_dsub>
 80096b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096b6:	f7f6 fdf1 	bl	800029c <__adddf3>
 80096ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096be:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80096c2:	e9c5 6700 	strd	r6, r7, [r5]
 80096c6:	e76d      	b.n	80095a4 <__kernel_rem_pio2+0x50c>
 80096c8:	ed94 7b00 	vldr	d7, [r4]
 80096cc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80096d0:	ec51 0b17 	vmov	r0, r1, d7
 80096d4:	4652      	mov	r2, sl
 80096d6:	465b      	mov	r3, fp
 80096d8:	ed8d 7b00 	vstr	d7, [sp]
 80096dc:	f7f6 fdde 	bl	800029c <__adddf3>
 80096e0:	4602      	mov	r2, r0
 80096e2:	460b      	mov	r3, r1
 80096e4:	4606      	mov	r6, r0
 80096e6:	460f      	mov	r7, r1
 80096e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096ec:	f7f6 fdd4 	bl	8000298 <__aeabi_dsub>
 80096f0:	4652      	mov	r2, sl
 80096f2:	465b      	mov	r3, fp
 80096f4:	f7f6 fdd2 	bl	800029c <__adddf3>
 80096f8:	3d01      	subs	r5, #1
 80096fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80096fe:	e9c4 6700 	strd	r6, r7, [r4]
 8009702:	e755      	b.n	80095b0 <__kernel_rem_pio2+0x518>
 8009704:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009708:	f7f6 fdc8 	bl	800029c <__adddf3>
 800970c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009710:	e758      	b.n	80095c4 <__kernel_rem_pio2+0x52c>
 8009712:	bf00      	nop
 8009714:	f3af 8000 	nop.w
	...
 8009720:	41700000 	.word	0x41700000
 8009724:	3e700000 	.word	0x3e700000
 8009728:	9b04      	ldr	r3, [sp, #16]
 800972a:	9a04      	ldr	r2, [sp, #16]
 800972c:	601f      	str	r7, [r3, #0]
 800972e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8009732:	605c      	str	r4, [r3, #4]
 8009734:	609d      	str	r5, [r3, #8]
 8009736:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800973a:	60d3      	str	r3, [r2, #12]
 800973c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009740:	6110      	str	r0, [r2, #16]
 8009742:	6153      	str	r3, [r2, #20]
 8009744:	e719      	b.n	800957a <__kernel_rem_pio2+0x4e2>
 8009746:	bf00      	nop

08009748 <scalbn>:
 8009748:	b570      	push	{r4, r5, r6, lr}
 800974a:	ec55 4b10 	vmov	r4, r5, d0
 800974e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009752:	4606      	mov	r6, r0
 8009754:	462b      	mov	r3, r5
 8009756:	b991      	cbnz	r1, 800977e <scalbn+0x36>
 8009758:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800975c:	4323      	orrs	r3, r4
 800975e:	d03d      	beq.n	80097dc <scalbn+0x94>
 8009760:	4b35      	ldr	r3, [pc, #212]	@ (8009838 <scalbn+0xf0>)
 8009762:	4620      	mov	r0, r4
 8009764:	4629      	mov	r1, r5
 8009766:	2200      	movs	r2, #0
 8009768:	f7f6 ff4e 	bl	8000608 <__aeabi_dmul>
 800976c:	4b33      	ldr	r3, [pc, #204]	@ (800983c <scalbn+0xf4>)
 800976e:	429e      	cmp	r6, r3
 8009770:	4604      	mov	r4, r0
 8009772:	460d      	mov	r5, r1
 8009774:	da0f      	bge.n	8009796 <scalbn+0x4e>
 8009776:	a328      	add	r3, pc, #160	@ (adr r3, 8009818 <scalbn+0xd0>)
 8009778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977c:	e01e      	b.n	80097bc <scalbn+0x74>
 800977e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8009782:	4291      	cmp	r1, r2
 8009784:	d10b      	bne.n	800979e <scalbn+0x56>
 8009786:	4622      	mov	r2, r4
 8009788:	4620      	mov	r0, r4
 800978a:	4629      	mov	r1, r5
 800978c:	f7f6 fd86 	bl	800029c <__adddf3>
 8009790:	4604      	mov	r4, r0
 8009792:	460d      	mov	r5, r1
 8009794:	e022      	b.n	80097dc <scalbn+0x94>
 8009796:	460b      	mov	r3, r1
 8009798:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800979c:	3936      	subs	r1, #54	@ 0x36
 800979e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80097a2:	4296      	cmp	r6, r2
 80097a4:	dd0d      	ble.n	80097c2 <scalbn+0x7a>
 80097a6:	2d00      	cmp	r5, #0
 80097a8:	a11d      	add	r1, pc, #116	@ (adr r1, 8009820 <scalbn+0xd8>)
 80097aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097ae:	da02      	bge.n	80097b6 <scalbn+0x6e>
 80097b0:	a11d      	add	r1, pc, #116	@ (adr r1, 8009828 <scalbn+0xe0>)
 80097b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097b6:	a31a      	add	r3, pc, #104	@ (adr r3, 8009820 <scalbn+0xd8>)
 80097b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097bc:	f7f6 ff24 	bl	8000608 <__aeabi_dmul>
 80097c0:	e7e6      	b.n	8009790 <scalbn+0x48>
 80097c2:	1872      	adds	r2, r6, r1
 80097c4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80097c8:	428a      	cmp	r2, r1
 80097ca:	dcec      	bgt.n	80097a6 <scalbn+0x5e>
 80097cc:	2a00      	cmp	r2, #0
 80097ce:	dd08      	ble.n	80097e2 <scalbn+0x9a>
 80097d0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80097d4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80097d8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80097dc:	ec45 4b10 	vmov	d0, r4, r5
 80097e0:	bd70      	pop	{r4, r5, r6, pc}
 80097e2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80097e6:	da08      	bge.n	80097fa <scalbn+0xb2>
 80097e8:	2d00      	cmp	r5, #0
 80097ea:	a10b      	add	r1, pc, #44	@ (adr r1, 8009818 <scalbn+0xd0>)
 80097ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097f0:	dac1      	bge.n	8009776 <scalbn+0x2e>
 80097f2:	a10f      	add	r1, pc, #60	@ (adr r1, 8009830 <scalbn+0xe8>)
 80097f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097f8:	e7bd      	b.n	8009776 <scalbn+0x2e>
 80097fa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80097fe:	3236      	adds	r2, #54	@ 0x36
 8009800:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009804:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009808:	4620      	mov	r0, r4
 800980a:	4b0d      	ldr	r3, [pc, #52]	@ (8009840 <scalbn+0xf8>)
 800980c:	4629      	mov	r1, r5
 800980e:	2200      	movs	r2, #0
 8009810:	e7d4      	b.n	80097bc <scalbn+0x74>
 8009812:	bf00      	nop
 8009814:	f3af 8000 	nop.w
 8009818:	c2f8f359 	.word	0xc2f8f359
 800981c:	01a56e1f 	.word	0x01a56e1f
 8009820:	8800759c 	.word	0x8800759c
 8009824:	7e37e43c 	.word	0x7e37e43c
 8009828:	8800759c 	.word	0x8800759c
 800982c:	fe37e43c 	.word	0xfe37e43c
 8009830:	c2f8f359 	.word	0xc2f8f359
 8009834:	81a56e1f 	.word	0x81a56e1f
 8009838:	43500000 	.word	0x43500000
 800983c:	ffff3cb0 	.word	0xffff3cb0
 8009840:	3c900000 	.word	0x3c900000
 8009844:	00000000 	.word	0x00000000

08009848 <floor>:
 8009848:	ec51 0b10 	vmov	r0, r1, d0
 800984c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009854:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8009858:	2e13      	cmp	r6, #19
 800985a:	460c      	mov	r4, r1
 800985c:	4605      	mov	r5, r0
 800985e:	4680      	mov	r8, r0
 8009860:	dc34      	bgt.n	80098cc <floor+0x84>
 8009862:	2e00      	cmp	r6, #0
 8009864:	da17      	bge.n	8009896 <floor+0x4e>
 8009866:	a332      	add	r3, pc, #200	@ (adr r3, 8009930 <floor+0xe8>)
 8009868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986c:	f7f6 fd16 	bl	800029c <__adddf3>
 8009870:	2200      	movs	r2, #0
 8009872:	2300      	movs	r3, #0
 8009874:	f7f7 f958 	bl	8000b28 <__aeabi_dcmpgt>
 8009878:	b150      	cbz	r0, 8009890 <floor+0x48>
 800987a:	2c00      	cmp	r4, #0
 800987c:	da55      	bge.n	800992a <floor+0xe2>
 800987e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8009882:	432c      	orrs	r4, r5
 8009884:	2500      	movs	r5, #0
 8009886:	42ac      	cmp	r4, r5
 8009888:	4c2b      	ldr	r4, [pc, #172]	@ (8009938 <floor+0xf0>)
 800988a:	bf08      	it	eq
 800988c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8009890:	4621      	mov	r1, r4
 8009892:	4628      	mov	r0, r5
 8009894:	e023      	b.n	80098de <floor+0x96>
 8009896:	4f29      	ldr	r7, [pc, #164]	@ (800993c <floor+0xf4>)
 8009898:	4137      	asrs	r7, r6
 800989a:	ea01 0307 	and.w	r3, r1, r7
 800989e:	4303      	orrs	r3, r0
 80098a0:	d01d      	beq.n	80098de <floor+0x96>
 80098a2:	a323      	add	r3, pc, #140	@ (adr r3, 8009930 <floor+0xe8>)
 80098a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a8:	f7f6 fcf8 	bl	800029c <__adddf3>
 80098ac:	2200      	movs	r2, #0
 80098ae:	2300      	movs	r3, #0
 80098b0:	f7f7 f93a 	bl	8000b28 <__aeabi_dcmpgt>
 80098b4:	2800      	cmp	r0, #0
 80098b6:	d0eb      	beq.n	8009890 <floor+0x48>
 80098b8:	2c00      	cmp	r4, #0
 80098ba:	bfbe      	ittt	lt
 80098bc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80098c0:	4133      	asrlt	r3, r6
 80098c2:	18e4      	addlt	r4, r4, r3
 80098c4:	ea24 0407 	bic.w	r4, r4, r7
 80098c8:	2500      	movs	r5, #0
 80098ca:	e7e1      	b.n	8009890 <floor+0x48>
 80098cc:	2e33      	cmp	r6, #51	@ 0x33
 80098ce:	dd0a      	ble.n	80098e6 <floor+0x9e>
 80098d0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80098d4:	d103      	bne.n	80098de <floor+0x96>
 80098d6:	4602      	mov	r2, r0
 80098d8:	460b      	mov	r3, r1
 80098da:	f7f6 fcdf 	bl	800029c <__adddf3>
 80098de:	ec41 0b10 	vmov	d0, r0, r1
 80098e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098e6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80098ea:	f04f 37ff 	mov.w	r7, #4294967295
 80098ee:	40df      	lsrs	r7, r3
 80098f0:	4207      	tst	r7, r0
 80098f2:	d0f4      	beq.n	80098de <floor+0x96>
 80098f4:	a30e      	add	r3, pc, #56	@ (adr r3, 8009930 <floor+0xe8>)
 80098f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fa:	f7f6 fccf 	bl	800029c <__adddf3>
 80098fe:	2200      	movs	r2, #0
 8009900:	2300      	movs	r3, #0
 8009902:	f7f7 f911 	bl	8000b28 <__aeabi_dcmpgt>
 8009906:	2800      	cmp	r0, #0
 8009908:	d0c2      	beq.n	8009890 <floor+0x48>
 800990a:	2c00      	cmp	r4, #0
 800990c:	da0a      	bge.n	8009924 <floor+0xdc>
 800990e:	2e14      	cmp	r6, #20
 8009910:	d101      	bne.n	8009916 <floor+0xce>
 8009912:	3401      	adds	r4, #1
 8009914:	e006      	b.n	8009924 <floor+0xdc>
 8009916:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800991a:	2301      	movs	r3, #1
 800991c:	40b3      	lsls	r3, r6
 800991e:	441d      	add	r5, r3
 8009920:	4545      	cmp	r5, r8
 8009922:	d3f6      	bcc.n	8009912 <floor+0xca>
 8009924:	ea25 0507 	bic.w	r5, r5, r7
 8009928:	e7b2      	b.n	8009890 <floor+0x48>
 800992a:	2500      	movs	r5, #0
 800992c:	462c      	mov	r4, r5
 800992e:	e7af      	b.n	8009890 <floor+0x48>
 8009930:	8800759c 	.word	0x8800759c
 8009934:	7e37e43c 	.word	0x7e37e43c
 8009938:	bff00000 	.word	0xbff00000
 800993c:	000fffff 	.word	0x000fffff

08009940 <_init>:
 8009940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009942:	bf00      	nop
 8009944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009946:	bc08      	pop	{r3}
 8009948:	469e      	mov	lr, r3
 800994a:	4770      	bx	lr

0800994c <_fini>:
 800994c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800994e:	bf00      	nop
 8009950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009952:	bc08      	pop	{r3}
 8009954:	469e      	mov	lr, r3
 8009956:	4770      	bx	lr
